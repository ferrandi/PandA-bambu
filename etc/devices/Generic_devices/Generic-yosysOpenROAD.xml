<?xml version="1.0"?>
<synthesis>
   <flow name="Synthesis">
      <step id="bash_flow" config="bash_flow"/>
   </flow>
   <flow name="Characterization">
      <step id="bash_flow" config="bash_flowC"/>
   </flow>
   <bash config="bash_flowC">
      <cmd name=": ${OMP_NUM_THREADS:=1}"/>
      <cmd name="export OMP_NUM_THREADS"/>
      <cmd name="export SCRIPTS_DIR=${PANDA_DATA_INSTALLDIR}/scripts/"/>
      <cmd name="export UTILS_DIR=${PANDA_DATA_INSTALLDIR}/util/"/>
      <cmd name="export PLATFORM_DIR=${PANDA_DATA_INSTALLDIR}/${PLATFORM}/"/>

      <cmd name="export DESIGN_NAME=&quot;${__top_id__}&quot;"/>
      <cmd name=": ${DESIGN_NICKNAME:=${DESIGN_NAME}}"/>
      <cmd name="export DESIGN_NICKNAME"/>
      <cmd name="export SDC_FILE=${__sdc_file__}"/>
      <cmd name="export VERILOG_FILES=&quot;${__generic_sources_macro_list__}&quot;"/>
      <cmd name=": ${FLOW_VARIANT:=base}"/>
      <cmd name="export FLOW_VARIANT"/>

      <cmd name=": ${GPL_TIMING_DRIVEN:=1}"/>
      <cmd name="export GPL_TIMING_DRIVEN"/>

      <cmd name=": ${GPL_ROUTABILITY_DRIVEN:=1}"/>
      <cmd name="export GPL_ROUTABILITY_DRIVEN"/>

      <cmd name="# Setup working directories"/>
      <cmd name="export DESIGN_DIR=${CURR_WORKDIR}"/>
      <cmd name="export LOG_DIR=${CURR_WORKDIR}/OpenROAD_logs/${PLATFORM}/${DESIGN_NICKNAME}/${FLOW_VARIANT}"/>
      <cmd name="export OBJECTS_DIR=${CURR_WORKDIR}/OpenROAD_objects/${PLATFORM}/${DESIGN_NICKNAME}/${FLOW_VARIANT}"/>
      <cmd name="export REPORTS_DIR=${CURR_WORKDIR}/OpenROAD_reports/${PLATFORM}/${DESIGN_NICKNAME}/${FLOW_VARIANT}"/>
      <cmd name="export RESULTS_DIR=${CURR_WORKDIR}/OpenROAD_results/${PLATFORM}/${DESIGN_NICKNAME}/${FLOW_VARIANT}"/>

      <cmd name="# Enables hierarchical yosys"/>
      <cmd name=": {SYNTH_HIERARCHICAL:=0}"/>
      <cmd name="export SYNTH_HIERARCHICAL"/>
      <cmd name="export SYNTH_STOP_MODULE_SCRIPT=${OBJECTS_DIR}/mark_hier_stop_modules.tcl"/>
      <cmd name="if [[ $SYNTH_HIERARCHICAL -eq 1 ]]"/>
      <cmd name="then"/>
      <cmd name="  export HIER_REPORT_SCRIPT=${SCRIPTS_DIR}/synth_hier_report.tcl"/>
      <cmd name="  : ${MAX_UNGROUP_SIZE:=0}"/>
      <cmd name="  export MAX_UNGROUP_SIZE"/>
      <cmd name="fi"/>

      <cmd name="# Enables Re-synthesis for area reclaim"/>
      <cmd name=": ${RESYNTH_AREA_RECOVER:=0}"/>
      <cmd name="export RESYNTH_AREA_RECOVER"/>
      <cmd name=": ${RESYNTH_TIMING_RECOVER:=0}"/>
      <cmd name="export RESYNTH_TIMING_RECOVER"/>
      <cmd name=": ${ABC_AREA:=0}"/>
      <cmd name="export ABC_AREA"/>
      <cmd name="# Global setting for Synthesis"/>
      <cmd name=": ${SYNTH_ARGS:=-flatten}"/>
      <cmd name="export SYNTH_ARGS"/>
      <cmd name="# Global setting for Floorplan"/>
      <cmd name="export PLACE_PINS_ARGS=&quot;&quot;"/>
      <cmd name=": ${STREAM_SYSTEM:=GDS}"/>
      <cmd name="export STREAM_SYSTEM"/>

      <cmd name=": {ABC_CLOCK_PERIOD_IN_PS:=${__clk_period_ps__}}"/>
      <cmd name="export ABC_CLOCK_PERIOD_IN_PS"/>

      <cmd name="rm -rf ${LOG_DIR}"/>
      <cmd name="mkdir -p ${LOG_DIR}"/>
      <cmd name="rm -rf ${OBJECTS_DIR}"/>
      <cmd name="mkdir -p ${OBJECTS_DIR}"/>
      <cmd name="rm -rf ${REPORTS_DIR}"/>
      <cmd name="mkdir -p ${REPORTS_DIR}"/>
      <cmd name="rm -rf ${RESULTS_DIR}"/>
      <cmd name="mkdir -p ${RESULTS_DIR}"/>

      <cmd name="mkdir -p ${OBJECTS_DIR}/lib"/>
      <cmd name="DONT_USE_LIBS=&quot;&quot;"/>
      <cmd name="COUNTER=1"/>
      <cmd name="for lib in ${LIB_FILES} "/>
      <cmd name="do"/>
      <cmd name="  ${UTILS_DIR}/markDontUse.py -p &quot;${DONT_USE_CELLS}&quot; -i ${lib} -o ${OBJECTS_DIR}/lib/tobemerged${COUNTER}.lib"/>
      <cmd name="  DONT_USE_LIBS+=&quot; ${OBJECTS_DIR}/lib/tobemerged${COUNTER}.lib&quot;"/>
      <cmd name="  COUNTER=$[$COUNTER +1]"/>
      <cmd name="done"/>
      <cmd name="export DONT_USE_LIBS"/>
      <cmd name="${UTILS_DIR}/mergeLib.pl ${PLATFORM}_merged ${DONT_USE_LIBS} > ${OBJECTS_DIR}/lib/merged.lib"/>

      <cmd name=": ${DONT_USE_SC_LIB:=${OBJECTS_DIR}/lib/merged.lib}"/>
      <cmd name="export DONT_USE_SC_LIB"/>

      <cmd name=": ${WRAP_LEFS:=&quot;&quot;}"/>
      <cmd name=": ${WRAPPED_LEFS:=&quot;&quot;}"/>
      <cmd name=": ${WRAPPED_GDSOAS:=&quot;&quot;}"/>
      <cmd name="export WRAPPED_GDSOAS"/>
      <!-- <cmd name="export ADDITIONAL_LEFS+=&quot;${WRAPPED_LEFS} ${WRAP_LEFS}&quot;"/> -->
      <!-- # Pre-process KLayout tech -->
      <cmd name="sed '/OR_DEFAULT/d' ${TECH_LEF} > ${OBJECTS_DIR}/klayout_tech.lef"/>
      <cmd name="LEF_FILES_PATTERN=&quot;&quot;"/>
      <cmd name="COUNTER=1"/>
      <cmd name="for lef_file in ${OBJECTS_DIR}/klayout_tech.lef ${SC_LEF} ${ADDITIONAL_LEFS} "/>
      <cmd name="do"/>
      <cmd name="  LEF_FILES_PATTERN+=&quot; <lef-files>${lef_file}</lef-files>&quot;"/>
      <cmd name="done"/>
      <cmd name="sed &quot;s;<lef-files>.*</lef-files>;${LEF_FILES_PATTERN};g&quot; ${KLAYOUT_TECH_FILE} > ${OBJECTS_DIR}/klayout.lyt"/>

      <cmd name="if [[ ${STREAM_SYSTEM} == *&quot;GDS&quot;* ]];"/>
      <cmd name="then"/>
      <cmd name="  STREAM_SYSTEM_EXT=gds"/>
      <cmd name="  GDSOAS_FILES=${GDS_FILES}"/>
      <cmd name="  ADDITIONAL_GDSOAS=${ADDITIONAL_GDS}"/>
      <cmd name="  SEAL_GDSOAS=${SEAL_GDS}"/>
      <cmd name="else"/>
      <cmd name="  STREAM_SYSTEM_EXT=oas"/>
      <cmd name="  GDSOAS_FILES=${OAS_FILES}"/>
      <cmd name="  ADDITIONAL_GDSOAS=${ADDITIONAL_OAS}"/>
      <cmd name="  SEAL_GDSOAS=${SEAL_OAS}"/>
      <cmd name="fi"/>
      <cmd name="export STREAM_SYSTEM_EXT"/>
      <cmd name="export GDSOAS_FILES"/>
      <cmd name="export ADDITIONAL_GDSOAS"/>
      <cmd name="export SEAL_GDSOAS"/>

      <cmd name="openroad &lt;&lt; EOT "/>
      <cmd name="proc dump_statistics {  } {"/>
      <cmd name="  set DesignArea [sta::format_area [rsz::design_area] 0]"/>
      <cmd name="  set TotPower [lindex [sta::design_power [sta::find_corner &quot;default&quot;]] 3] "/>
      <cmd name="  set design_req [get_property [lindex [all_clocks] 0] period]"/>
      <cmd name="  set design_slack [sta::worst_slack -max]"/>
      <cmd name="  set design_delay [expr {\$design_req - \$design_slack}]"/>
      <cmd name="  file delete -force ${__bash_backend_report__} "/>
      <cmd name="  set ofile_report [open ${__bash_backend_report__} w]"/>
      <cmd name="  puts \$ofile_report &quot;&lt;?xml version=\\&quot;1.0\\&quot;?&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;&lt;document&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;  &lt;application&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;    &lt;section stringID=\\&quot;BASH_SYNTHESIS_SUMMARY\\&quot;&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;      &lt;item stringID=\\&quot;BASHBACKEND_AREA\\&quot; value=\\&quot;\$DesignArea\\&quot;/&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;      &lt;item stringID=\\&quot;BASHBACKEND_POWER\\&quot; value=\\&quot;\$TotPower\\&quot;/&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;      &lt;item stringID=\\&quot;BASHBACKEND_DESIGN_DELAY\\&quot; value=\\&quot;\$design_delay\\&quot;/&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;    &lt;/section&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;  &lt;/application&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;&lt;/document&gt;&quot;"/>
      <cmd name="  close \$ofile_report"/>
      <cmd name="}; #END PROC"/>
      <cmd name="set standalone 0"/>
      <cmd name="# Synthesis"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/yosys.tcl"/>
      <cmd name="# Read process / design"/>
      <cmd name="# Read lef"/>
      <cmd name="read_lef $::env(TECH_LEF)"/>
      <cmd name="read_lef $::env(SC_LEF)"/>
      <cmd name="if {[info exist ::env(ADDITIONAL_LEFS)]} {"/>
      <cmd name="    foreach lef $::env(ADDITIONAL_LEFS) {"/>
      <cmd name="      read_lef $lef"/>
      <cmd name="    }"/>
      <cmd name="}"/>
      <cmd name="# Read liberty files"/>
      <cmd name="source $::env(SCRIPTS_DIR)/read_liberty.tcl"/>
      <cmd name="read_verilog $::env(RESULTS_DIR)/1_1_yosys.v"/>
      <cmd name="link_design $::env(DESIGN_NAME)"/>
      <cmd name="read_sdc $::env(SDC_FILE)"/>
      <cmd name="if [file exists $::env(PLATFORM_DIR)/derate.tcl] {"/>
      <cmd name="  source $::env(PLATFORM_DIR)/derate.tcl"/>
      <cmd name="}"/>
      <cmd name="if [file exists $::env(PLATFORM_DIR)/setRC.tcl] {"/>
      <cmd name="  source $::env(PLATFORM_DIR)/setRC.tcl"/>
      <cmd name="}"/>
      <cmd name="# Floorplan"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/floorplan.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/io_placement_random.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/tdms_place.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/macro_place.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/tapcell.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/pdn.tcl"/>
      <cmd name="# Place"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/global_place.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/io_placement.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/resize.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/detail_place.tcl"/>
      <cmd name="# CTS"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/cts.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/fillcell.tcl"/>
      <cmd name="# Route"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/global_route.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/detail_route.tcl"/>
      <cmd name="# Finishing"/>
      <cmd name="if {[info exists ::env(USE_FILL)]} {"/>
      <cmd name="  source -verbose $::env(SCRIPTS_DIR)/density_fill.tcl"/>
      <cmd name="}"/>
      <cmd name="# Finishing"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/final_report.tcl"/>
      <cmd name="dump_statistics"/>
      <cmd name="exit"/>
      <cmd name="EOT"/>
   </bash>
   <bash config="bash_flow">
      <cmd name=": ${OMP_NUM_THREADS:=1}"/>
      <cmd name="export OMP_NUM_THREADS"/>
      <cmd name="export SCRIPTS_DIR=${PANDA_DATA_INSTALLDIR}/scripts/"/>
      <cmd name="export UTILS_DIR=${PANDA_DATA_INSTALLDIR}/util/"/>
      <cmd name="export PLATFORM_DIR=${PANDA_DATA_INSTALLDIR}/${PLATFORM}/"/>

      <cmd name="export DESIGN_NAME=&quot;${__top_id__}&quot;"/>
      <cmd name=": ${DESIGN_NICKNAME:=${DESIGN_NAME}}"/>
      <cmd name="export DESIGN_NICKNAME"/>
      <cmd name="export SDC_FILE=${__sdc_file__}"/>
      <cmd name="export VERILOG_FILES=&quot;${__generic_sources_macro_list__}&quot;"/>
      <cmd name=": ${FLOW_VARIANT:=base}"/>
      <cmd name="export FLOW_VARIANT"/>

      <cmd name=": ${GPL_TIMING_DRIVEN:=1}"/>
      <cmd name="export GPL_TIMING_DRIVEN"/>

      <cmd name=": ${GPL_ROUTABILITY_DRIVEN:=1}"/>
      <cmd name="export GPL_ROUTABILITY_DRIVEN"/>

      <cmd name="# Setup working directories"/>
      <cmd name="export DESIGN_DIR=${CURR_WORKDIR}"/>
      <cmd name="export LOG_DIR=${CURR_WORKDIR}/OpenROAD_logs/${PLATFORM}/${DESIGN_NICKNAME}/${FLOW_VARIANT}"/>
      <cmd name="export OBJECTS_DIR=${CURR_WORKDIR}/OpenROAD_objects/${PLATFORM}/${DESIGN_NICKNAME}/${FLOW_VARIANT}"/>
      <cmd name="export REPORTS_DIR=${CURR_WORKDIR}/OpenROAD_reports/${PLATFORM}/${DESIGN_NICKNAME}/${FLOW_VARIANT}"/>
      <cmd name="export RESULTS_DIR=${CURR_WORKDIR}/OpenROAD_results/${PLATFORM}/${DESIGN_NICKNAME}/${FLOW_VARIANT}"/>

      <cmd name="# Enables hierarchical yosys"/>
      <cmd name=": {SYNTH_HIERARCHICAL:=0}"/>
      <cmd name="export SYNTH_HIERARCHICAL"/>
      <cmd name="export SYNTH_STOP_MODULE_SCRIPT=${OBJECTS_DIR}/mark_hier_stop_modules.tcl"/>
      <cmd name="if [[ $SYNTH_HIERARCHICAL -eq 1 ]]"/>
      <cmd name="then"/>
      <cmd name="  export HIER_REPORT_SCRIPT=${SCRIPTS_DIR}/synth_hier_report.tcl"/>
      <cmd name="  : ${MAX_UNGROUP_SIZE:=0}"/>
      <cmd name="  export MAX_UNGROUP_SIZE"/>
      <cmd name="fi"/>

      <cmd name="# Enables Re-synthesis for area reclaim"/>
      <cmd name=": ${RESYNTH_AREA_RECOVER:=0}"/>
      <cmd name="export RESYNTH_AREA_RECOVER"/>
      <cmd name=": ${RESYNTH_TIMING_RECOVER:=0}"/>
      <cmd name="export RESYNTH_TIMING_RECOVER"/>
      <cmd name=": ${ABC_AREA:=0}"/>
      <cmd name="export ABC_AREA"/>
      <cmd name="# Global setting for Synthesis"/>
      <cmd name=": ${SYNTH_ARGS:=-flatten}"/>
      <cmd name="export SYNTH_ARGS"/>
      <cmd name="# Global setting for Floorplan"/>
      <cmd name="export PLACE_PINS_ARGS=&quot;&quot;"/>
      <cmd name=": ${STREAM_SYSTEM:=GDS}"/>
      <cmd name="export STREAM_SYSTEM"/>

      <cmd name=": {ABC_CLOCK_PERIOD_IN_PS:=${__clk_period_ps__}}"/>
      <cmd name="export ABC_CLOCK_PERIOD_IN_PS"/>

      <cmd name="rm -rf ${LOG_DIR}"/>
      <cmd name="mkdir -p ${LOG_DIR}"/>
      <cmd name="rm -rf ${OBJECTS_DIR}"/>
      <cmd name="mkdir -p ${OBJECTS_DIR}"/>
      <cmd name="rm -rf ${REPORTS_DIR}"/>
      <cmd name="mkdir -p ${REPORTS_DIR}"/>
      <cmd name="rm -rf ${RESULTS_DIR}"/>
      <cmd name="mkdir -p ${RESULTS_DIR}"/>

      <cmd name="mkdir -p ${OBJECTS_DIR}/lib"/>
      <cmd name="DONT_USE_LIBS=&quot;&quot;"/>
      <cmd name="COUNTER=1"/>
      <cmd name="for lib in ${LIB_FILES} "/>
      <cmd name="do"/>
      <cmd name="  ${UTILS_DIR}/markDontUse.py -p &quot;${DONT_USE_CELLS}&quot; -i ${lib} -o ${OBJECTS_DIR}/lib/tobemerged${COUNTER}.lib"/>
      <cmd name="  DONT_USE_LIBS+=&quot; ${OBJECTS_DIR}/lib/tobemerged${COUNTER}.lib&quot;"/>
      <cmd name="  COUNTER=$[$COUNTER +1]"/>
      <cmd name="done"/>
      <cmd name="export DONT_USE_LIBS"/>
      <cmd name="${UTILS_DIR}/mergeLib.pl ${PLATFORM}_merged ${DONT_USE_LIBS} > ${OBJECTS_DIR}/lib/merged.lib"/>

      <cmd name=": ${DONT_USE_SC_LIB:=${OBJECTS_DIR}/lib/merged.lib}"/>
      <cmd name="export DONT_USE_SC_LIB"/>

      <cmd name=": ${WRAP_LEFS:=&quot;&quot;}"/>
      <cmd name=": ${WRAPPED_LEFS:=&quot;&quot;}"/>
      <cmd name=": ${WRAPPED_GDSOAS:=&quot;&quot;}"/>
      <cmd name="export WRAPPED_GDSOAS"/>
      <!-- <cmd name="export ADDITIONAL_LEFS+=&quot;${WRAPPED_LEFS} ${WRAP_LEFS}&quot;"/> -->
      <!-- # Pre-process KLayout tech -->
      <cmd name="sed '/OR_DEFAULT/d' ${TECH_LEF} > ${OBJECTS_DIR}/klayout_tech.lef"/>
      <cmd name="LEF_FILES_PATTERN=&quot;&quot;"/>
      <cmd name="COUNTER=1"/>
      <cmd name="for lef_file in ${OBJECTS_DIR}/klayout_tech.lef ${SC_LEF} ${ADDITIONAL_LEFS} "/>
      <cmd name="do"/>
      <cmd name="  LEF_FILES_PATTERN+=&quot; <lef-files>${lef_file}</lef-files>&quot;"/>
      <cmd name="done"/>
      <cmd name="sed &quot;s;<lef-files>.*</lef-files>;${LEF_FILES_PATTERN};g&quot; ${KLAYOUT_TECH_FILE} > ${OBJECTS_DIR}/klayout.lyt"/>

      <cmd name="if [[ ${STREAM_SYSTEM} == *&quot;GDS&quot;* ]];"/>
      <cmd name="then"/>
      <cmd name="  STREAM_SYSTEM_EXT=gds"/>
      <cmd name="  GDSOAS_FILES=${GDS_FILES}"/>
      <cmd name="  ADDITIONAL_GDSOAS=${ADDITIONAL_GDS}"/>
      <cmd name="  SEAL_GDSOAS=${SEAL_GDS}"/>
      <cmd name="else"/>
      <cmd name="  STREAM_SYSTEM_EXT=oas"/>
      <cmd name="  GDSOAS_FILES=${OAS_FILES}"/>
      <cmd name="  ADDITIONAL_GDSOAS=${ADDITIONAL_OAS}"/>
      <cmd name="  SEAL_GDSOAS=${SEAL_OAS}"/>
      <cmd name="fi"/>
      <cmd name="export STREAM_SYSTEM_EXT"/>
      <cmd name="export GDSOAS_FILES"/>
      <cmd name="export ADDITIONAL_GDSOAS"/>
      <cmd name="export SEAL_GDSOAS"/>

      <cmd name="openroad &lt;&lt; EOT "/>
      <cmd name="proc dump_statistics {  } {"/>
      <cmd name="  set DesignArea [sta::format_area [rsz::design_area] 0]"/>
      <cmd name="  set TotPower [lindex [sta::design_power [sta::find_corner &quot;default&quot;]] 3] "/>
      <cmd name="  set design_req [get_property [lindex [all_clocks] 0] period]"/>
      <cmd name="  set design_slack [sta::worst_slack -max]"/>
      <cmd name="  set design_delay [expr {\$design_req - \$design_slack}]"/>
      <cmd name="  file delete -force ${__bash_backend_report__} "/>
      <cmd name="  set ofile_report [open ${__bash_backend_report__} w]"/>
      <cmd name="  puts \$ofile_report &quot;&lt;?xml version=\\&quot;1.0\\&quot;?&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;&lt;document&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;  &lt;application&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;    &lt;section stringID=\\&quot;BASH_SYNTHESIS_SUMMARY\\&quot;&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;      &lt;item stringID=\\&quot;BASHBACKEND_AREA\\&quot; value=\\&quot;\$DesignArea\\&quot;/&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;      &lt;item stringID=\\&quot;BASHBACKEND_POWER\\&quot; value=\\&quot;\$TotPower\\&quot;/&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;      &lt;item stringID=\\&quot;BASHBACKEND_DESIGN_DELAY\\&quot; value=\\&quot;\$design_delay\\&quot;/&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;    &lt;/section&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;  &lt;/application&gt;&quot;"/>
      <cmd name="  puts \$ofile_report &quot;&lt;/document&gt;&quot;"/>
      <cmd name="  close \$ofile_report"/>
      <cmd name="}; #END PROC"/>
      <cmd name="set standalone 0"/>
      <cmd name="# Synthesis"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/yosys.tcl"/>
      <cmd name="# Read process / design"/>
      <cmd name="# Read lef"/>
      <cmd name="read_lef $::env(TECH_LEF)"/>
      <cmd name="read_lef $::env(SC_LEF)"/>
      <cmd name="if {[info exist ::env(ADDITIONAL_LEFS)]} {"/>
      <cmd name="    foreach lef $::env(ADDITIONAL_LEFS) {"/>
      <cmd name="      read_lef $lef"/>
      <cmd name="    }"/>
      <cmd name="}"/>
      <cmd name="# Read liberty files"/>
      <cmd name="source $::env(SCRIPTS_DIR)/read_liberty.tcl"/>
      <cmd name="read_verilog $::env(RESULTS_DIR)/1_1_yosys.v"/>
      <cmd name="link_design $::env(DESIGN_NAME)"/>
      <cmd name="read_sdc $::env(SDC_FILE)"/>
      <cmd name="if [file exists $::env(PLATFORM_DIR)/derate.tcl] {"/>
      <cmd name="  source $::env(PLATFORM_DIR)/derate.tcl"/>
      <cmd name="}"/>
      <cmd name="if [file exists $::env(PLATFORM_DIR)/setRC.tcl] {"/>
      <cmd name="  source $::env(PLATFORM_DIR)/setRC.tcl"/>
      <cmd name="}"/>
      <cmd name="# Floorplan"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/floorplan.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/io_placement_random.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/tdms_place.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/macro_place.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/tapcell.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/pdn.tcl"/>
      <cmd name="# Place"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/global_place.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/io_placement.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/resize.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/detail_place.tcl"/>
      <cmd name="# CTS"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/cts.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/fillcell.tcl"/>
      <cmd name="# Route"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/global_route.tcl"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/detail_route.tcl"/>
      <cmd name="# Finishing"/>
      <cmd name="if {[info exists ::env(USE_FILL)]} {"/>
      <cmd name="  source -verbose $::env(SCRIPTS_DIR)/density_fill.tcl"/>
      <cmd name="}"/>
      <cmd name="# Finishing"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/final_report.tcl"/>
      <cmd name="dump_statistics"/>
      <cmd name="source -verbose $::env(SCRIPTS_DIR)/klayout.tcl"/>
      <cmd name="exit"/>
      <cmd name="EOT"/>
   </bash>
</synthesis>