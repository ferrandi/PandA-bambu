<?xml version="1.0"?>
<technology>
  <library>
    <name>STD_FU</name>
    <cell>
      <name>ASSIGN_SINGLE_UNSIGNED_FU</name>
      <operation operation_name="ASSIGN_SINGLE" supported_types="UINT:1"/>
      <circuit>
        <component_o id="ASSIGN_SINGLE_UNSIGNED_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ASSIGN_SINGLE_UNSIGNED_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ASSIGN_SINGLE_UNSIGNED_FU" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin\n  out1 &lt;= in1;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ASSIGN_REAL_FU</name>
      <operation operation_name="ASSIGN" supported_types="REAL:*"/>
      <circuit>
        <component_o id="ASSIGN_REAL_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ASSIGN_REAL_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="REAL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="REAL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ASSIGN_REAL_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin\n  out1 &lt;= in1;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ASSIGN_UNSIGNED_FU</name>
      <operation operation_name="ASSIGN" supported_types="UINT:*"/>
      <circuit>
        <component_o id="ASSIGN_UNSIGNED_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ASSIGN_UNSIGNED_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ASSIGN_UNSIGNED_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin\n  out1 &lt;= resize(in1, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ASSIGN_VECTOR_BOOL_FU</name>
      <operation operation_name="ASSIGN" supported_types="VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ASSIGN_VECTOR_BOOL_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ASSIGN_VECTOR_BOOL_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ASSIGN_VECTOR_BOOL_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin\n  out1 &lt;= in1;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ASSIGN_SIGNED_FU</name>
      <operation operation_name="ASSIGN" supported_types="INT:*"/>
      <circuit>
        <component_o id="ASSIGN_SIGNED_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ASSIGN_SIGNED_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ASSIGN_SIGNED_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin\n  out1 &lt;= resize_signed(in1,BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ASSIGN_VEC_SIGNED_FU</name>
      <operation operation_name="ASSIGN" supported_types="VECTOR_INT:*"/>
      <circuit>
        <component_o id="ASSIGN_VEC_SIGNED_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2020-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ASSIGN_VEC_SIGNED_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_INT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ASSIGN_VEC_SIGNED_FU in1 out1" VERILOG_PROVIDED="generate\ngenvar o1;\n  for (o1=0; o1&lt;NUM_ELEM_out1; o1=o1+1)\n  begin  : vec_expr\n    assign out1[o1*BITSIZE_out1+BITSIZE_out1-1:o1*BITSIZE_out1] = in1[o1*BITSIZE_in1+BITSIZE_in1-1:o1*BITSIZE_in1];\n  end\nendgenerate" VHDL_PROVIDED="begin\nprocess(in1)
begin
   for index in 0 to NUM_ELEM_out1-1 loop
       out1((index+1)*BITSIZE_out1-1 downto index*BITSIZE_out1) &lt;= std_logic_vector(resize_signed(signed(in1((index+1)*BITSIZE_in1-1 downto index*BITSIZE_in1)), BITSIZE_out1));
   end loop;
end process;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ASSIGN_VEC_UNSIGNED_FU</name>
      <operation operation_name="ASSIGN" supported_types="VECTOR_UINT:*"/>
      <circuit>
        <component_o id="ASSIGN_VEC_UNSIGNED_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2020-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ASSIGN_VEC_UNSIGNED_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_UINT" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ASSIGN_VEC_UNSIGNED_FU in1 out1" VERILOG_PROVIDED="generate\ngenvar o1;\n  for (o1=0; o1&lt;NUM_ELEM_out1; o1=o1+1)\n  begin  : vec_expr\n    assign out1[o1*BITSIZE_out1+BITSIZE_out1-1:o1*BITSIZE_out1] = in1[o1*BITSIZE_in1+BITSIZE_in1-1:o1*BITSIZE_in1];\n  end\nendgenerate" VHDL_PROVIDED="begin\nprocess(in1)
begin
   for index in 0 to NUM_ELEM_out1-1 loop
       out1((index+1)*BITSIZE_out1-1 downto index*BITSIZE_out1) &lt;= std_logic_vector(resize(unsigned(in1((index+1)*BITSIZE_in1-1 downto index*BITSIZE_in1)), BITSIZE_out1));
   end loop;
end process;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>assert_expr_FU</name>
      <operation operation_name="assert_expr" supported_types="INT:*" />
      <circuit>
        <component_o id="assert_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="assert_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="assert_expr_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin\n  out1 &lt;= in1;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_assert_expr_FU</name>
      <operation operation_name="assert_expr" supported_types="UINT:*" />
      <circuit>
        <component_o id="ui_assert_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_assert_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_assert_expr_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin\n  out1 &lt;= in1;"/>
        </component_o>
      </circuit>
    </cell>
    <template>
      <name>cond_expr_FU</name>
      <operation operation_name="cond_expr" supported_types="INT:*" />
      <circuit>
        <component_o id="cond_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="cond_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="cond_expr_FU in1 in2 in3 out1" VERILOG_PROVIDED="assign out1 = in1 != 0 ? in2 : in3;" VHDL_PROVIDED="constant zeroes : std_logic_vector(in1&apos;range) := (others =&gt; &apos;0&apos;);\nbegin\n  out1 &lt;= resize_signed(in2, BITSIZE_out1) when (in1 /= zeroes) else resize_signed(in3, BITSIZE_out1);\n"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_cond_expr_FU</name>
      <operation operation_name="cond_expr" supported_types="UINT:*|VECTOR_BOOL:*" />
      <circuit>
        <component_o id="ui_cond_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_cond_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1" />
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1" />
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1" />
          </port_o>
          <NP_functionality LIBRARY="ui_cond_expr_FU in1 in2 in3 out1" VERILOG_PROVIDED="assign out1 = in1 != 0 ? in2 : in3;" VHDL_PROVIDED="constant zeroes : std_logic_vector(in1&apos;range) := (others =&gt; &apos;0&apos;);\nbegin\n  out1 &lt;= resize(in2, BITSIZE_out1) when (in1 /= zeroes) else resize(in3, BITSIZE_out1);\n"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>trunc_mod_expr_FU</name>
      <characterizing_constant_value>21845</characterizing_constant_value>
      <operation operation_name="trunc_mod_expr" supported_types="INT:*" pipe_parameters="1:0|8:0,1,2,3,7|16:0,1,2,3,5,7,16|32:0,1,3,7,15,31|64:0,1,3,7,15,31,63"/>
      <circuit>
        <component_o id="trunc_mod_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="trunc_mod_expr_FU"/>
          <parameter name="PIPE_PARAMETER">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="trunc_mod_expr_FU in1 in2 out1 PIPE_PARAMETER" VERILOG_PROVIDED=
"parameter required_iterations = BITSIZE_in1 &gt; PIPE_PARAMETER ? BITSIZE_in1 : PIPE_PARAMETER;
parameter STEPS = ((required_iterations)/(PIPE_PARAMETER+1)) + (((required_iterations)%(PIPE_PARAMETER+1)) ? 1 : 0);
parameter num_length = STEPS * (PIPE_PARAMETER+1);
parameter denom_length = BITSIZE_in2+1;
parameter temp_length = num_length+denom_length;
parameter PIPE_PARAMETER_T = PIPE_PARAMETER &gt; temp_length-denom_length ? temp_length-denom_length : PIPE_PARAMETER;
parameter quot_length = temp_length - denom_length + 1;
parameter xquot_length = quot_length &lt; BITSIZE_out1 ? quot_length : BITSIZE_out1;

wire [BITSIZE_in1-1:0] xnum;
wire [BITSIZE_in2-1:0] xdenom;

function [BITSIZE_out1-1:0] UMOD;
  input [BITSIZE_in1-1:0] fxnum;
  input [BITSIZE_in2-1:0] fxdenom;
  reg [quot_length-1:0] quot;
  integer column, j;
  reg term;
  reg [temp_length-1:0] temp;
  reg signed [denom_length:0] sum;
begin
  temp = {temp_length{1&apos;b0}};
  temp[num_length-1:0] = fxnum;
  sum = {denom_length+1{1&apos;b0}};

  quot = {quot_length{1&apos;b0}};
  for(j = temp_length-denom_length; j &gt;= 0; j = j - 1)
  begin
    sum = $signed({1&apos;b0, temp[j +: denom_length]})-$signed({2&apos;b00, fxdenom});
    quot[j] = ~sum[denom_length];
    for(column = 0; column &lt; denom_length; column = column + 1)
    begin
      term = ((quot[j] &amp; sum[column])) | ((~quot[j] &amp; temp[column+j]));
      temp[column+j] = term;
    end
  end
  UMOD = {BITSIZE_out1{1&apos;b0}};
  UMOD[xquot_length-1:0] = temp[xquot_length-1:0];
end
endfunction

generate
  if(PIPE_PARAMETER_T&gt;0)
  begin
    reg signed [BITSIZE_out1-1:0] frem;
    reg [temp_length-1:0] temp[PIPE_PARAMETER_T-1:0];
    reg [BITSIZE_in2-1:0] xdenom_arr[PIPE_PARAMETER_T-1:0];
    reg [quot_length-1:0] quot[PIPE_PARAMETER_T-1:0];
    reg in1_sign[PIPE_PARAMETER_T-1:0];
 
    always @(temp[0] or quot[0] or in1_sign[0] or xdenom_arr[0])
    begin : last_block
      reg [temp_length-1:0] t_temp;
      reg signed [denom_length:0] sum;
      reg [quot_length-1:0] t_quot;
      integer j, st;
      // let&apos;s start computing the output
      t_temp = temp[0];
      t_quot = quot[0];
      sum = {denom_length+1{1&apos;b0}};
      j=0;
      for(st = STEPS-1; st &gt;=0 ; st = st - 1)
      begin
        sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom_arr[0]});
        t_quot[st+j] = ~sum[denom_length];
        t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
      end
      frem = in1_sign[0] ? -t_temp : t_temp;
    end
    always @(posedge clock)
    begin : intermediate_block
      reg [temp_length-1:0] t_temp;
      reg signed [denom_length:0] sum;
      reg [quot_length-1:0] t_quot;
      integer j, st, pp;
      /// intermediate steps
      for(pp = 1; pp &lt; PIPE_PARAMETER_T; pp = pp + 1)
      begin
        t_temp = temp[pp];
        t_quot = quot[pp];
        sum = {denom_length+1{1&apos;b0}};
        j=pp*STEPS;
        for(st = STEPS-1; st &gt;=0 ; st = st - 1)
        begin
          sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom_arr[pp]});
          t_quot[st+j] = ~sum[denom_length];
          t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
        end
        quot[pp-1] &lt;= t_quot;
        temp[pp-1] &lt;= t_temp;
        xdenom_arr[pp-1] &lt;= xdenom_arr[pp]; 
        in1_sign[pp-1] &lt;= in1_sign[pp]; 
      end

      /// first stage initialization
      t_temp = {temp_length{1&apos;b0}};
      t_temp[num_length-1:0] = xnum;
      t_quot = {quot_length{1&apos;b0}};
      sum = {denom_length+1{1&apos;b0}};
      j=-STEPS+((PIPE_PARAMETER_T+1)*STEPS);
      for(st=STEPS+(temp_length-denom_length-((PIPE_PARAMETER_T+1)*STEPS)); st &gt;=0 ; st = st - 1)
      begin
        sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom});
        t_quot[st+j] = ~sum[denom_length];
        t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
      end
      quot[PIPE_PARAMETER_T-1] &lt;= t_quot;
      temp[PIPE_PARAMETER_T-1] &lt;= t_temp;
      xdenom_arr[PIPE_PARAMETER_T-1] &lt;= xdenom;
      in1_sign[PIPE_PARAMETER_T-1] &lt;= in1[BITSIZE_in1-1];
    end
    assign out1 = frem;
  end
  else
  begin
    wire signed [BITSIZE_out1-1:0] frem;
    assign frem = UMOD(xnum, xdenom);
    assign out1 = in1[BITSIZE_in1-1] ? -frem : frem;
  end
endgenerate

assign xnum = in1 &gt;= $signed({BITSIZE_in1{1&apos;b0}}) ? in1 : -in1;
assign xdenom = in2 &gt;= $signed({BITSIZE_in2{1&apos;b0}}) ? in2 : -in2;
"
VHDL_PROVIDED=
"function integer_ternary_operator(cond : boolean; op1 : integer; op2 : integer) return integer is
  begin
    if cond then
      return op1;
    else
      return op2;
    end if;
    end integer_ternary_operator;
  constant required_iterations : integer := integer_ternary_operator(BITSIZE_in1 &gt; PIPE_PARAMETER, BITSIZE_in1, PIPE_PARAMETER);
  constant STEPS            : integer := (required_iterations/(PIPE_PARAMETER+1)) + integer_ternary_operator(((required_iterations)mod(PIPE_PARAMETER+1) /= 0), 1, 0);
  constant num_length       : integer := STEPS * (PIPE_PARAMETER+1);
  constant denom_length     : integer := BITSIZE_in2+1;
  constant temp_length      : integer := num_length+denom_length;
  constant PIPE_PARAMETER_T : integer := integer_ternary_operator(PIPE_PARAMETER &gt; temp_length-denom_length, temp_length-denom_length, PIPE_PARAMETER);
  constant quot_length      : integer := temp_length - denom_length + 1;
  constant xquot_length     : integer := integer_ternary_operator(quot_length &lt; BITSIZE_out1, quot_length, BITSIZE_out1);

  signal xnum   : std_logic_vector(BITSIZE_in1-1 downto 0);
  signal xdenom : std_logic_vector(BITSIZE_in2-1 downto 0);

  function UMOD(xnum, xdenom : std_logic_vector) return signed is
  variable quot : std_logic_vector(quot_length-1 downto 0);
  variable column : integer;
  variable j : integer;
  variable term : std_logic;
  variable temp : std_logic_vector(temp_length-1 downto 0);
  variable sum  : signed(denom_length downto 0);
  variable ret_UMOD : signed(BITSIZE_out1-1 downto 0);
  begin
    temp := (others =&gt; &apos;0&apos;);
    temp(num_length-1 downto 0) := xnum;
    sum := (others =&gt; &apos;0&apos;);

    quot := (others =&gt; &apos;0&apos;);
    for j in temp_length-denom_length downto 0 loop
      sum := signed(resize(unsigned(temp(j + denom_length - 1 downto j)), denom_length+1)) - signed(resize(unsigned(xdenom), denom_length+1));
      quot(j) := not sum(denom_length);
      for column in 0 to denom_length-1 loop
        term := (quot(j) and sum(column)) or ((not quot(j) and temp(column+j)));
        temp(column+j) := term;
      end loop;
    end loop;
    ret_UMOD := (others =&gt; &apos;0&apos;);
    ret_UMOD(xquot_length-1 downto 0) := signed(temp(xquot_length-1 downto 0));
    return ret_UMOD;
  end function;
  begin

  cond: if(PIPE_PARAMETER &gt; 0) generate
    signal frem : signed(BITSIZE_out1-1 downto 0);
    type temp_type is array (PIPE_PARAMETER_T-1 downto 0) of std_logic_vector(temp_length-1 downto 0);
    signal temp : temp_type;
    type xdenom_arr_type is array (PIPE_PARAMETER_T-1 downto 0) of std_logic_vector(BITSIZE_in2-1 downto 0);
    signal xdenom_arr : xdenom_arr_type;
    type quot_type is array (PIPE_PARAMETER_T-1 downto 0) of std_logic_vector(quot_length-1 downto 0);
    signal quot : quot_type;
    type in1_sign_type is array (PIPE_PARAMETER_T-1 downto 0) of std_logic;
    signal in1_sign : in1_sign_type;


  begin
    last_block : process(temp(0), quot(0), in1_sign(0), xdenom_arr(0))
      variable t_temp : std_logic_vector(temp_length-1 downto 0);
      variable sum : signed(denom_length downto 0);
      variable t_quot : std_logic_vector(quot_length-1 downto 0);
      variable j : integer;
    begin

      t_temp := temp(0);
      t_quot := quot(0);
      sum := (others =&gt; &apos;0&apos;);
      j := 0;
      for st in STEPS-1 downto 0 loop
        sum := signed(resize(unsigned(t_temp(j + st + denom_length -1 downto j + st)), denom_length+1)) - signed(resize(unsigned(xdenom_arr(0)), denom_length+1));
        t_quot(st+j) := not sum(denom_length);
        if(t_quot(st+j) /= &apos;0&apos;) then
          t_temp(st+j+denom_length-1 downto + st+j) := std_logic_vector(sum(denom_length-1 downto 0));
        else
          t_temp(st+j+denom_length-1 downto + st+j) := t_temp(st+j+denom_length-1 downto st+j);
        end if;
      end loop;
      if(in1_sign(0) /= &apos;0&apos;) then
        frem &lt;= resize(-signed(t_temp), BITSIZE_out1);
      else
        frem &lt;= resize(signed(t_temp), BITSIZE_out1);
      end if;
    end process;
    intermediate_block : process(clock)
      variable t_temp : std_logic_vector(temp_length-1 downto 0);
      variable sum : signed(denom_length downto 0);
      variable t_quot : std_logic_vector(quot_length-1 downto 0);
      variable j : integer;
    begin
      if(clock&apos;event and clock = &apos;1&apos;) then
         for pp in 1 to PIPE_PARAMETER_T-1 loop
           t_temp := temp(pp);
           t_quot := quot(pp);
           sum := (others =&gt; &apos;0&apos;);
           j := pp*STEPS;
           for st in STEPS-1 downto 0 loop
             sum := signed(resize(unsigned(t_temp(j+st + denom_length - 1 downto j+st)), denom_length+1)) - signed(resize(unsigned(xdenom_arr(pp)), denom_length+1));
             t_quot(st+j) := not sum(denom_length);
             if(t_quot(st+j) /= &apos;0&apos;) then
               t_temp(st+j+denom_length-1 downto st+j) := std_logic_vector(sum(denom_length-1 downto 0));
             else
               t_temp(st+j+denom_length-1 downto st+j) := t_temp(st+j+denom_length-1 downto st+j);
             end if;
           end loop;
           quot(pp-1) &lt;= t_quot;
           temp(pp-1) &lt;= t_temp;
           xdenom_arr(pp-1) &lt;= xdenom_arr(pp);
           in1_sign(pp-1) &lt;= in1_sign(pp);
         end loop;
         --- first stage initialization
         t_temp := (others =&gt; &apos;0&apos;);
         t_temp(num_length-1 downto 0) := std_logic_vector(resize(unsigned(xnum), num_length));
         t_quot := (others =&gt; &apos;0&apos;);
         sum := (others =&gt; &apos;0&apos;);
         j := - STEPS + ((PIPE_PARAMETER_T+1)*STEPS);
         for st in STEPS+(temp_length-denom_length-((PIPE_PARAMETER_T+1)*STEPS)) downto 0 loop
           sum := signed(resize(unsigned(t_temp(j+st+denom_length-1 downto j+st)), denom_length+1)) - signed(resize(unsigned(xdenom), denom_length+1));
           t_quot(st+j) := not sum(denom_length);
           if(t_quot(st+j) /= &apos;0&apos;) then
              t_temp(st+j+denom_length-1 downto st+j) := std_logic_vector(sum(denom_length-1 downto 0));
           else
              t_temp(st+j+denom_length-1 downto st+j) := t_temp(st+j+denom_length-1 downto st+j);
           end if;
         end loop;
         quot(PIPE_PARAMETER_T-1) &lt;= t_quot;
         temp(PIPE_PARAMETER_T-1) &lt;= t_temp;
         xdenom_arr(PIPE_PARAMETER_T-1) &lt;= xdenom;
         in1_sign(PIPE_PARAMETER_T-1) &lt;= in1(BITSIZE_in1-1);
      end if;
    end process;
    out1 &lt;= frem;
  end generate cond;
  cond2: if(PIPE_PARAMETER = 0) generate
    signal frem : signed(BITSIZE_out1-1 downto 0);
  begin
    frem &lt;= UMOD(xnum, xdenom);
    out1 &lt;= -frem when (in1(BITSIZE_in1-1) /= &apos;0&apos;) else frem;
  end generate cond2;

  xnum &lt;= std_logic_vector(in1) when (in1 &gt;= 0) else std_logic_vector(-in1);
  xdenom &lt;= std_logic_vector(in2) when (in2 &gt;= 0) else std_logic_vector(-in2);
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_trunc_mod_expr_FU</name>
      <characterizing_constant_value>21845</characterizing_constant_value>
      <operation operation_name="trunc_mod_expr" supported_types="UINT:*|VECTOR_BOOL:*" pipe_parameters="1:0|8:0,1,2,3,7|16:0,1,2,3,5,7,16|32:0,1,3,7,15,31|64:0,1,3,7,15,31,63"/>
      <circuit>
        <component_o id="ui_trunc_mod_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_trunc_mod_expr_FU"/>
          <parameter name="PIPE_PARAMETER">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_trunc_mod_expr_FU in1 in2 out1 PIPE_PARAMETER" VERILOG_PROVIDED=
"parameter required_iterations = BITSIZE_in1 &gt; PIPE_PARAMETER ? BITSIZE_in1 : PIPE_PARAMETER;
parameter STEPS = ((required_iterations)/(PIPE_PARAMETER+1)) + (((required_iterations)%(PIPE_PARAMETER+1)) ? 1 : 0);
parameter num_length = STEPS * (PIPE_PARAMETER+1);
parameter denom_length = BITSIZE_in2+1;
parameter temp_length = num_length+denom_length;
parameter PIPE_PARAMETER_T = PIPE_PARAMETER &gt; temp_length-denom_length ? temp_length-denom_length : PIPE_PARAMETER;
parameter quot_length = temp_length - denom_length + 1;
parameter xquot_length = quot_length &lt; BITSIZE_out1 ? quot_length : BITSIZE_out1;

wire [BITSIZE_in1-1:0] xnum;
wire [BITSIZE_in2-1:0] xdenom;
 
function [BITSIZE_out1-1:0] UMOD;
  input [BITSIZE_in1-1:0] fxnum;
  input [BITSIZE_in2-1:0] fxdenom;
  reg [quot_length-1:0] quot;
  integer column, j;
  reg term;
  reg [temp_length-1:0] temp;
  reg signed [denom_length:0] sum;
begin
  temp = {temp_length{1&apos;b0}};
  temp[num_length-1:0] = fxnum;
  sum = {denom_length+1{1&apos;b0}};

  quot = {quot_length{1&apos;b0}};
  for(j = temp_length-denom_length; j &gt;= 0; j = j - 1)
  begin
    sum = $signed({1&apos;b0, temp[j +: denom_length]})-$signed({2&apos;b00, fxdenom});
    quot[j] = ~sum[denom_length];
    for(column = 0; column &lt; denom_length; column = column + 1)
    begin
      term = ((quot[j] &amp; sum[column])) | ((~quot[j] &amp; temp[column+j]));
      temp[column+j] = term;
    end
  end
  UMOD = {BITSIZE_out1{1&apos;b0}};
  UMOD[xquot_length-1:0] = temp[xquot_length-1:0];
end
endfunction

generate
  if(PIPE_PARAMETER_T&gt;0)
  begin
    reg [BITSIZE_out1-1:0] frem;
    reg [temp_length-1:0] temp[PIPE_PARAMETER_T-1:0];
    reg [BITSIZE_in2-1:0] xdenom_arr[PIPE_PARAMETER_T-1:0];
    reg [quot_length-1:0] quot[PIPE_PARAMETER_T-1:0];

    always @(temp[0] or quot[0] or xdenom_arr[0])
    begin : last_block
      reg [temp_length-1:0] t_temp;
      reg signed [denom_length:0] sum;
      reg [quot_length-1:0] t_quot;
      integer j, st;
 
      // let&apos;s start computing the output
      t_temp = temp[0];
      t_quot = quot[0];
      sum = {denom_length+1{1&apos;b0}};
      j=0;
      for(st = STEPS-1; st &gt;=0 ; st = st - 1)
      begin
        sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom_arr[0]});
        t_quot[st+j] = ~sum[denom_length];
        t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
      end
      frem = t_temp;
    end
    always @(posedge clock)
    begin : intermediate_block
      reg [temp_length-1:0] t_temp;
      reg signed [denom_length:0] sum;
      reg [quot_length-1:0] t_quot;
      integer j, st, pp;
      /// intermediate steps
      for(pp = 1; pp &lt; PIPE_PARAMETER_T; pp = pp + 1)
      begin
        t_temp = temp[pp];
        t_quot = quot[pp];
        sum = {denom_length+1{1&apos;b0}};
        j=pp*STEPS;
        for(st = STEPS-1; st &gt;=0 ; st = st - 1)
        begin
          sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom_arr[pp]});
          t_quot[st+j] = ~sum[denom_length];
          t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
        end
        quot[pp-1] &lt;= t_quot;
        temp[pp-1] &lt;= t_temp;
        xdenom_arr[pp-1] &lt;= xdenom_arr[pp]; 
      end

      /// first stage initialization
      t_temp = {temp_length{1&apos;b0}};
      t_temp[num_length-1:0] = xnum;
      t_quot = {quot_length{1&apos;b0}};
      sum = {denom_length+1{1&apos;b0}};
      j=-STEPS+((PIPE_PARAMETER_T+1)*STEPS);
      for(st=STEPS+(temp_length-denom_length-((PIPE_PARAMETER_T+1)*STEPS)); st &gt;=0 ; st = st - 1)
      begin
        sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom});
        t_quot[st+j] = ~sum[denom_length];
        t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
      end
      quot[PIPE_PARAMETER_T-1] &lt;= t_quot;
      temp[PIPE_PARAMETER_T-1] &lt;= t_temp;
      xdenom_arr[PIPE_PARAMETER_T-1] &lt;= xdenom;
    end
    assign out1 = frem;
  end
  else
  begin
    wire [BITSIZE_out1-1:0] frem;
    assign frem = UMOD(xnum, xdenom);
    assign out1 = frem;
  end
endgenerate

assign xnum = in1;
assign xdenom = in2;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ge_expr_FU</name>
      <operation operation_name="ge_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="ge_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ge_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ge_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &gt;= in2;" VHDL_PROVIDED="begin\nout1(0) &lt;= &apos;1&apos; when (signed(in1) &gt;= signed(in2)) else &apos;0&apos;;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_ge_expr_FU</name>
      <operation operation_name="ge_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_ge_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_ge_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_ge_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &gt;= in2;" VHDL_PROVIDED="begin\nout1(0) &lt;= &apos;1&apos; when (unsigned(in1) &gt;= unsigned(in2)) else &apos;0&apos;;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>max_expr_FU</name>
      <operation operation_name="max_expr" supported_types="INT:*" commutative="1"/>
      <circuit>
        <component_o id="max_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="max_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="max_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &gt; in2 ? in1 : in2;" VHDL_PROVIDED="begin\n  out1 &lt;= resize_signed(in1, BITSIZE_out1) when (in1 &gt;= in2) else resize_signed(in2, BITSIZE_out1);\n"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_max_expr_FU</name>
      <operation operation_name="max_expr" supported_types="UINT:*|VECTOR_BOOL:*" commutative="1"/>
      <circuit>
        <component_o id="ui_max_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_max_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_max_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &gt; in2 ? in1 : in2;" VHDL_PROVIDED="begin\n  out1 &lt;= resize(in1, BITSIZE_out1) when (in1 &gt;= in2) else resize(in2, BITSIZE_out1);\n"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>min_expr_FU</name>
      <operation operation_name="min_expr" supported_types="INT:*" commutative="1"/>
      <circuit>
        <component_o id="min_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="min_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="min_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &lt; in2 ? in1 : in2;" VHDL_PROVIDED="begin\n  out1 &lt;= resize_signed(in1, BITSIZE_out1) when (in1 &lt;= in2) else resize_signed(in2, BITSIZE_out1);\n"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_min_expr_FU</name>
      <operation operation_name="min_expr" supported_types="UINT:*|VECTOR_BOOL:*" commutative="1"/>
      <circuit>
        <component_o id="ui_min_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_min_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_min_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &lt; in2 ? in1 : in2;" VHDL_PROVIDED="begin\n  out1 &lt;= resize(in1, BITSIZE_out1) when (in1 &lt; in2) else resize(in2, BITSIZE_out1);\n"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>bit_xor_expr_FU</name>
      <operation operation_name="bit_xor_expr" supported_types="INT:*" commutative="1"/>
      <circuit>
        <component_o id="bit_xor_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="bit_xor_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="bit_xor_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 ^ in2;" VHDL_PROVIDED="begin\nout1 &lt;= resize_signed(in1, BITSIZE_out1) xor resize_signed(in2, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_bit_xor_expr_FU</name>
      <operation operation_name="bit_xor_expr" supported_types="UINT:*|VECTOR_BOOL:*" commutative="1"/>
      <circuit>
        <component_o id="ui_bit_xor_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_bit_xor_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_bit_xor_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 ^ in2;" VHDL_PROVIDED="begin\nout1 &lt;= resize(in1, BITSIZE_out1) xor resize(in2, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>truth_andif_expr_FU</name>
      <operation operation_name="truth_andif_expr" commutative="1"/>
      <circuit>
        <component_o id="truth_andif_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="truth_andif_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="truth_andif_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = (in1 != {BITSIZE_in1{1&apos;b0}}) &amp;&amp; (in2 != {BITSIZE_in2{1&apos;b0}});" VHDL_PROVIDED="begin\nout1 &lt;= in1 and in2;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>lshift_expr_FU</name>
      <characterizing_constant_value>1</characterizing_constant_value>
      <operation operation_name="lshift_expr" supported_types="INT:*" />
      <circuit>
        <component_o id="lshift_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="lshift_expr_FU"/>
          <parameter name="PRECISION">1</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="lshift_expr_FU in1 in2 out1 PRECISION" VERILOG_PROVIDED=
"`ifndef _SIM_HAVE_CLOG2
  function integer log2;
     input integer value;
     integer temp_value;
    begin
      temp_value = value-1;
      for (log2=0; temp_value&gt;0; log2=log2+1)
        temp_value = temp_value&gt;&gt;1;
    end
  endfunction
`endif
`ifdef _SIM_HAVE_CLOG2
  parameter arg2_bitsize = $clog2(PRECISION);
`else
  parameter arg2_bitsize = log2(PRECISION);
`endif
generate
  if(BITSIZE_in2 &gt; arg2_bitsize)
    assign out1 = in1 &lt;&lt;&lt; in2[arg2_bitsize-1:0];
  else
    assign out1 = in1 &lt;&lt;&lt; in2;
endgenerate"
VHDL_PROVIDED=
"begin
  process(in1, in2)
  begin
    out1 &lt;= shift_left(resize_signed(in1, BITSIZE_out1), to_integer(unsigned(in2) rem PRECISION));
  end process;
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_lshift_expr_FU</name>
      <characterizing_constant_value>1</characterizing_constant_value>
      <operation operation_name="lshift_expr" supported_types="UINT:*|VECTOR_BOOL:*" />
      <circuit>
        <component_o id="ui_lshift_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_lshift_expr_FU"/>
          <parameter name="PRECISION">1</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_lshift_expr_FU in1 in2 out1 PRECISION" VERILOG_PROVIDED=
"`ifndef _SIM_HAVE_CLOG2
  function integer log2;
     input integer value;
     integer temp_value;
    begin
      temp_value = value-1;
      for (log2=0; temp_value&gt;0; log2=log2+1)
        temp_value = temp_value&gt;&gt;1;
    end
  endfunction
`endif
`ifdef _SIM_HAVE_CLOG2
  parameter arg2_bitsize = $clog2(PRECISION);
`else
  parameter arg2_bitsize = log2(PRECISION);
`endif
generate
  if(BITSIZE_in2 &gt; arg2_bitsize)
    assign out1 = in1 &lt;&lt; in2[arg2_bitsize-1:0];
  else
    assign out1 = in1 &lt;&lt; in2;
endgenerate"
VHDL_PROVIDED=
"begin
  process(in1, in2)
  begin
    out1 &lt;= shift_left(resize(in1, BITSIZE_out1), to_integer(unsigned(in2) rem PRECISION));
  end process;
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>lt_expr_FU</name>
      <operation operation_name="lt_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="lt_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="lt_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="lt_expr_FU in1 in2 out1" VERILOG_PROVIDED=
"assign out1 = in1 &lt; in2;
" VHDL_PROVIDED=
"begin
  process(in1, in2)
     begin
    out1 &lt;= (others =&gt; &apos;0&apos;);
     if (signed(in1) &lt; signed(in2)) then
      out1(0) &lt;= &apos;1&apos;;
    else
      out1(0) &lt;= &apos;0&apos;;
    end if;
end process
;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_lt_expr_FU</name>
      <operation operation_name="lt_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_lt_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_lt_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_lt_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &lt; in2;" VHDL_PROVIDED=
"begin
out1 &lt;= std_logic_vector(resize(to_unsigned(1, BITSIZE_out1), BITSIZE_out1)) when (unsigned(in1) &lt; unsigned(in2)) else (others =&gt; &apos;0&apos;);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_lrotate_expr_FU</name>
      <characterizing_constant_value>1</characterizing_constant_value>
      <operation operation_name="lrotate_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_lrotate_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_lrotate_expr_FU"/>
          <parameter name="PRECISION">1</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_lrotate_expr_FU in1 in2 out1 PRECISION" VERILOG_PROVIDED=
"`ifndef _SIM_HAVE_CLOG2
  function integer log2;
     input integer value;
     integer temp_value;
    begin
      temp_value = value-1;
      for (log2=0; temp_value&gt;0; log2=log2+1)
        temp_value = temp_value&gt;&gt;1;
    end
  endfunction
`endif
`ifdef _SIM_HAVE_CLOG2
  parameter arg2_bitsize = $clog2(PRECISION);
`else
  parameter arg2_bitsize = log2(PRECISION);
`endif
parameter marg2_bitsize = arg2_bitsize &lt; BITSIZE_in2 ? arg2_bitsize : BITSIZE_in2;
assign out1 = (in1 &lt;&lt; (in2[marg2_bitsize-1:0]))|(in1 &gt;&gt; (PRECISION-(in2[marg2_bitsize-1:0])));" VHDL_PROVIDED=
"begin
  out1 &lt;= resize(rotate_left(resize(in1,PRECISION), to_integer(unsigned(in2))), BITSIZE_out1);
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_fshl_expr_FU</name>
      <characterizing_constant_value>1</characterizing_constant_value>
      <operation operation_name="fshl_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_fshl_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2021-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_fshl_expr_FU"/>
          <parameter name="PRECISION">1</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_fshl_expr_FU in1 in2 in3 out1 PRECISION" VERILOG_PROVIDED=
"`ifndef _SIM_HAVE_CLOG2
  function integer log2;
     input integer value;
     integer temp_value;
    begin
      temp_value = value-1;
      for (log2=0; temp_value&gt;0; log2=log2+1)
        temp_value = temp_value&gt;&gt;1;
    end
  endfunction
`endif
`ifdef _SIM_HAVE_CLOG2
  parameter arg_bitsize = $clog2(PRECISION);
`else
  parameter arg_bitsize = log2(PRECISION);
`endif
parameter marg_bitsize = arg_bitsize &lt; BITSIZE_in3 ? arg_bitsize : BITSIZE_in3;
assign out1 = (in1 &lt;&lt; (in3[marg_bitsize-1:0]))|(in2 &gt;&gt; (PRECISION-(in3[marg_bitsize-1:0])));" VHDL_PROVIDED=
"begin
  out1 &lt;= resize(shift_left(resize(in1, BITSIZE_out1), to_integer(unsigned(in3) rem PRECISION)), BITSIZE_out1) or resize(shift_right(in2, PRECISION - to_integer(unsigned(in3) rem PRECISION)), BITSIZE_out1);
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_fshr_expr_FU</name>
      <characterizing_constant_value>1</characterizing_constant_value>
      <operation operation_name="fshr_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_fshr_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2021-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_fshr_expr_FU"/>
          <parameter name="PRECISION">1</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_fshr_expr_FU in1 in2 in3 out1 PRECISION" VERILOG_PROVIDED=
"`ifndef _SIM_HAVE_CLOG2
  function integer log2;
     input integer value;
     integer temp_value;
    begin
      temp_value = value-1;
      for (log2=0; temp_value&gt;0; log2=log2+1)
        temp_value = temp_value&gt;&gt;1;
    end
  endfunction
`endif
`ifdef _SIM_HAVE_CLOG2
  parameter arg_bitsize = $clog2(PRECISION);
`else
  parameter arg_bitsize = log2(PRECISION);
`endif
parameter marg_bitsize = arg_bitsize &lt; BITSIZE_in3 ? arg_bitsize : BITSIZE_in3;
assign out1 = (in1 &lt;&lt; (PRECISION-(in3[marg_bitsize-1:0])))|(in2 &gt;&gt; (in3[marg_bitsize-1:0]));" VHDL_PROVIDED=
"begin
  out1 &lt;= resize(shift_left(resize(in1, BITSIZE_out1), PRECISION - to_integer(unsigned(in3) rem PRECISION)), BITSIZE_out1) or resize(shift_right(in2, to_integer(unsigned(in3) rem PRECISION)), BITSIZE_out1);
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>widen_mult_expr_FU</name>
      <no_constant_characterization></no_constant_characterization>
      <operation operation_name="widen_mult_expr" supported_types="INT:*" pipe_parameters="1:0|8:0,1,2|16:0,1,2|32:0,1,2,3,4,5,6,7|64:0,1,2,3,4,5,6,7|DSPs_y_sizes:0,1,2,3,4,5,6,7" commutative="1"/>
      <circuit>
        <component_o id="widen_mult_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="widen_mult_expr_FU"/>
          <parameter name="PIPE_PARAMETER">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT" is_doubled="1">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="widen_mult_expr_FU in1 in2 out1 PIPE_PARAMETER" IP_COMPONENT="mult_expr_FU" VERILOG_PROVIDED="mult_expr_FU #(.BITSIZE_in1(BITSIZE_in1), .BITSIZE_in2(BITSIZE_in2), .BITSIZE_out1(BITSIZE_out1), .PIPE_PARAMETER(PIPE_PARAMETER)) m1 (.out1(out1), .clock(clock), .in1(in1), .in2(in2));" VHDL_PROVIDED=
"begin
  m1 : mult_expr_FU generic map(BITSIZE_in1 =&gt; BITSIZE_in1, BITSIZE_in2 =&gt; BITSIZE_in2, BITSIZE_out1 =&gt; BITSIZE_out1, PIPE_PARAMETER =&gt; PIPE_PARAMETER) port map (out1 =&gt; out1, clock =&gt; clock, in1 =&gt; in1, in2 =&gt; in2);"
          />
        </component_o>
      </circuit>
    </template>
    <template>
      <name>mult_expr_FU</name>
      <no_constant_characterization></no_constant_characterization>
      <operation operation_name="mult_expr" supported_types="INT:*" pipe_parameters="1:0|8:0,1,2|16:0,1,2|32:0,1,2,3,4,5,6,7|64:0,1,2,3,4,5,6,7|DSPs_y_sizes:0,1,2,3,4,5,6,7" commutative="1"/>
      <circuit>
        <component_o id="mult_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="mult_expr_FU"/>
          <parameter name="PIPE_PARAMETER">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="mult_expr_FU in1 in2 out1 PIPE_PARAMETER" VERILOG_PROVIDED=
"generate
  if(PIPE_PARAMETER==1)
  begin
    reg signed [BITSIZE_out1-1:0] out1_reg;
    assign out1 = out1_reg;
    always @(posedge clock)
    begin
      out1_reg &lt;= in1 * in2;
    end
  end
  else if(PIPE_PARAMETER&gt;1)
  begin
    reg signed [BITSIZE_in1-1:0] in1_in;
    reg signed [BITSIZE_in2-1:0] in2_in;
    wire signed [BITSIZE_out1-1:0] mult_res;
    reg signed [BITSIZE_out1-1:0] mul [PIPE_PARAMETER-2:0];
    integer i;
    assign mult_res = in1_in * in2_in;
    always @(posedge clock)
    begin
      in1_in &lt;= in1;
      in2_in &lt;= in2;
      mul[PIPE_PARAMETER-2] &lt;= mult_res;
      for (i=0; i&lt;PIPE_PARAMETER-2; i=i+1)
        mul[i] &lt;= mul[i+1];
    end
    assign out1 = mul[0];
  end
  else
  begin
    assign out1 = in1 * in2;
  end
  endgenerate
" VHDL_PROVIDED=
"  signal in1_int : signed (BITSIZE_in1-1 downto 0);
  signal in2_int : signed (BITSIZE_in2-1 downto 0);
begin
  cond: if(PIPE_PARAMETER=0) generate
    out1 &lt;= signed(resize_signed(in1 * in2, BITSIZE_out1));
  end generate cond;
  cond1 : if(PIPE_PARAMETER=1) generate
    out1 &lt;= resize_signed(in1_int * in2_int, BITSIZE_out1);
    process(clock)
    begin
      if clock'event and clock = '1' then
        in1_int &lt;= resize(in1, BITSIZE_in1);
        in2_int &lt;= resize(in2, BITSIZE_in2);
      end if;
    end process;
  end generate cond1;
  cond2 : if(PIPE_PARAMETER &gt;1) generate
    type levels_of_registers is array (PIPE_PARAMETER-2 downto 0) of signed(BITSIZE_out1-1 downto 0);
    signal out1_int : levels_of_registers;
  begin
    process(clock)
    begin
      if clock'event and clock = '1' then
        in1_int &lt;= in1;
        in2_int &lt;= in2;
        out1_int(PIPE_PARAMETER-2) &lt;= signed(resize_signed(signed(in1_int * in2_int), BITSIZE_out1));
        for i in 0 to PIPE_PARAMETER-3 loop
          out1_int (i) &lt;= out1_int (i+1);
        end loop;
      end if;
    end process;
    out1 &lt;= out1_int (0);
  end generate cond2;
"
/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_widen_mult_expr_FU</name>
      <no_constant_characterization></no_constant_characterization>
      <operation operation_name="widen_mult_expr" supported_types="UINT:*|VECTOR_BOOL:*" pipe_parameters="1:0|8:0,1,2|16:0,1,2|32:0,1,2,3,4,5,6,7|64:0,1,2,3,4,5,6,7|DSPs_y_sizes:0,1,2,3,4,5,6,7" commutative="1"/>
      <circuit>
        <component_o id="ui_widen_mult_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_widen_mult_expr_FU"/>
          <parameter name="PIPE_PARAMETER">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT" is_doubled="1">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_widen_mult_expr_FU in1 in2 out1 PIPE_PARAMETER" IP_COMPONENT="ui_mult_expr_FU" VERILOG_PROVIDED="ui_mult_expr_FU #(.BITSIZE_in1(BITSIZE_in1), .BITSIZE_in2(BITSIZE_in2), .BITSIZE_out1(BITSIZE_out1), .PIPE_PARAMETER(PIPE_PARAMETER)) m1 (.out1(out1), .clock(clock), .in1(in1), .in2(in2));" VHDL_PROVIDED=
"begin
  m1 : ui_mult_expr_FU generic map(BITSIZE_in1 =&gt; BITSIZE_in1, BITSIZE_in2 =&gt; BITSIZE_in2, BITSIZE_out1 =&gt; BITSIZE_out1, PIPE_PARAMETER =&gt; PIPE_PARAMETER) port map (out1 =&gt; out1, clock =&gt; clock, in1 =&gt; in1, in2 =&gt; in2);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_mult_expr_FU</name>
      <no_constant_characterization></no_constant_characterization>
      <operation operation_name="mult_expr" supported_types="UINT:*|VECTOR_BOOL:*" pipe_parameters="1:0|8:0,1,2|16:0,1,2|32:0,1,2,3,4,5,6,7|64:0,1,2,3,4,5,6,7|DSPs_y_sizes:0,1,2,3,4,5,6,7" commutative="1"/>
      <circuit>
        <component_o id="ui_mult_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_mult_expr_FU"/>
          <parameter name="PIPE_PARAMETER">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_mult_expr_FU in1 in2 out1 PIPE_PARAMETER" VERILOG_PROVIDED=
"generate
  if(PIPE_PARAMETER==1)
  begin
    reg signed [BITSIZE_out1-1:0] out1_reg;
    assign out1 = out1_reg;
    always @(posedge clock)
    begin
      out1_reg &lt;= in1 * in2;
    end
  end
  else if(PIPE_PARAMETER&gt;1)
  begin
    reg [BITSIZE_in1-1:0] in1_in;
    reg [BITSIZE_in2-1:0] in2_in;
    wire [BITSIZE_out1-1:0] mult_res;
    reg [BITSIZE_out1-1:0] mul [PIPE_PARAMETER-2:0];
    integer i;
    assign mult_res = in1_in * in2_in;
    always @(posedge clock)
    begin
      in1_in &lt;= in1;
      in2_in &lt;= in2;
      mul[PIPE_PARAMETER-2] &lt;= mult_res;
      for (i=0; i&lt;PIPE_PARAMETER-2; i=i+1)
        mul[i] &lt;= mul[i+1];
    end
    assign out1 = mul[0];
  end
  else
  begin
    assign out1 = in1 * in2;
  end
endgenerate
" VHDL_PROVIDED=
"  signal in1_int : unsigned (BITSIZE_in1-1 downto 0);
  signal in2_int : unsigned (BITSIZE_in2-1 downto 0);
begin
  cond: if(PIPE_PARAMETER=0) generate
    out1 &lt;= resize(in1 * in2, BITSIZE_out1);
  end generate cond;
  cond1 : if(PIPE_PARAMETER=1) generate
    out1 &lt;= resize(in1_int * in2_int, BITSIZE_out1);
    process(clock)
    begin
      if clock'event and clock = '1' then
        in1_int &lt;= in1;
        in2_int &lt;= in2;
      end if;
    end process;
  end generate cond1;
  cond2 : if(PIPE_PARAMETER &gt;1) generate
    type levels_of_registers is array (PIPE_PARAMETER-1 downto 0) of unsigned (BITSIZE_out1-1 downto 0);
    signal out1_int : levels_of_registers;
  begin
    out1 &lt;= out1_int (0);
    process(clock)
    begin
      if clock'event and clock = '1' then
        in1_int &lt;= in1;
        in2_int &lt;= in2;
        out1_int(PIPE_PARAMETER-2) &lt;= resize(in1_int * in2_int, BITSIZE_out1);
        for i in 0 to PIPE_PARAMETER-3 loop
          out1_int (i) &lt;= out1_int (i+1);
        end loop;
      end if;
    end process;
  end generate cond2;
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>dot_prod_expr_FU</name>
      <operation operation_name="dot_prod_expr" supported_types="INT:*" pipe_parameters="1:0|8:0,1,2|16:0,1,2|32:0,1,2,3,4,5,6,7|64:0,1,2,3,4,5,6,7"/>
      <circuit>
        <component_o id="dot_prod_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="dot_prod_expr_FU"/>
          <parameter name="PIPE_PARAMETER">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN" is_doubled="1">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT" is_doubled="1">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="dot_prod_expr_FU in1 in2 in3 out1 PIPE_PARAMETER" IP_COMPONENT="mult_expr_FU,widen_mult_expr_FU" VERILOG_PROVIDED="wire signed [BITSIZE_in3-1:0] tmp_mult;\nwiden_mult_expr_FU #(.BITSIZE_in1(BITSIZE_in1), .BITSIZE_in2(BITSIZE_in2), .BITSIZE_out1(BITSIZE_in3), .PIPE_PARAMETER(PIPE_PARAMETER)) m1 (.out1(tmp_mult), .clock(clock), .in1(in1), .in2(in2));\ngenerate\n  if(PIPE_PARAMETER>0)\n  begin\n    reg signed [BITSIZE_in3-1:0] tmp_in3 [PIPE_PARAMETER-1:0];\n    integer i;\n    always @(posedge clock)\n    begin\n      tmp_in3[0] &lt;= in3;\n      for (i=1; i&lt;=PIPE_PARAMETER-1; i=i+1)\n        tmp_in3[i] &lt;= tmp_in3[i-1];\n    end\n    assign out1 = tmp_mult + tmp_in3[PIPE_PARAMETER-1];\n  end\n  else\n  begin\n    wire signed [BITSIZE_out1-1:0] tmp1;\n    assign tmp1 = tmp_mult + in3;\n    assign out1 = tmp1;\n  end\nendgenerate"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_dot_prod_expr_FU</name>
      <operation operation_name="dot_prod_expr" supported_types="UINT:*|VECTOR_BOOL:*" pipe_parameters="1:0|8:0,1,2|16:0,1,2|32:0,1,2,3,4,5,6,7|64:0,1,2,3,4,5,6,7"/>
      <circuit>
        <component_o id="ui_dot_prod_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_dot_prod_expr_FU"/>
          <parameter name="PIPE_PARAMETER">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="in3" dir="IN" is_doubled="1">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT" is_doubled="1">
            <structural_type_descriptor type="UINT" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ui_dot_prod_expr_FU in1 in2 in3 out1 PIPE_PARAMETER" IP_COMPONENT="ui_mult_expr_FU,ui_widen_mult_expr_FU" VERILOG_PROVIDED="wire [BITSIZE_in3-1:0] tmp_mult;\nui_widen_mult_expr_FU #(.BITSIZE_in1(BITSIZE_in1), .BITSIZE_in2(BITSIZE_in2), .BITSIZE_out1(BITSIZE_in3), .PIPE_PARAMETER(PIPE_PARAMETER)) m1 (.out1(tmp_mult), .clock(clock), .in1(in1), .in2(in2));\ngenerate\n  if(PIPE_PARAMETER>0)\n  begin\n    reg [BITSIZE_in3-1:0] tmp_in3 [PIPE_PARAMETER-1:0];\n    integer i;\n    always @(posedge clock)\n    begin\n      tmp_in3[0] &lt;= in3;\n      for (i=1; i&lt;=PIPE_PARAMETER-1; i=i+1)\n        tmp_in3[i] &lt;= tmp_in3[i-1];\n    end\n    assign out1 = tmp_mult + tmp_in3[PIPE_PARAMETER-1];\n  end\n  else\n  begin\n    wire [BITSIZE_out1-1:0] tmp1;\n    assign tmp1 = tmp_mult + in3;\n    assign out1 = tmp1;\n  end\nendgenerate"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_rrotate_expr_FU</name>
      <characterizing_constant_value>62</characterizing_constant_value>
      <operation operation_name="rrotate_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_rrotate_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_rrotate_expr_FU"/>
          <parameter name="PRECISION">1</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_rrotate_expr_FU in1 in2 out1 PRECISION" VERILOG_PROVIDED=
"`ifndef _SIM_HAVE_CLOG2
  function integer log2;
     input integer value;
     integer temp_value;
    begin
      temp_value = value-1;
      for (log2=0; temp_value&gt;0; log2=log2+1)
        temp_value = temp_value&gt;&gt;1;
    end
  endfunction
`endif
`ifdef _SIM_HAVE_CLOG2
  parameter arg2_bitsize = $clog2(PRECISION);
`else
  parameter arg2_bitsize = log2(PRECISION);
`endif
parameter marg2_bitsize = arg2_bitsize &lt; BITSIZE_in2 ? arg2_bitsize : BITSIZE_in2;
assign out1 = (in1 &gt;&gt; (in2[marg2_bitsize-1:0]))|(in1 &lt;&lt;(PRECISION-(in2[marg2_bitsize-1:0])));" VHDL_PROVIDED=
"begin
  out1 &lt;= resize(rotate_right(resize(in1, PRECISION), to_integer(unsigned(in2))), BITSIZE_out1);
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>negate_expr_FU</name>
      <operation operation_name="negate_expr"  supported_types="INT:*" />
      <circuit>
        <component_o id="negate_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="negate_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="negate_expr_FU in1 out1" VERILOG_PROVIDED="assign out1 = -in1;" VHDL_PROVIDED="begin\n  out1 &lt;= -resize_signed(in1, BITSIZE_out1);\n"/>
        </component_o>
      </circuit>
    </template>
    <cell>
      <name>lut_expr_FU</name>
      <operation operation_name="lut_expr" />
      <circuit>
        <component_o id="lut_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2022 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="lut_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in5" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in6" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in7" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in8" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in9" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="lut_expr_FU in1 out1" VERILOG_PROVIDED="reg[7:0] cleaned_in0;
wire [7:0] in0;
wire[BITSIZE_in1-1:0] shifted_s;
assign in0 = {in9, in8, in7, in6, in5, in4, in3, in2};
generate
  genvar i0;
  for (i0=0; i0&lt;8; i0=i0+1)
  begin : L0
        always @(*)
        begin
           if (in0[i0] == 1'b1)
              cleaned_in0[i0] = 1'b1;
           else
              cleaned_in0[i0] = 1'b0;
        end
  end
endgenerate
assign shifted_s = in1 &gt;&gt; cleaned_in0;
assign out1[0] = shifted_s[0];
generate
   if(BITSIZE_out1 &gt; 1)
     assign out1[BITSIZE_out1-1:1] = 0;
endgenerate
" VHDL_PROVIDED=
"  signal in0 : std_logic_vector(7 downto 0);
  signal shifted_s : unsigned(in1&apos;range) := (others =&gt; &apos;0&apos;);
begin
  in0(0) &lt;= in2;
  in0(1) &lt;= in3;
  in0(2) &lt;= in4;
  in0(3) &lt;= in5;
  in0(4) &lt;= in6;
  in0(5) &lt;= in7;
  in0(6) &lt;= in8;
  in0(7) &lt;= in9;
  out1 &lt;= std_logic_vector(resize(to_unsigned(1, BITSIZE_out1), BITSIZE_out1)) when (shifted_s(0) = &apos;1&apos;) else (others =&gt; &apos;0&apos;);
  process(in0, in1)
  begin
    shifted_s &lt;= shift_right(unsigned(in1), to_integer(unsigned(in0)));
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>extract_bit_expr_FU</name>
      <operation operation_name="extract_bit_expr"  supported_types="INT:*" />
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="extract_bit_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2020-2022 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="extract_bit_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="extract_bit_expr_FU in1 in2" VERILOG_PROVIDED="assign out1 = (in1 &gt;&gt;&gt; in2)&amp;1;" VHDL_PROVIDED=
"begin
  process(in1, in2)
  begin
    out1 &lt;= shift_right(in1, to_integer(unsigned(in2)))(0);
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_extract_bit_expr_FU</name>
      <operation operation_name="extract_bit_expr"  supported_types="UINT:*|VECTOR_BOOL:*" />
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="ui_extract_bit_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2020-2022 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_extract_bit_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_extract_bit_expr_FU in1 in2" VERILOG_PROVIDED="assign out1 = (in1 &gt;&gt; in2)&amp;1;" VHDL_PROVIDED=
"begin
  process(in1, in2)
  begin
    out1 &lt;= shift_right(unsigned(in1), to_integer(unsigned(in2)))(0);
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>extractvalue_expr_FU</name>
      <operation operation_name="extractvalue_expr" />
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="extractvalue_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2020-2022 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="extractvalue_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="extractvalue_expr_FU in1 in2" VERILOG_PROVIDED="assign out1 = (in1 &gt;&gt; in2);" VHDL_PROVIDED=
"begin
  process(in1, in2)
  begin
    out1 &lt;= resize(shift_right(in1, to_integer(unsigned(in2))), BITSIZE_out1);
  end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>insertvalue_expr_FU</name>
      <operation operation_name="insertvalue_expr" />
      <component_timing_alias>ASSIGN_VECTOR_BOOL_FU</component_timing_alias>
      <circuit>
        <component_o id="insertvalue_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2020-2022 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="insertvalue_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="insertvalue_expr_FU in1 in2 in3" VERILOG_PROVIDED="reg [BITSIZE_in1-1:0] temp;
          always@(*) begin
            temp = in1;
            temp[BITSIZE_in2+in3-1 -: BITSIZE_in2] = in2;
          end
          assign out1 = temp;" VHDL_PROVIDED=
  "begin
    process (in1, in2, in3) 
      variable temp : std_logic_vector (BITSIZE_in0 - 1 downto 0);
    begin 
      temp := in1;
      temp (BITSIZE_in1 - 1 + to_integer(unsigned(in3)) downto to_integer(unsigned(in3))) := in2;
    end process;
  "/>
        </component_o>
      </circuit>
    </cell>
    <template>
      <name>ui_negate_expr_FU</name>
      <operation operation_name="negate_expr"  supported_types="UINT:*|VECTOR_BOOL:*" />
      <circuit>
        <component_o id="ui_negate_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_negate_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_negate_expr_FU in1 out1" VERILOG_PROVIDED="assign out1 = -in1;" VHDL_PROVIDED="begin\n  out1 &lt;= unsigned(-signed(resize(in1, BITSIZE_out1)));\n"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>truth_xor_expr_FU</name>
      <operation operation_name="truth_xor_expr"  commutative="1"/>
      <circuit>
        <component_o id="truth_xor_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="truth_xor_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="truth_xor_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = (in1!={BITSIZE_in1{1&apos;b0}}) ^ (in2!={BITSIZE_in2{1&apos;b0}});" VHDL_PROVIDED="begin\nout1 &lt;= in1 xor in2;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>truth_and_expr_FU</name>
      <operation operation_name="truth_and_expr" commutative="1"/>
      <circuit>
        <component_o id="truth_and_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="truth_and_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="truth_and_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &amp;&amp; in2;" VHDL_PROVIDED="begin\nout1 &lt;= std_logic_vector(resize(unsigned(in1), BITSIZE_out1) and resize(unsigned(in2), BITSIZE_out1));"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>truth_not_expr_FU</name>
      <operation operation_name="truth_not_expr" />
      <circuit>
        <component_o id="truth_not_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="truth_not_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="truth_not_expr_FU in1 out1" VERILOG_PROVIDED="assign out1 = !in1;" VHDL_PROVIDED="begin\nout1 &lt;= std_logic_vector(resize(to_unsigned(1, BITSIZE_out1), BITSIZE_out1)) when (in1(0) = &apos;0&apos;) else (others =&gt; &apos;0&apos;);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>eq_expr_FU</name>
      <operation operation_name="eq_expr" supported_types="INT:*" commutative="1"/>
      <circuit>
        <component_o id="eq_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="eq_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="eq_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 == in2;" VHDL_PROVIDED="begin\n  out1 &lt;= std_logic_vector(resize(to_unsigned(1, BITSIZE_out1), BITSIZE_out1)) when (in1 = in2) else (others =&gt; &apos;0&apos;);\n"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_eq_expr_FU</name>
      <operation operation_name="eq_expr" supported_types="UINT:*|VECTOR_BOOL:*" commutative="1"/>
      <circuit>
        <component_o id="ui_eq_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_eq_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_eq_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 == in2;" VHDL_PROVIDED="begin\n  out1 &lt;= std_logic_vector(resize(to_unsigned(1, BITSIZE_out1), BITSIZE_out1)) when (in1 = in2) else (others =&gt; &apos;0&apos;);\n"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>rshift_expr_FU</name>
      <characterizing_constant_value>62</characterizing_constant_value>
      <operation operation_name="rshift_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="rshift_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="rshift_expr_FU"/>
          <parameter name="PRECISION">1</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="rshift_expr_FU in1 in2 out1 PRECISION" VERILOG_PROVIDED=
"`ifndef _SIM_HAVE_CLOG2
  function integer log2;
     input integer value;
     integer temp_value;
    begin
      temp_value = value-1;
      for (log2=0; temp_value&gt;0; log2=log2+1)
        temp_value = temp_value&gt;&gt;1;
    end
  endfunction
`endif
`ifdef _SIM_HAVE_CLOG2
  parameter arg2_bitsize = $clog2(PRECISION);
`else
  parameter arg2_bitsize = log2(PRECISION);
`endif
generate
  if(BITSIZE_in2 &gt; arg2_bitsize)
    assign out1 = in1 &gt;&gt;&gt; (in2[arg2_bitsize-1:0]);
  else
    assign out1 = in1 &gt;&gt;&gt; in2;
endgenerate"
VHDL_PROVIDED=
"begin
  process(in1, in2)
  begin
    out1 &lt;= resize_signed(shift_right(in1, to_integer(unsigned(in2) rem PRECISION)), BITSIZE_out1);
  end process;
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_rshift_expr_FU</name>
      <characterizing_constant_value>1</characterizing_constant_value>
      <operation operation_name="rshift_expr" supported_types="UINT:*|VECTOR_BOOL:*" />
      <circuit>
        <component_o id="ui_rshift_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_rshift_expr_FU"/>
          <parameter name="PRECISION">1</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_rshift_expr_FU in1 in2 out1 PRECISION" VERILOG_PROVIDED=
"`ifndef _SIM_HAVE_CLOG2
  function integer log2;
     input integer value;
     integer temp_value;
    begin
      temp_value = value-1;
      for (log2=0; temp_value&gt;0; log2=log2+1)
        temp_value = temp_value&gt;&gt;1;
    end
  endfunction
`endif
`ifdef _SIM_HAVE_CLOG2
  parameter arg2_bitsize = $clog2(PRECISION);
`else
  parameter arg2_bitsize = log2(PRECISION);
`endif
generate
  if(BITSIZE_in2 &gt; arg2_bitsize)
    assign out1 = in1 &gt;&gt; (in2[arg2_bitsize-1:0]);
  else
    assign out1 = in1 &gt;&gt; in2;
endgenerate
" VHDL_PROVIDED=
"begin
  process(in1, in2)
  begin
    out1 &lt;= resize(shift_right(in1, to_integer(unsigned(in2) rem PRECISION)), BITSIZE_out1);
  end process;
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>exact_div_expr_FU</name>
      <characterizing_constant_value>21845</characterizing_constant_value>
      <operation operation_name="exact_div_expr" supported_types="INT:*" pipe_parameters="1:0|8:0,1,2,3,7|16:0,1,2,3,5,7,15|32:0,1,3,7,15,31|64:0,1,3,7,15,31,63"/>
      <circuit>
        <component_o id="exact_div_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="exact_div_expr_FU"/>
          <parameter name="PIPE_PARAMETER">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="exact_div_expr_FU in1 in2 out1 PIPE_PARAMETER" VERILOG_PROVIDED=
"parameter required_iterations = BITSIZE_in1 &gt; PIPE_PARAMETER ? BITSIZE_in1 : PIPE_PARAMETER;
parameter STEPS = ((required_iterations)/(PIPE_PARAMETER+1)) + (((required_iterations)%(PIPE_PARAMETER+1)) ? 1 : 0);
parameter num_length = STEPS * (PIPE_PARAMETER+1);
parameter denom_length = BITSIZE_in2+1;
parameter temp_length = num_length+denom_length;
parameter PIPE_PARAMETER_T = PIPE_PARAMETER &gt; temp_length-denom_length ? temp_length-denom_length : PIPE_PARAMETER;
parameter quot_length = temp_length - denom_length + 1;
parameter xquot_length = quot_length &lt; BITSIZE_out1 ? quot_length : BITSIZE_out1;

wire [BITSIZE_in1-1:0] xnum;
wire [BITSIZE_in2-1:0] xdenom;
 
function [BITSIZE_out1-1:0] UDIV;
  input [BITSIZE_in1-1:0] xnum;
  input [BITSIZE_in2-1:0] xdenom;
  reg [quot_length-1:0] quot;
  integer column, j;
  reg term;
  reg [temp_length-1:0] temp;
  reg signed [denom_length:0] sum;
begin
  temp = {temp_length{1&apos;b0}};
  temp[num_length-1:0] = xnum;
  sum = {denom_length+1{1&apos;b0}};

  quot = {quot_length{1&apos;b0}};
  for(j = temp_length-denom_length; j &gt;= 0; j = j - 1)
  begin
    sum = $signed({1&apos;b0, temp[j +: denom_length]})-$signed({2&apos;b00, xdenom});
    quot[j] = ~sum[denom_length];
    for(column = 0; column &lt; denom_length; column = column + 1)
    begin
      term = ((quot[j] &amp; sum[column])) | ((~quot[j] &amp; temp[column+j]));
      temp[column+j] = term;
    end
  end
  UDIV = {BITSIZE_out1{1&apos;b0}};
  UDIV[xquot_length-1:0] = quot;
end
endfunction

generate
  if(PIPE_PARAMETER_T&gt;0)
  begin
    reg signed [BITSIZE_out1-1:0] fquot;
    reg [temp_length-1:0] temp[PIPE_PARAMETER_T-1:0];
    reg [BITSIZE_in2-1:0] xdenom_arr[PIPE_PARAMETER_T-1:0];
    reg [quot_length-1:0] quot[PIPE_PARAMETER_T-1:0];
    reg xor_inputs[PIPE_PARAMETER_T-1:0];

    always @(temp[0] or quot[0] or xor_inputs[0] or xdenom_arr[0])
    begin : last_block
      reg [temp_length-1:0] t_temp;
      reg signed [denom_length:0] sum;
      reg [quot_length-1:0] t_quot;
      integer j, st, pp;
      // let&apos;s start computing the output
      t_temp = temp[0];
      t_quot = quot[0];
      sum = {denom_length+1{1&apos;b0}};
      j=0;
      for(st = STEPS-1; st &gt;=0 ; st = st - 1)
      begin
        sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom_arr[0]});
        t_quot[st+j] = ~sum[denom_length];
        t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
      end
      fquot = xor_inputs[0] ? -t_quot : t_quot;
    end
    always @(posedge clock)
    begin : intermediate_block
      reg [temp_length-1:0] t_temp;
      reg signed [denom_length:0] sum;
      reg [quot_length-1:0] t_quot;
      integer j, st, pp;
      /// intermediate steps
      for(pp = 1; pp &lt; PIPE_PARAMETER_T; pp = pp + 1)
      begin
        t_temp = temp[pp];
        t_quot = quot[pp];
        sum = {denom_length+1{1&apos;b0}};
        j=pp*STEPS;
        for(st = STEPS-1; st &gt;=0 ; st = st - 1)
        begin
          sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom_arr[pp]});
          t_quot[st+j] = ~sum[denom_length];
          t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
        end
        quot[pp-1] = t_quot;
        temp[pp-1] = t_temp;
        xdenom_arr[pp-1] = xdenom_arr[pp]; 
        xor_inputs[pp-1] = xor_inputs[pp]; 
      end

      /// first stage initialization
      t_temp = {temp_length{1&apos;b0}};
      t_temp[num_length-1:0] = xnum;
      t_quot = {quot_length{1&apos;b0}};
      sum = {denom_length+1{1&apos;b0}};
      j=-STEPS+((PIPE_PARAMETER_T+1)*STEPS);
      for(st=STEPS+(temp_length-denom_length-((PIPE_PARAMETER_T+1)*STEPS)); st &gt;=0 ; st = st - 1)
      begin
        sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom});
        t_quot[st+j] = ~sum[denom_length];
        t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
      end
      quot[PIPE_PARAMETER_T-1] = t_quot;
      temp[PIPE_PARAMETER_T-1] = t_temp;
      xdenom_arr[PIPE_PARAMETER_T-1] = xdenom;
      xor_inputs[PIPE_PARAMETER_T-1] = in1[BITSIZE_in1-1] ^ in2[BITSIZE_in2-1];
    end
    assign out1 = fquot;
  end
  else
  begin
    wire signed [BITSIZE_out1-1:0] fquot;
    assign fquot = UDIV(xnum, xdenom);
    assign out1 = in1[BITSIZE_in1-1] ^ in2[BITSIZE_in2-1] ? -fquot : fquot;
  end
endgenerate

assign xnum = in1 &gt;= $signed({BITSIZE_in1{1&apos;b0}}) ? in1 : -in1;
assign xdenom = in2 &gt;= $signed({BITSIZE_in2{1&apos;b0}}) ? in2 : -in2;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>trunc_div_expr_FU</name>
      <characterizing_constant_value>21845</characterizing_constant_value>
      <operation operation_name="trunc_div_expr" supported_types="INT:*" pipe_parameters="1:0|8:2,3,4,7,8|16:7,15,16|32:15,16,31,32|64:63,64"/>
      <circuit>
        <component_o id="trunc_div_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="trunc_div_expr_FU"/>
          <parameter name="PIPE_PARAMETER">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="trunc_div_expr_FU in1 in2 out1 PIPE_PARAMETER" VERILOG_PROVIDED=
"parameter required_iterations = BITSIZE_in1 &gt; PIPE_PARAMETER ? BITSIZE_in1 : PIPE_PARAMETER;
parameter STEPS = ((required_iterations)/(PIPE_PARAMETER+1)) + (((required_iterations)%(PIPE_PARAMETER+1)) ? 1 : 0);
parameter num_length = STEPS * (PIPE_PARAMETER+1);
parameter denom_length = BITSIZE_in2+1;
parameter temp_length = num_length+denom_length;
parameter PIPE_PARAMETER_T = PIPE_PARAMETER > temp_length-denom_length ? temp_length-denom_length : PIPE_PARAMETER;
parameter quot_length = temp_length - denom_length + 1;
parameter xquot_length = quot_length &lt; BITSIZE_out1 ? quot_length : BITSIZE_out1;

wire [BITSIZE_in1-1:0] xnum;
wire [BITSIZE_in2-1:0] xdenom;
 
function [BITSIZE_out1-1:0] UDIV;
  input [BITSIZE_in1-1:0] fxnum;
  input [BITSIZE_in2-1:0] fxdenom;
  reg [quot_length-1:0] quot;
  integer column, j;
  reg term;
  reg [temp_length-1:0] temp;
  reg signed [denom_length:0] sum;
begin
  temp = {temp_length{1&apos;b0}};
  temp[num_length-1:0] = fxnum;
  sum = {denom_length+1{1&apos;b0}};

  quot = {quot_length{1&apos;b0}};
  for(j = temp_length-denom_length; j &gt;= 0; j = j - 1)
  begin
    sum = $signed({1&apos;b0, temp[j +: denom_length]})-$signed({2&apos;b00, fxdenom});
    quot[j] = ~sum[denom_length];
    for(column = 0; column &lt; denom_length; column = column + 1)
    begin
      term = ((quot[j] &amp; sum[column])) | ((~quot[j] &amp; temp[column+j]));
      temp[column+j] = term;
    end
  end
  UDIV = {BITSIZE_out1{1&apos;b0}};
  UDIV[xquot_length-1:0] = quot;
end
endfunction

generate
  if(PIPE_PARAMETER_T&gt;0)
  begin
    reg signed [BITSIZE_out1-1:0] fquot;
    reg [temp_length-1:0] temp[PIPE_PARAMETER_T-1:0];
    reg [BITSIZE_in2-1:0] xdenom_arr[PIPE_PARAMETER_T-1:0];
    reg [quot_length-1:0] quot[PIPE_PARAMETER_T-1:0];
    reg xor_inputs[PIPE_PARAMETER_T-1:0];
 
    always @(temp[0] or quot[0] or xor_inputs[0] or xdenom_arr[0])
    begin : last_block
      reg [temp_length-1:0] t_temp;
      reg signed [denom_length:0] sum;
      reg [quot_length-1:0] t_quot;
      integer j, st;
      // let&apos;s start computing the output
      t_temp = temp[0];
      t_quot = quot[0];
      sum = {denom_length+1{1&apos;b0}};
      j=0;
      for(st = STEPS-1; st &gt;=0 ; st = st - 1)
      begin
        sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom_arr[0]});
        t_quot[st+j] = ~sum[denom_length];
        t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
      end
      fquot = xor_inputs[0] ? -t_quot : t_quot;
    end
    always @(posedge clock)
    begin : intermediate_block
      reg [temp_length-1:0] t_temp;
      reg signed [denom_length:0] sum;
      reg [quot_length-1:0] t_quot;
      integer j, st, pp;
      /// intermediate steps
      for(pp = 1; pp &lt; PIPE_PARAMETER_T; pp = pp + 1)
      begin
        t_temp = temp[pp];
        t_quot = quot[pp];
        sum = {denom_length+1{1&apos;b0}};
        j=pp*STEPS;
        for(st = STEPS-1; st &gt;=0 ; st = st - 1)
        begin
          sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom_arr[pp]});
          t_quot[st+j] = ~sum[denom_length];
          t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
        end
        quot[pp-1] &lt;= t_quot;
        temp[pp-1] &lt;= t_temp;
        xdenom_arr[pp-1] &lt;= xdenom_arr[pp]; 
        xor_inputs[pp-1] &lt;= xor_inputs[pp]; 
      end

      /// first stage initialization
      t_temp = {temp_length{1&apos;b0}};
      t_temp[num_length-1:0] = xnum;
      t_quot = {quot_length{1&apos;b0}};
      sum = {denom_length+1{1&apos;b0}};
      j=-STEPS+((PIPE_PARAMETER_T+1)*STEPS);
      for(st=STEPS+(temp_length-denom_length-((PIPE_PARAMETER_T+1)*STEPS)); st &gt;=0 ; st = st - 1)
      begin
        sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom});
        t_quot[st+j] = ~sum[denom_length];
        t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
      end
      quot[PIPE_PARAMETER_T-1] &lt;= t_quot;
      temp[PIPE_PARAMETER_T-1] &lt;= t_temp;
      xdenom_arr[PIPE_PARAMETER_T-1] &lt;= xdenom;
      xor_inputs[PIPE_PARAMETER_T-1] &lt;= in1[BITSIZE_in1-1] ^ in2[BITSIZE_in2-1];
    end
    assign out1 = fquot;
  end
  else
  begin
    wire signed [BITSIZE_out1-1:0] fquot;
    assign fquot = UDIV(xnum, xdenom);
    assign out1 = in1[BITSIZE_in1-1] ^ in2[BITSIZE_in2-1] ? -fquot : fquot;
  end
endgenerate

assign xnum = in1 &gt;= $signed({BITSIZE_in1{1&apos;b0}}) ? in1 : -in1;
assign xdenom = in2 &gt;= $signed({BITSIZE_in2{1&apos;b0}}) ? in2 : -in2;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_trunc_div_expr_FU</name>
      <characterizing_constant_value>21845</characterizing_constant_value>
      <operation operation_name="trunc_div_expr" supported_types="UINT:*|VECTOR_BOOL:*" pipe_parameters="1:0|8:0,1,2,3,7|16:0,1,2,3,5,7,15|32:0,1,3,7,15,31|64:0,1,3,7,15,31,63"/>
      <circuit>
        <component_o id="ui_trunc_div_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_trunc_div_expr_FU"/>
          <parameter name="PIPE_PARAMETER">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_trunc_div_expr_FU in1 in2 out1 PIPE_PARAMETER" VERILOG_PROVIDED=
"parameter required_iterations = BITSIZE_in1 &gt; PIPE_PARAMETER ? BITSIZE_in1 : PIPE_PARAMETER;
parameter STEPS = ((required_iterations)/(PIPE_PARAMETER+1)) + (((required_iterations)%(PIPE_PARAMETER+1)) ? 1 : 0);
parameter num_length = STEPS * (PIPE_PARAMETER+1);
parameter denom_length = BITSIZE_in2+1;
parameter temp_length = num_length+denom_length;
parameter PIPE_PARAMETER_T = PIPE_PARAMETER &gt; temp_length-denom_length ? temp_length-denom_length : PIPE_PARAMETER;
parameter quot_length = temp_length - denom_length + 1;
parameter xquot_length = quot_length &lt; BITSIZE_out1 ? quot_length : BITSIZE_out1;

wire [BITSIZE_in1-1:0] xnum;
wire [BITSIZE_in2-1:0] xdenom;
 
function [BITSIZE_out1-1:0] UDIV;
  input [BITSIZE_in1-1:0] fxnum;
  input [BITSIZE_in2-1:0] fxdenom;
  reg [quot_length-1:0] quot;
  integer column, j;
  reg term;
  reg [temp_length-1:0] temp;
  reg signed [denom_length:0] sum;
begin
  temp = {temp_length{1&apos;b0}};
  temp[num_length-1:0] = fxnum;
  sum = {denom_length+1{1&apos;b0}};

  quot = {quot_length{1&apos;b0}};
  for(j = temp_length-denom_length; j &gt;= 0; j = j - 1)
  begin
    sum = $signed({1&apos;b0, temp[j +: denom_length]})-$signed({2&apos;b00, fxdenom});
    quot[j] = ~sum[denom_length];
    for(column = 0; column &lt; denom_length; column = column + 1)
    begin
      term = ((quot[j] &amp; sum[column])) | ((~quot[j] &amp; temp[column+j]));
      temp[column+j] = term;
    end
  end
  UDIV = {BITSIZE_out1{1&apos;b0}};
  UDIV[xquot_length-1:0] = quot;
end
endfunction

generate
  if(PIPE_PARAMETER_T&gt;0)
  begin
    reg [BITSIZE_out1-1:0] fquot;
    reg [temp_length-1:0] temp[PIPE_PARAMETER_T-1:0];
    reg [BITSIZE_in2-1:0] xdenom_arr[PIPE_PARAMETER_T-1:0];
    reg [quot_length-1:0] quot[PIPE_PARAMETER_T-1:0];
 
    always @(temp[0] or quot[0] or xdenom_arr[0])
    begin : last_block
      reg [temp_length-1:0] t_temp;
      reg signed [denom_length:0] sum;
      reg [quot_length-1:0] t_quot;
      integer j, st;
      // let&apos;s start computing the output
      t_temp = temp[0];
      t_quot = quot[0];
      sum = {denom_length+1{1&apos;b0}};
      j=0;
      for(st = STEPS-1; st &gt;=0 ; st = st - 1)
      begin
        sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom_arr[0]});
        t_quot[st+j] = ~sum[denom_length];
        t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
      end
      fquot = t_quot;
    end
    always @(posedge clock)
    begin : intermediate_block
      reg [temp_length-1:0] t_temp;
      reg signed [denom_length:0] sum;
      reg [quot_length-1:0] t_quot;
      integer j, st, pp;
      /// intermediate steps
      for(pp = 1; pp &lt; PIPE_PARAMETER_T; pp = pp + 1)
      begin
        t_temp = temp[pp];
        t_quot = quot[pp];
        sum = {denom_length+1{1&apos;b0}};
        j=pp*STEPS;
        for(st = STEPS-1; st &gt;=0 ; st = st - 1)
        begin
          sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom_arr[pp]});
          t_quot[st+j] = ~sum[denom_length];
          t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
        end
        quot[pp-1] &lt;= t_quot;
        temp[pp-1] &lt;= t_temp;
        xdenom_arr[pp-1] &lt;= xdenom_arr[pp];
      end

      /// first stage initialization
      t_temp = {temp_length{1&apos;b0}};
      t_temp[num_length-1:0] = xnum;
      t_quot = {quot_length{1&apos;b0}};
      sum = {denom_length+1{1&apos;b0}};
      j=-STEPS+((PIPE_PARAMETER_T+1)*STEPS);
      for(st=STEPS+(temp_length-denom_length-((PIPE_PARAMETER_T+1)*STEPS)); st &gt;=0 ; st = st - 1)
      begin
        sum = $signed({1&apos;b0, t_temp[(j+st) +: denom_length]})-$signed({2&apos;b00, xdenom});
        t_quot[st+j] = ~sum[denom_length];
        t_temp[st+j+:denom_length] = t_quot[st+j] ? sum[denom_length-1:0] :t_temp[st+j+:denom_length];
      end
      quot[PIPE_PARAMETER_T-1] &lt;= t_quot;
      temp[PIPE_PARAMETER_T-1] &lt;= t_temp;
      xdenom_arr[PIPE_PARAMETER_T-1] &lt;= xdenom;
    end
    assign out1 = fquot;
  end
  else
  begin
    wire [BITSIZE_out1-1:0] fquot;
    assign fquot = UDIV(xnum, xdenom);
    assign out1 = fquot;
  end
endgenerate

assign xnum = in1;
assign xdenom = in2;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>le_expr_FU</name>
      <operation operation_name="le_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="le_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="le_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="le_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &lt;= in2;" VHDL_PROVIDED="begin\nout1(0) &lt;= &apos;1&apos; when (signed(in1) &lt;= signed(in2)) else &apos;0&apos;;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_le_expr_FU</name>
      <operation operation_name="le_expr" supported_types="UINT:*|VECTOR_BOOL:*" />
      <circuit>
        <component_o id="ui_le_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_le_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_le_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &lt;= in2;" VHDL_PROVIDED="begin\nout1(0) &lt;= &apos;1&apos; when (unsigned(in1) &lt;= unsigned(in2)) else &apos;0&apos;;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>bit_and_expr_FU</name>
      <operation operation_name="bit_and_expr" supported_types="INT:*" commutative="1"/>
      <circuit>
        <component_o id="bit_and_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="bit_and_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="bit_and_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &amp; in2;" VHDL_PROVIDED="begin\nout1 &lt;= resize_signed(in1, BITSIZE_out1) and resize_signed(in2, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_bit_and_expr_FU</name>
      <operation operation_name="bit_and_expr" supported_types="UINT:*|VECTOR_BOOL:*" commutative="1"/>
      <circuit>
        <component_o id="ui_bit_and_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_bit_and_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_bit_and_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &amp; in2;" VHDL_PROVIDED="begin\nout1 &lt;= resize(in1, BITSIZE_out1) and resize(in2, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <cell>
      <name>addr_expr_FU</name>
      <operation operation_name="addr_expr" />
      <circuit>
        <component_o id="addr_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="addr_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="addr_expr_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin\n out1 &lt;= std_logic_vector(resize(unsigned(in1), BITSIZE_out1));\n"/>
        </component_o>
      </circuit>
    </cell>
    <template>
      <name>widen_sum_expr_FU</name>
      <operation operation_name="widen_sum_expr" supported_types="INT:*" commutative="1"/>
      <circuit>
        <component_o id="widen_sum_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="widen_sum_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT" is_doubled="1">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="widen_sum_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 + in2;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_widen_sum_expr_FU</name>
      <operation operation_name="widen_sum_expr" supported_types="UINT:*|VECTOR_BOOL:*" commutative="1"/>
      <circuit>
        <component_o id="ui_widen_sum_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_widen_sum_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT" is_doubled="1">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_widen_sum_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 + in2;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>plus_expr_FU</name>
      <operation operation_name="plus_expr" supported_types="INT:*" commutative="1"/>
      <circuit>
        <component_o id="plus_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="plus_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="plus_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 + in2;" VHDL_PROVIDED="  signal resized_in1 : signed (BITSIZE_out1-1 downto 0);\n  signal resized_in2 : signed (BITSIZE_out1-1 downto 0);\n  begin\n    process(in1,in2,resized_in1,resized_in2)\n    begin\n      if(BITSIZE_out1 &lt;= BITSIZE_in1) then\n        resized_in1 &lt;= in1(BITSIZE_out1-1 downto 0);\n      else\n        resized_in1 &lt;= resize(in1, BITSIZE_out1);\n      end if;\n      if(BITSIZE_out1 &lt; BITSIZE_in2) then\n        resized_in2 &lt;= in2(BITSIZE_out1-1 downto 0);\n      else\n        resized_in2 &lt;= resize(in2, BITSIZE_out1);\n      end if;\n      out1 &lt;= resized_in1 + resized_in2;\n    end process;\n"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_plus_expr_FU</name>
      <operation operation_name="plus_expr" supported_types="UINT:*|VECTOR_BOOL:*" commutative="1"/>
      <circuit>
        <component_o id="ui_plus_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_plus_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_plus_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 + in2;" VHDL_PROVIDED="  signal resized_in1 : unsigned(BITSIZE_out1-1 downto 0);\n  signal resized_in2 : unsigned(BITSIZE_out1-1 downto 0);\n  begin\n    process(in1,in2,resized_in1,resized_in2)\n    begin\n      if(BITSIZE_out1 &lt;= BITSIZE_in1) then\n        resized_in1 &lt;= in1(BITSIZE_out1-1 downto 0);\n      else\n        resized_in1 &lt;= resize(in1, BITSIZE_out1);\n      end if;\n      if(BITSIZE_out1 &lt; BITSIZE_in2) then\n        resized_in2 &lt;= in2(BITSIZE_out1-1 downto 0);\n      else\n        resized_in2 &lt;= resize(in2, BITSIZE_out1);\n      end if;\n      out1 &lt;= resized_in1 + resized_in2;\n    end process;\n"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>sat_plus_expr_FU</name>
      <operation operation_name="sat_plus_expr" supported_types="INT:*" commutative="1"/>
      <circuit>
        <component_o id="sat_plus_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="sat_plus_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="sat_plus_expr_FU in1 in2 out1" 
VERILOG_PROVIDED="
wire signed [BITSIZE_out1-1:0] add_tmp;
wire signed [BITSIZE_out1-1:0] mask_max;
wire signed [BITSIZE_out1-1:0] mask_min;
wire cond1, cond2;
assign add_tmp = in1 + in2;
assign mask_min = {1&apos;b1, {BITSIZE_out1-1{1&apos;b0}}};
assign mask_max = {1&apos;b0, {BITSIZE_out1-1{1&apos;b1}}};
assign cond1 = (!in1[BITSIZE_in1-1])&amp;(!in2[BITSIZE_in2-1])&amp;add_tmp[BITSIZE_out1-1];
assign cond2 = in1[BITSIZE_in1-1]&amp;in2[BITSIZE_in2-1]&amp;(!add_tmp[BITSIZE_out1-1]);
assign out1 = cond2 ? mask_min : (cond1 ? mask_max : add_tmp);
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_sat_plus_expr_FU</name>
      <operation operation_name="sat_plus_expr" supported_types="UINT:*|VECTOR_BOOL:*" commutative="1"/>
      <circuit>
        <component_o id="ui_sat_plus_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_sat_plus_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_sat_plus_expr_FU in1 in2 out1" 
VERILOG_PROVIDED="
wire signed [BITSIZE_out1:0] add_tmp;
assign add_tmp = in1 + in2;
assign out1 = add_tmp[BITSIZE_out1] ? {BITSIZE_out1{1&apos;b1}} : add_tmp[BITSIZE_out1-1:0];
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ternary_plus_expr_FU</name>
      <operation operation_name="ternary_plus_expr" supported_types="INT:*" commutative="1"/>
      <circuit>
        <component_o id="ternary_plus_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ternary_plus_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ternary_plus_expr_FU in1 in2 in3 out1" VERILOG_PROVIDED="assign out1 = in1 + in2 + in3;" VHDL_PROVIDED="begin\nout1 &lt;= resize_signed(in1, BITSIZE_out1) + resize_signed(in2, BITSIZE_out1) + resize_signed(in3, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_ternary_plus_expr_FU</name>
      <operation operation_name="ternary_plus_expr" supported_types="UINT:*|VECTOR_BOOL:*" commutative="1"/>
      <circuit>
        <component_o id="ui_ternary_plus_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_ternary_plus_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_ternary_plus_expr_FU in1 in2 in3 out1" VERILOG_PROVIDED="assign out1 = in1 + in2 + in3;" VHDL_PROVIDED="begin\nout1 &lt;= resize(in1, BITSIZE_out1) + resize(in2, BITSIZE_out1) + resize(in3, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ternary_pm_expr_FU</name>
      <operation operation_name="ternary_pm_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="ternary_pm_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ternary_pm_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ternary_pm_expr_FU in1 in2 in3 out1" VERILOG_PROVIDED="assign out1 = in1 + in2 - in3;" VHDL_PROVIDED="begin\nout1 &lt;= resize_signed(in1, BITSIZE_out1) + resize_signed(in2, BITSIZE_out1) - resize_signed(in3, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_ternary_pm_expr_FU</name>
      <operation operation_name="ternary_pm_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_ternary_pm_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_ternary_pm_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_ternary_pm_expr_FU in1 in2 in3 out1" VERILOG_PROVIDED="assign out1 = in1 + in2 - in3;" VHDL_PROVIDED="begin\nout1 &lt;= resize(in1, BITSIZE_out1) + resize(in2, BITSIZE_out1) - resize(in3, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ternary_mp_expr_FU</name>
      <operation operation_name="ternary_mp_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="ternary_mp_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ternary_mp_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ternary_mp_expr_FU in1 in2 in3 out1" VERILOG_PROVIDED="assign out1 = in1 - in2 + in3;" VHDL_PROVIDED="begin\nout1 &lt;= resize_signed(in1, BITSIZE_out1) - resize_signed(in2, BITSIZE_out1) + resize_signed(in3, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_ternary_mp_expr_FU</name>
      <operation operation_name="ternary_mp_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_ternary_mp_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_ternary_mp_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_ternary_mp_expr_FU in1 in2 in3 out1" VERILOG_PROVIDED="assign out1 = in1 - in2 + in3;" VHDL_PROVIDED="begin\nout1 &lt;= resize(in1, BITSIZE_out1) - resize(in2, BITSIZE_out1) + resize(in3, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ternary_mm_expr_FU</name>
      <operation operation_name="ternary_mm_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="ternary_mm_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ternary_mm_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ternary_mm_expr_FU in1 in2 in3 out1" VERILOG_PROVIDED="assign out1 = in1 - in2 - in3;" VHDL_PROVIDED="begin\nout1 &lt;= resize_signed(in1, BITSIZE_out1) - resize_signed(in2, BITSIZE_out1) - resize_signed(in3, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_ternary_mm_expr_FU</name>
      <operation operation_name="ternary_mm_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_ternary_mm_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_ternary_mm_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_ternary_mm_expr_FU in1 in2 in3 out1" VERILOG_PROVIDED="assign out1 = in1 - in2 - in3;" VHDL_PROVIDED="begin\nout1 &lt;= resize(in1, BITSIZE_out1) - resize(in2, BITSIZE_out1) - resize(in3, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ternary_alu_expr_FU</name>
      <operation operation_name="ternary_plus_expr" supported_types="INT:*"/>
      <operation operation_name="ternary_pm_expr" supported_types="INT:*"/>
      <operation operation_name="ternary_mp_expr" supported_types="INT:*"/>
      <operation operation_name="ternary_mm_expr" supported_types="INT:*"/>
      <operation operation_name="plus_expr" supported_types="INT:*"/>
      <operation operation_name="minus_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="ternary_alu_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ternary_alu_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_ternary_plus_expr" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_ternary_pm_expr" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_ternary_mp_expr" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_ternary_mm_expr" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_plus_expr" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_minus_expr" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ternary_alu_expr_FU in1 in2 in3 out1" VERILOG_PROVIDED="wire [1:0] in1_tail;
wire [1:0] in2_tail;
wire [1:0] in3_tail;
wire [1:0] alu_decode;
wire signed [BITSIZE_in1+1:0] ext_in10;
wire signed [BITSIZE_in2+1:0] ext_in20;
wire signed [BITSIZE_in3+1:0] ext_in30;
wire signed [BITSIZE_out1+1:0] ext_in1;
wire signed [BITSIZE_out1+1:0] ext_in2;
wire signed [BITSIZE_out1+1:0] ext_in3;
wire signed [2*(BITSIZE_out1+2)-1:0] cs_vector;
wire signed [BITSIZE_out1+1:0] c_vector;
wire signed [BITSIZE_out1+1:0] s_vector;
function [1:0] c5to2;
  input [4:0] value;
begin
  case (value)
    /* plus plus */
    5&apos;b00000 : c5to2 = 2&apos;b00;
    5&apos;b00001 : c5to2 = 2&apos;b01;
    5&apos;b00010 : c5to2 = 2&apos;b01;
    5&apos;b00011 : c5to2 = 2&apos;b10;
    5&apos;b00100 : c5to2 = 2&apos;b01;
    5&apos;b00101 : c5to2 = 2&apos;b10;
    5&apos;b00110 : c5to2 = 2&apos;b10;
    5&apos;b00111 : c5to2 = 2&apos;b11;
    /* plus minus */
    5&apos;b01000 : c5to2 = 2&apos;b01;
    5&apos;b01001 : c5to2 = 2&apos;b00;
    5&apos;b01010 : c5to2 = 2&apos;b10;
    5&apos;b01011 : c5to2 = 2&apos;b01;
    5&apos;b01100 : c5to2 = 2&apos;b10;
    5&apos;b01101 : c5to2 = 2&apos;b01;
    5&apos;b01110 : c5to2 = 2&apos;b11;
    5&apos;b01111 : c5to2 = 2&apos;b10;
    /* minus plus */
    5&apos;b10000 : c5to2 = 2&apos;b01;
    5&apos;b10001 : c5to2 = 2&apos;b10;
    5&apos;b10010 : c5to2 = 2&apos;b00;
    5&apos;b10011 : c5to2 = 2&apos;b01;
    5&apos;b10100 : c5to2 = 2&apos;b10;
    5&apos;b10101 : c5to2 = 2&apos;b11;
    5&apos;b10110 : c5to2 = 2&apos;b01;
    5&apos;b10111 : c5to2 = 2&apos;b10;
    /* minus minus */
    5&apos;b11000 : c5to2 = 2&apos;b10;
    5&apos;b11001 : c5to2 = 2&apos;b01;
    5&apos;b11010 : c5to2 = 2&apos;b01;
    5&apos;b11011 : c5to2 = 2&apos;b00;
    5&apos;b11100 : c5to2 = 2&apos;b11;
    5&apos;b11101 : c5to2 = 2&apos;b10;
    5&apos;b11110 : c5to2 = 2&apos;b10;
    5&apos;b11111 : c5to2 = 2&apos;b01;
    default  : c5to2 = 2&apos;bxx;
  endcase
end
endfunction
function [1:0] alu_decode_fun;
  input [3:0] value;
begin
  case (value)
    4&apos;b0001 : alu_decode_fun = 2&apos;b00;/*sel_ternary_plus_expr||sel_plus_expr*/
    4&apos;b0010 : alu_decode_fun = 2&apos;b01;/*sel_ternary_pm_expr*/
    4&apos;b0100 : alu_decode_fun = 2&apos;b10;/*sel_ternary_mp_expr*/
    4&apos;b1000 : alu_decode_fun = 2&apos;b11;/*sel_ternary_mm_expr*/
    default : alu_decode_fun = 2&apos;bxx;
  endcase
end
endfunction
function [1:0] in1_tail_fun;
  input [3:0] value;
begin
  case (value)
    4&apos;b0001 : in1_tail_fun = 2&apos;b00;/*sel_ternary_plus_expr||sel_plus_expr*/
    4&apos;b0010 : in1_tail_fun = 2&apos;b00;/*sel_ternary_pm_expr*/
    4&apos;b0100 : in1_tail_fun = 2&apos;b00;/*sel_ternary_mp_expr||sel_minus_expr*/
    4&apos;b1000 : in1_tail_fun = 2&apos;b11;/*sel_ternary_mm_expr*/
    default : in1_tail_fun = 2&apos;bxx;
  endcase
end
endfunction
function [1:0] in2_tail_fun;
  input [3:0] value;
begin
  case (value)
    4&apos;b0001 : in2_tail_fun = 2&apos;b00;/*sel_ternary_plus_expr||sel_plus_expr*/
    4&apos;b0010 : in2_tail_fun = 2&apos;b10;/*sel_ternary_pm_expr*/
    4&apos;b0100 : in2_tail_fun = 2&apos;b01;/*sel_ternary_mp_expr||sel_minus_expr*/
    4&apos;b1000 : in2_tail_fun = 2&apos;b00;/*sel_ternary_mm_expr*/
    default : in2_tail_fun = 2&apos;bxx;
  endcase
end
endfunction
function [1:0] in3_tail_fun;
  input [3:0] value;
begin
  case (value)
    4&apos;b0001 : in3_tail_fun = 2&apos;b00;/*sel_ternary_plus_expr||sel_plus_expr*/
    4&apos;b0010 : in3_tail_fun = 2&apos;b01;/*sel_ternary_pm_expr*/
    4&apos;b0100 : in3_tail_fun = 2&apos;b10;/*sel_ternary_mp_expr||sel_minus_expr*/
    4&apos;b1000 : in3_tail_fun = 2&apos;b00;/*sel_ternary_mm_expr*/
    default : in3_tail_fun = 2&apos;bxx;
  endcase
end
endfunction

// 0001 a + b + c a=00 b=00 c=00
// 0010 a + b - c a=00 b=10 c=01
// 0100 a - b + c a=00 b=01 c=10
// 1000 a - b - c a=11 b=00 c=00
assign alu_decode = alu_decode_fun({sel_ternary_mm_expr,sel_ternary_mp_expr||sel_minus_expr,sel_ternary_pm_expr,sel_ternary_plus_expr||sel_plus_expr});
assign in1_tail = in1_tail_fun({sel_ternary_mm_expr,sel_ternary_mp_expr||sel_minus_expr,sel_ternary_pm_expr,sel_ternary_plus_expr||sel_plus_expr});
assign in2_tail = in2_tail_fun({sel_ternary_mm_expr,sel_ternary_mp_expr||sel_minus_expr,sel_ternary_pm_expr,sel_ternary_plus_expr||sel_plus_expr});
assign in3_tail = in3_tail_fun({sel_ternary_mm_expr,sel_ternary_mp_expr||sel_minus_expr,sel_ternary_pm_expr,sel_ternary_plus_expr||sel_plus_expr});
assign ext_in10 = {in1, in1_tail};
assign ext_in20 = {in2, in2_tail};
assign ext_in30 = {in3, in3_tail};
assign ext_in1 = ext_in10;
assign ext_in2 = ext_in20;
assign ext_in3 = ext_in30;

generate
genvar index_cs;
for (index_cs=0; index_cs&lt;(BITSIZE_out1+2); index_cs=index_cs+1)
  begin : cs_loop
    assign {cs_vector[2*index_cs+1],cs_vector[2*index_cs]} = c5to2({alu_decode,ext_in1[index_cs],ext_in2[index_cs],ext_in3[index_cs]});
  end
endgenerate

assign c_vector[0] = 1&apos;b0;
generate
genvar index_c;
for (index_c=0; index_c&lt;BITSIZE_out1+1; index_c=index_c+1)
  begin : c_loop
    assign c_vector[index_c+1] = cs_vector[2*index_c+1];
  end
endgenerate

generate
genvar index_s;
for (index_s=0; index_s&lt;BITSIZE_out1+2; index_s=index_s+1)
  begin : s_loop
    assign s_vector[index_s] = cs_vector[2*index_s];
  end
endgenerate
assign out1 = (c_vector+s_vector)&gt;&gt;2;
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_ternary_alu_expr_FU</name>
      <operation operation_name="ternary_plus_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <operation operation_name="ternary_pm_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <operation operation_name="ternary_mp_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <operation operation_name="ternary_mm_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <operation operation_name="plus_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <operation operation_name="minus_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_ternary_alu_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_ternary_alu_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_ternary_plus_expr" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_ternary_pm_expr" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_ternary_mp_expr" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_ternary_mm_expr" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_plus_expr" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_minus_expr" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_ternary_alu_expr_FU in1 in2 in3 out1" VERILOG_PROVIDED="wire [1:0] in1_tail;
wire [1:0] in2_tail;
wire [1:0] in3_tail;
wire [1:0] alu_decode;
wire [BITSIZE_out1+2:0] ext_in1;
wire [BITSIZE_out1+2:0] ext_in2;
wire [BITSIZE_out1+2:0] ext_in3;
wire [2*(BITSIZE_out1+2)-1:0] cs_vector;
wire [BITSIZE_out1+1:0] c_vector;
wire [BITSIZE_out1+1:0] s_vector;
function [1:0] c5to2;
  input [4:0] value;
begin
  case (value)
    /* plus plus */
    5&apos;b00000 : c5to2 = 2&apos;b00;
    5&apos;b00001 : c5to2 = 2&apos;b01;
    5&apos;b00010 : c5to2 = 2&apos;b01;
    5&apos;b00011 : c5to2 = 2&apos;b10;
    5&apos;b00100 : c5to2 = 2&apos;b01;
    5&apos;b00101 : c5to2 = 2&apos;b10;
    5&apos;b00110 : c5to2 = 2&apos;b10;
    5&apos;b00111 : c5to2 = 2&apos;b11;
    /* plus minus */
    5&apos;b01000 : c5to2 = 2&apos;b01;
    5&apos;b01001 : c5to2 = 2&apos;b00;
    5&apos;b01010 : c5to2 = 2&apos;b10;
    5&apos;b01011 : c5to2 = 2&apos;b01;
    5&apos;b01100 : c5to2 = 2&apos;b10;
    5&apos;b01101 : c5to2 = 2&apos;b01;
    5&apos;b01110 : c5to2 = 2&apos;b11;
    5&apos;b01111 : c5to2 = 2&apos;b10;
    /* minus plus */
    5&apos;b10000 : c5to2 = 2&apos;b01;
    5&apos;b10001 : c5to2 = 2&apos;b10;
    5&apos;b10010 : c5to2 = 2&apos;b00;
    5&apos;b10011 : c5to2 = 2&apos;b01;
    5&apos;b10100 : c5to2 = 2&apos;b10;
    5&apos;b10101 : c5to2 = 2&apos;b11;
    5&apos;b10110 : c5to2 = 2&apos;b01;
    5&apos;b10111 : c5to2 = 2&apos;b10;
    /* minus minus */
    5&apos;b11000 : c5to2 = 2&apos;b10;
    5&apos;b11001 : c5to2 = 2&apos;b01;
    5&apos;b11010 : c5to2 = 2&apos;b01;
    5&apos;b11011 : c5to2 = 2&apos;b00;
    5&apos;b11100 : c5to2 = 2&apos;b11;
    5&apos;b11101 : c5to2 = 2&apos;b10;
    5&apos;b11110 : c5to2 = 2&apos;b10;
    5&apos;b11111 : c5to2 = 2&apos;b01;
    default  : c5to2 = 2&apos;bxx;
  endcase
end
endfunction
function [1:0] alu_decode_fun;
  input [3:0] value;
begin
  case (value)
    4&apos;b0001 : alu_decode_fun = 2&apos;b00;/*sel_ternary_plus_expr||sel_plus_expr*/
    4&apos;b0010 : alu_decode_fun = 2&apos;b01;/*sel_ternary_pm_expr*/
    4&apos;b0100 : alu_decode_fun = 2&apos;b10;/*sel_ternary_mp_expr*/
    4&apos;b1000 : alu_decode_fun = 2&apos;b11;/*sel_ternary_mm_expr*/
    default : alu_decode_fun = 2&apos;bxx;
  endcase
end
endfunction
function [1:0] in1_tail_fun;
  input [3:0] value;
begin
  case (value)
    4&apos;b0001 : in1_tail_fun = 2&apos;b00;/*sel_ternary_plus_expr||sel_plus_expr*/
    4&apos;b0010 : in1_tail_fun = 2&apos;b00;/*sel_ternary_pm_expr*/
    4&apos;b0100 : in1_tail_fun = 2&apos;b00;/*sel_ternary_mp_expr||sel_minus_expr*/
    4&apos;b1000 : in1_tail_fun = 2&apos;b11;/*sel_ternary_mm_expr*/
    default : in1_tail_fun = 2&apos;bxx;
  endcase
end
endfunction
function [1:0] in2_tail_fun;
  input [3:0] value;
begin
  case (value)
    4&apos;b0001 : in2_tail_fun = 2&apos;b00;/*sel_ternary_plus_expr||sel_plus_expr*/
    4&apos;b0010 : in2_tail_fun = 2&apos;b10;/*sel_ternary_pm_expr*/
    4&apos;b0100 : in2_tail_fun = 2&apos;b01;/*sel_ternary_mp_expr||sel_minus_expr*/
    4&apos;b1000 : in2_tail_fun = 2&apos;b00;/*sel_ternary_mm_expr*/
    default : in2_tail_fun = 2&apos;bxx;
  endcase
end
endfunction
function [1:0] in3_tail_fun;
  input [3:0] value;
begin
  case (value)
    4&apos;b0001 : in3_tail_fun = 2&apos;b00;/*sel_ternary_plus_expr||sel_plus_expr*/
    4&apos;b0010 : in3_tail_fun = 2&apos;b01;/*sel_ternary_pm_expr*/
    4&apos;b0100 : in3_tail_fun = 2&apos;b10;/*sel_ternary_mp_expr||sel_minus_expr*/
    4&apos;b1000 : in3_tail_fun = 2&apos;b00;/*sel_ternary_mm_expr*/
    default : in3_tail_fun = 2&apos;bxx;
  endcase
end
endfunction

// 0001 a + b + c a=00 b=00 c=00
// 0010 a + b - c a=00 b=10 c=01
// 0100 a - b + c a=00 b=01 c=10
// 1000 a - b - c a=11 b=00 c=00
assign alu_decode = alu_decode_fun({sel_ternary_mm_expr,sel_ternary_mp_expr||sel_minus_expr,sel_ternary_pm_expr,sel_ternary_plus_expr||sel_plus_expr});
assign in1_tail = in1_tail_fun({sel_ternary_mm_expr,sel_ternary_mp_expr||sel_minus_expr,sel_ternary_pm_expr,sel_ternary_plus_expr||sel_plus_expr});
assign in2_tail = in2_tail_fun({sel_ternary_mm_expr,sel_ternary_mp_expr||sel_minus_expr,sel_ternary_pm_expr,sel_ternary_plus_expr||sel_plus_expr});
assign in3_tail = in3_tail_fun({sel_ternary_mm_expr,sel_ternary_mp_expr||sel_minus_expr,sel_ternary_pm_expr,sel_ternary_plus_expr||sel_plus_expr});
assign ext_in1 = {1&apos;b0, in1, in1_tail};
assign ext_in2 = {1&apos;b0, in2, in2_tail};
assign ext_in3 = {1&apos;b0, in3, in3_tail};

generate
genvar index_cs;
for (index_cs=0; index_cs&lt;(BITSIZE_out1+2); index_cs=index_cs+1)
  begin : cs_loop
    assign {cs_vector[2*index_cs+1],cs_vector[2*index_cs]} = c5to2({alu_decode,ext_in1[index_cs],ext_in2[index_cs],ext_in3[index_cs]});
  end
endgenerate

assign c_vector[0] = 1&apos;b0;
generate
genvar index_c;
for (index_c=0; index_c&lt;BITSIZE_out1+1; index_c=index_c+1)
  begin : c_loop
    assign c_vector[index_c+1] = cs_vector[2*index_c+1];
  end
endgenerate

generate
genvar index_s;
for (index_s=0; index_s&lt;BITSIZE_out1+2; index_s=index_s+1)
  begin : s_loop
    assign s_vector[index_s] = cs_vector[2*index_s];
  end
endgenerate
assign out1 = (c_vector+s_vector)&gt;&gt;2;"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>pointer_plus_expr_FU</name>
      <operation operation_name="pointer_plus_expr" supported_types="INT:*" commutative="1"/>
      <circuit>
        <component_o id="pointer_plus_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="pointer_plus_expr_FU"/>
          <parameter name="LSB_PARAMETER">-1</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="pointer_plus_expr_FU in1 in2 out1 LSB_PARAMETER" VERILOG_PROVIDED="generate if (BITSIZE_out1 &gt; LSB_PARAMETER) assign out1[BITSIZE_out1-1:LSB_PARAMETER] = (in1[BITSIZE_in1-1:LSB_PARAMETER] + in2[BITSIZE_in2-1:LSB_PARAMETER]); else assign out1 = 0; endgenerate\ngenerate if (LSB_PARAMETER != 0 &amp;&amp; BITSIZE_out1 &gt; LSB_PARAMETER) assign out1[LSB_PARAMETER-1:0] = 0; endgenerate"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_pointer_plus_expr_FU</name>
      <operation operation_name="pointer_plus_expr" supported_types="UINT:*|VECTOR_BOOL:*" commutative="1"/>
      <circuit>
        <component_o id="ui_pointer_plus_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_pointer_plus_expr_FU"/>
          <parameter name="LSB_PARAMETER">-1</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_pointer_plus_expr_FU in1 in2 out1 LSB_PARAMETER" VERILOG_PROVIDED="wire [BITSIZE_out1-1:0] in1_tmp;\nwire [BITSIZE_out1-1:0] in2_tmp;\nassign in1_tmp = in1;\nassign in2_tmp = in2;generate if (BITSIZE_out1 &gt; LSB_PARAMETER) assign out1[BITSIZE_out1-1:LSB_PARAMETER] = (in1_tmp[BITSIZE_out1-1:LSB_PARAMETER] + in2_tmp[BITSIZE_out1-1:LSB_PARAMETER]); else assign out1 = 0; endgenerate\ngenerate if (LSB_PARAMETER != 0 &amp;&amp; BITSIZE_out1 &gt; LSB_PARAMETER) assign out1[LSB_PARAMETER-1:0] = 0; endgenerate" VHDL_PROVIDED="begin\n  out1 &lt;= resize(in1, BITSIZE_out1) + resize(in2, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>truth_orif_expr_FU</name>
      <operation operation_name="truth_orif_expr" commutative="1"/>
      <circuit>
        <component_o id="truth_orif_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="truth_orif_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="truth_orif_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = (in1 != {BITSIZE_in1{1&apos;b0}}) || (in2 != {BITSIZE_in2{1&apos;b0}});" VHDL_PROVIDED="begin\nout1 &lt;= in1 or in2;"/>
        </component_o>
      </circuit>
    </template>
    <cell>
      <name>view_convert_expr_FU</name>
      <operation operation_name="view_convert_expr"  supported_types="INT:*" execution_time="0.0000001"/>
      <circuit>
        <component_o id="view_convert_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="view_convert_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="view_convert_expr_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin\nout1 &lt;= std_logic_vector(resize(signed(in1), BITSIZE_out1));"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_view_convert_expr_FU</name>
      <operation operation_name="view_convert_expr"  supported_types="UINT:*|VECTOR_BOOL:*" execution_time="0.0000001"/>
      <circuit>
        <component_o id="ui_view_convert_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_view_convert_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_view_convert_expr_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin\nout1 &lt;= std_logic_vector(resize(unsigned(in1), BITSIZE_out1));"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>fp_view_convert_expr_FU</name>
      <operation operation_name="view_convert_expr"  supported_types="REAL:*" execution_time="0.0000001"/>
      <circuit>
        <component_o id="fp_view_convert_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="fp_view_convert_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="REAL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="fp_view_convert_expr_FU in1 out1" VERILOG_PROVIDED="assign out1 = in1;" VHDL_PROVIDED="begin\nout1 &lt;= std_logic_vector(resize(unsigned(in1), BITSIZE_out1));"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>UUdata_converter_FU</name>
      <operation operation_name="nop_expr" />
      <circuit>
        <component_o id="UUdata_converter_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="UUdata_converter_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="UUdata_converter_FU in1 out1" VERILOG_PROVIDED="generate\nif (BITSIZE_out1 &lt;= BITSIZE_in1)\nbegin\n  assign out1 = in1[BITSIZE_out1-1:0];\nend\nelse\nbegin\n  assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1&apos;b0}},in1};\nend\nendgenerate" VHDL_PROVIDED="begin\nout1 &lt;= std_logic_vector(resize(unsigned(in1), BITSIZE_out1));"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>UUconvert_expr_FU</name>
      <operation operation_name="convert_expr" />
      <circuit>
        <component_o id="UUconvert_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="UUconvert_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="UUconvert_expr_FU in1 out1" VERILOG_PROVIDED="generate\nif (BITSIZE_out1 &lt;= BITSIZE_in1)\nbegin\n  assign out1 = in1[BITSIZE_out1-1:0];\nend\nelse\nbegin\n  assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1&apos;b0}},in1};\nend\nendgenerate" VHDL_PROVIDED="begin\nout1 &lt;= std_logic_vector(resize(unsigned(in1), BITSIZE_out1));"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>IUdata_converter_FU</name>
      <operation operation_name="nop_expr" />
      <circuit>
        <component_o id="IUdata_converter_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="IUdata_converter_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="IUdata_converter_FU in1 out1" VERILOG_PROVIDED="generate\nif (BITSIZE_out1 &lt;= BITSIZE_in1)\nbegin\n  assign out1 = in1[BITSIZE_out1-1:0];\nend\nelse\nbegin\n  assign out1 = {{(BITSIZE_out1-BITSIZE_in1){in1[BITSIZE_in1-1]}},in1};\nend\nendgenerate" VHDL_PROVIDED="begin\n  process(in1)\n  begin\n    if(BITSIZE_out1 &lt;= BITSIZE_in1) then\n      out1 &lt;= unsigned(in1(BITSIZE_out1-1 downto 0));\n    else\n      out1 &lt;= unsigned(resize(in1, BITSIZE_out1));\n    end if;\n  end process;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>IUconvert_expr_FU</name>
      <operation operation_name="convert_expr" />
      <circuit>
        <component_o id="IUconvert_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="IUconvert_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="IUconvert_expr_FU in1 out1" VERILOG_PROVIDED=
"generate
if (BITSIZE_out1 &lt;= BITSIZE_in1)
begin
  assign out1 = in1[BITSIZE_out1-1:0];
end
else
begin
  assign out1 = {{(BITSIZE_out1-BITSIZE_in1){in1[BITSIZE_in1-1]}},in1};
end
endgenerate" VHDL_PROVIDED=
"begin
 out1 &lt;= unsigned(resize_signed(in1, BITSIZE_out1));
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>UIdata_converter_FU</name>
      <operation operation_name="nop_expr" />
      <circuit>
        <component_o id="UIdata_converter_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="UIdata_converter_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="UIdata_converter_FU in1 out1" VERILOG_PROVIDED="generate\nif (BITSIZE_out1 &lt;= BITSIZE_in1)\nbegin\n  assign out1 = in1[BITSIZE_out1-1:0];\nend\nelse\nbegin\n  assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1&apos;b0}},in1};\nend\nendgenerate" VHDL_PROVIDED="begin\n  process(in1)\n  begin\n    if(BITSIZE_out1 &gt; BITSIZE_in1) then\n      out1 &lt;= signed(resize(in1, BITSIZE_out1));\n    else\n      out1 &lt;= signed(in1 (BITSIZE_out1-1 downto 0));\n    end if;\n  end process;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>UIconvert_expr_FU</name>
      <operation operation_name="convert_expr" />
      <circuit>
        <component_o id="UIconvert_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="UIconvert_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="UIconvert_expr_FU in1 out1" VERILOG_PROVIDED="generate\nif (BITSIZE_out1 &lt;= BITSIZE_in1)\nbegin\n  assign out1 = in1[BITSIZE_out1-1:0];\nend\nelse\nbegin\n  assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1&apos;b0}},in1};\nend\nendgenerate" VHDL_PROVIDED="begin\n  process(in1)\n  begin\n    if(BITSIZE_out1 &gt; BITSIZE_in1) then\n      out1 &lt;= signed(resize(in1, BITSIZE_out1));\n    else\n      out1 &lt;= signed(in1 (BITSIZE_out1-1 downto 0));\n    end if;\n  end process;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>IIdata_converter_FU</name>
      <operation operation_name="nop_expr" />
      <circuit>
        <component_o id="IIdata_converter_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="IIdata_converter_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1" />
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="IIdata_converter_FU in1 out1" VERILOG_PROVIDED="generate\nif (BITSIZE_out1 &lt;= BITSIZE_in1)\nbegin\n  assign out1 = in1[BITSIZE_out1-1:0];\nend\nelse\nbegin\n  assign out1 = {{(BITSIZE_out1-BITSIZE_in1){in1[BITSIZE_in1-1]}},in1};\nend\nendgenerate" VHDL_PROVIDED="begin\n  process(in1)\n  begin\n    if(BITSIZE_out1 &gt; BITSIZE_in1) then\n      out1 &lt;= resize(in1, BITSIZE_out1);\n    else\n      out1 &lt;= in1 (BITSIZE_out1-1 downto 0);\n    end if;\n  end process;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>IIconvert_expr_FU</name>
      <operation operation_name="convert_expr" />
      <circuit>
        <component_o id="IIconvert_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="IIconvert_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="IIconvert_expr_FU in1 out1"
VERILOG_PROVIDED="generate
if (BITSIZE_out1 &lt;= BITSIZE_in1)
begin
  assign out1 = in1[BITSIZE_out1-1:0];
end
else
begin
  assign out1 = {{(BITSIZE_out1-BITSIZE_in1){in1[BITSIZE_in1-1]}},in1};
end
endgenerate"
VHDL_PROVIDED="begin
  process(in1)
  begin
    if(BITSIZE_out1 &gt; BITSIZE_in1) then
      out1 &lt;= resize_signed(in1, BITSIZE_out1);
    else
      out1 &lt;= in1 (BITSIZE_out1-1 downto 0);
    end if;
  end process;"/>
        </component_o>
      </circuit>
    </cell>
    <template>
      <name>gt_expr_FU</name>
      <operation operation_name="gt_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="gt_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="gt_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="gt_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &gt; in2;" VHDL_PROVIDED="begin
out1 &lt;= std_logic_vector(resize(to_unsigned(1, BITSIZE_out1), BITSIZE_out1))  when (signed(in1) &gt; signed(in2)) else (others =&gt; &apos;0&apos;);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_gt_expr_FU</name>
      <operation operation_name="gt_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_gt_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_gt_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_gt_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 &gt; in2;" VHDL_PROVIDED="begin
out1 &lt;= std_logic_vector(resize(to_unsigned(1, BITSIZE_out1), BITSIZE_out1)) when (unsigned(in1) &gt; unsigned(in2)) else (others =&gt; &apos;0&apos;);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>__builtin_abs</name>
      <operation operation_name="abs_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="__builtin_abs">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="__builtin_abs"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="__builtin_abs in1 out1" VERILOG_PROVIDED="assign out1 = in1[BITSIZE_in1-1] ? -in1 : in1;" VHDL_PROVIDED="begin
  out1 &lt;= -resize_signed(in1, BITSIZE_out1) when (in1(BITSIZE_in1-1) = '1') else resize_signed(in1, BITSIZE_out1);
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>bit_not_expr_FU</name>
      <operation operation_name="bit_not_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="bit_not_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="bit_not_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="bit_not_expr_FU in1 out1" VERILOG_PROVIDED="assign out1 = ~in1;" VHDL_PROVIDED="begin
out1 &lt;= not resize_signed(in1, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_bit_not_expr_FU</name>
      <operation operation_name="bit_not_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_bit_not_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_bit_not_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_bit_not_expr_FU in1 out1" VERILOG_PROVIDED="assign out1 = ~in1;" VHDL_PROVIDED="begin
out1 &lt;= not resize(in1, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>truth_or_expr_FU</name>
      <operation operation_name="truth_or_expr"  commutative="1"/>
      <circuit>
        <component_o id="truth_or_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="truth_or_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="truth_or_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 || in2;" VHDL_PROVIDED=
"begin
   process(in1,in2)
   begin
     if(BITSIZE_in1 &gt; BITSIZE_in2) then
        out1 &lt;= std_logic_vector(resize(unsigned(in1 or std_logic_vector(resize(unsigned(in2), BITSIZE_in1))), BITSIZE_out1));
     else
        out1 &lt;= std_logic_vector(resize(unsigned(std_logic_vector(resize(unsigned(in1), BITSIZE_in2)) or in2), BITSIZE_out1));
     end if;
   end process;
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>minus_expr_FU</name>
      <operation operation_name="minus_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="minus_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="minus_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="minus_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 - in2;"  VHDL_PROVIDED="begin
out1 &lt;= resize_signed(in1, BITSIZE_out1) - resize_signed(in2, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_minus_expr_FU</name>
      <operation operation_name="minus_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_minus_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_minus_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_minus_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 - in2;" VHDL_PROVIDED="begin
out1 &lt;= resize(in1, BITSIZE_out1) - resize(in2, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>sat_minus_expr_FU</name>
      <operation operation_name="sat_minus_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="sat_minus_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="sat_minus_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="sat_minus_expr_FU in1 in2 out1" 
VERILOG_PROVIDED="
wire signed [BITSIZE_out1-1:0] sub_tmp;
wire signed [BITSIZE_out1-1:0] mask_max;
wire signed [BITSIZE_out1-1:0] mask_min;
wire cond1, cond2;
assign sub_tmp = in1 - in2;
assign mask_min = {1&apos;b1, {BITSIZE_out1-1{1&apos;b0}}};
assign mask_max = {1&apos;b0, {BITSIZE_out1-1{1&apos;b1}}};
assign cond1 = (!in1[BITSIZE_in1-1])&amp;in2[BITSIZE_in2-1]&amp;sub_tmp[BITSIZE_out1-1];
assign cond2 = in1[BITSIZE_in1-1]&amp;(!in2[BITSIZE_in2-1])&amp;(!sub_tmp[BITSIZE_out1-1]);
assign out1 = cond2 ? mask_min : (cond1 ? mask_max : sub_tmp);
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_sat_minus_expr_FU</name>
      <operation operation_name="sat_minus_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_sat_minus_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_sat_minus_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_sat_minus_expr_FU in1 in2 out1" 
VERILOG_PROVIDED="
wire signed [BITSIZE_out1:0] sub_tmp;
assign sub_tmp = in1 - in2;
assign out1 = sub_tmp[BITSIZE_out1] ? {BITSIZE_out1{1&apos;b0}} : sub_tmp[BITSIZE_out1-1:0];
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ne_expr_FU</name>
      <operation operation_name="ne_expr" supported_types="INT:*" commutative="1"/>
      <circuit>
        <component_o id="ne_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ne_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ne_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 != in2;" VHDL_PROVIDED="signal xs1 : unsigned(in1&apos;range) := (others =&gt; &apos;X&apos;);
signal xs2 : unsigned(in2&apos;range) := (others =&gt; &apos;X&apos;);
begin
  out1 &lt;= (others => &apos;X&apos;) when (not((in1 &gt;= in2) or (in1 &lt;= in2))) else std_logic_vector(resize(to_unsigned(1, BITSIZE_out1), BITSIZE_out1)) when (in1 /= in2) else (others =&gt; &apos;0&apos;);
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_ne_expr_FU</name>
      <operation operation_name="ne_expr" supported_types="UINT:*|VECTOR_BOOL:*" commutative="1"/>
      <circuit>
        <component_o id="ui_ne_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_ne_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_ne_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 != in2;" VHDL_PROVIDED="signal xs1 : unsigned(in1&apos;range) := (others =&gt; &apos;X&apos;);
signal xs2 : unsigned(in2&apos;range) := (others =&gt; &apos;X&apos;);
begin
  out1 &lt;= (others => &apos;X&apos;) when (not((in1 &gt;= in2) or (in1 &lt;= in2))) else std_logic_vector(resize(to_unsigned(1, BITSIZE_out1), BITSIZE_out1)) when (in1 /= in2) else (others =&gt; &apos;0&apos;);
"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>bit_ior_expr_FU</name>
      <operation operation_name="bit_ior_expr" supported_types="INT:*" commutative="1"/>
      <circuit>
        <component_o id="bit_ior_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="bit_ior_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="bit_ior_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 | in2;" VHDL_PROVIDED="begin
out1 &lt;= resize_signed(in1, BITSIZE_out1) or resize_signed(in2, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <template>
      <name>ui_bit_ior_expr_FU</name>
      <operation operation_name="bit_ior_expr" supported_types="UINT:*|VECTOR_BOOL:*" commutative="1"/>
      <circuit>
        <component_o id="ui_bit_ior_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_bit_ior_expr_FU"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_bit_ior_expr_FU in1 in2 out1" VERILOG_PROVIDED="assign out1 = in1 | in2;" VHDL_PROVIDED="begin
out1 &lt;= resize(in1, BITSIZE_out1) or resize(in2, BITSIZE_out1);"/>
        </component_o>
      </circuit>
    </template>
    <cell>
      <name>PRINTF</name>
      <operation operation_name="printf" execution_time="0.0000001" bounded="0"/>
      <operation operation_name="__builtin_printf" execution_time="0.0000001" bounded="0"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <circuit>
        <component_o id="PRINTF">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;, Alessandro Nacci &lt;alenacci@gmail.com&gt;, Gianluca Durelli &lt;durellinux@gmail.com&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="PRINTF"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="var_arg" dir="IN" is_var_args="1">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="sel_printf" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel___builtin_printf" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1" />
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" VERILOG_GENERATOR="PrintfModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>PRINTFN</name>
      <operation operation_name="printf" execution_time="0.0000001" bounded="0"/>
      <operation operation_name="__builtin_printf" execution_time="0.0000001" bounded="0"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <circuit>
        <component_o id="PRINTFN">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="PRINTFN"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="var_arg" dir="IN" is_var_args="1">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="sel_printf" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel___builtin_printf" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1" />
          </port_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <NP_functionality LIBRARY="out1 Min_oe_ram Mout_oe_ram Min_we_ram Mout_we_ram Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size M_DataRdy" VERILOG_GENERATOR="PrintfNModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>PRINTFP1N</name>
      <operation operation_name="printf" execution_time="0.0000001" bounded="0"/>
      <operation operation_name="__builtin_printf" execution_time="0.0000001" bounded="0"/>
      <channels_type>MEM_ACC_P1N</channels_type>
      <circuit>
        <component_o id="PRINTFN">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="PRINTFN"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="var_arg" dir="IN" is_var_args="1">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="sel_printf" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel___builtin_printf" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1" />
          </port_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="access_allowed" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="access_request" dir="OUT" is_memory="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <NP_functionality LIBRARY="out1 Min_oe_ram Mout_oe_ram Min_we_ram Mout_we_ram Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size M_DataRdy access_allowed access_request" IP_COMPONENT="MEMORY_CTRL_P1N" VERILOG_GENERATOR="PrintfP1NModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>PRINTFCS</name>
      <operation operation_name="printf" execution_time="0.0000001" bounded="0"/>
      <operation operation_name="__builtin_printf" execution_time="0.0000001" bounded="0"/>
      <channels_type>MEM_ACC_CS</channels_type>
      <circuit>
        <component_o id="PRINTFN">
          <parameter name="TAG_MEM_REQ">0</parameter>
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="PRINTFN"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="var_arg" dir="IN" is_var_args="1">
            <structural_type_descriptor type="INT" size="1"/>
          </port_o>
          <port_o id="sel_printf" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel___builtin_printf" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
             <structural_type_descriptor type="INT" size="1" />
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Min_tag" dir="IN" is_memory="1" is_global="1" is_extern="1" is_tag_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="request_accepted" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1" >
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1" >
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_tag_ram" dir="OUT" is_memory="1" is_master="1" is_tag_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="out1 M_Rdata_ram M_DataRdy Min_tag request_accepted Mout_oe_ram Mout_we_ram Mout_addr_ram Mout_data_ram_size Mout_Wdata_ram Mout_tag_ram TAG_MEM_REQ" IP_COMPONENT="mem_ctrl_kernel" VERILOG_GENERATOR="PrintfCSModuleGenerator"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>__builtin_llabs</name>
      <operation operation_name="llabs" supported_types="INT:64"/>
      <operation operation_name="__builtin_llabs" supported_types="INT:64"/>
      <circuit>
        <component_o id="__builtin_llabs">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="__builtin_llabs"/>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1" />
            <connected_objects/>
          </port_o>
          <port_o id="sel_llabs" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel___builtin_llabs" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="__builtin_llabs in1 out1" VERILOG_PROVIDED="assign out1 = in1[BITSIZE_in1-1] ? -in1 : in1;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>__builtin_labs</name>
      <operation operation_name="labs" supported_types="INT:*"/>
      <operation operation_name="__builtin_labs" supported_types="INT:*"/>
      <circuit>
        <component_o id="__builtin_labs">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="__builtin_labs"/>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1" />
            <connected_objects/>
          </port_o>
          <port_o id="sel_labs" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel___builtin_labs" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="__builtin_labs in1 out1" VERILOG_PROVIDED="assign out1 = in1[BITSIZE_in1-1] ? -in1 : in1;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>__builtin_putchar</name>
      <operation operation_name="putchar" bounded="0"/>
      <operation operation_name="__builtin_putchar" bounded="0"/>
      <circuit>
        <component_o id="__builtin_putchar">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="__builtin_putchar"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="c" dir="IN">
            <structural_type_descriptor type="UINT" size="32"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_putchar" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel___builtin_putchar" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="return_port" dir="OUT">
            <structural_type_descriptor type="UINT" size="32"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="__builtin_putchar" VERILOG_PROVIDED="reg done_port;
// synthesis translate_off
always @(posedge clock)
  if(start_port == 1&apos;b1)
  begin
    $write(&quot;%c&quot;,c[7:0]);
  end
// synthesis translate_on
always @(posedge clock) done_port &lt;= start_port;
assign return_port=c;" VHDL_PROVIDED="begin
  process(clock)
begin
    if(clock&apos;event and clock = &apos;1&apos;) then
      -- synthesis translate_off
      if(start_port = &apos;1&apos;) then
        write(output, &quot;&quot; &amp; (character&apos;val(to_integer(c))));
      end if;
    -- synthesis translate_on
    done_port &lt;= start_port;
    return_port &lt;= resize(c,32);
  end if;
end process;
"/>
        </component_o>
      </circuit>
    </cell>
  </library>
</technology>
