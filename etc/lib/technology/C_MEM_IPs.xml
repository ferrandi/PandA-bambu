<?xml version="1.0"?>
<technology>
  <library>
    <name>STD_FU</name>
    <cell>
      <name>ARRAY_1D_STD_BRAM</name>
      <attribute name="area" value_type="float64">1</attribute>
      <operation operation_name="LOAD" cycles="2" initiation_time="1"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_UNALIGNED</memory_type>
      <channels_type>MEM_ACC_11</channels_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="BRAM_BITSIZE">32</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM in1 in2 in3 out1 S_addr_ram S_Wdata_ram Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED BRAM_BITSIZE PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY proxy_in1 proxy_in2 proxy_in3 proxy_out1" 
          IP_COMPONENT="ARRAY_1D_STD_BRAM_SP" 
          VERILOG_PROVIDED="
ARRAY_1D_STD_BRAM_SP #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .BRAM_BITSIZE(BRAM_BITSIZE),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .HIGH_LATENCY(0)) ARRAY_1D_STD_BRAM_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" 
VHDL_PROVIDED="  signal sel_LOAD_int : std_logic;
  signal sel_STORE_int : std_logic;
begin
  sel_LOAD_int &lt;= sel_LOAD and in4;
  sel_STORE_int &lt;= sel_STORE and in4;
  ARRAY_1D_STD_BRAM_instance : ARRAY_1D_STD_BRAM_SP generic map(BITSIZE_in1 => BITSIZE_in1, BITSIZE_in2 => BITSIZE_in2, BITSIZE_in3 => BITSIZE_in3, BITSIZE_out1 => BITSIZE_out1, BITSIZE_S_addr_ram => BITSIZE_S_addr_ram, BITSIZE_S_Wdata_ram => BITSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram => BITSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram => BITSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size => BITSIZE_S_data_ram_size, MEMORY_INIT_file => MEMORY_INIT_file, n_elements =>  n_elements, data_size => data_size, address_space_begin => address_space_begin, address_space_rangesize => address_space_rangesize, BUS_PIPELINED => BUS_PIPELINED, BRAM_BITSIZE => BRAM_BITSIZE, PRIVATE_MEMORY => PRIVATE_MEMORY, READ_ONLY_MEMORY=>READ_ONLY_MEMORY, USE_SPARSE_MEMORY => USE_SPARSE_MEMORY, BITSIZE_proxy_in1 => BITSIZE_proxy_in1, BITSIZE_proxy_in2 => BITSIZE_proxy_in2, BITSIZE_proxy_in3 => BITSIZE_proxy_in3, BITSIZE_proxy_out1 => BITSIZE_proxy_out1, HIGH_LATENCY => (0)) port map (out1  => out1, Sout_Rdata_ram => Sout_Rdata_ram, Sout_DataRdy => Sout_DataRdy, proxy_out1 => proxy_out1, clock => clock, reset => reset, in1 => in1, in2 => in2, in3 => in3, sel_LOAD => sel_LOAD_int, sel_STORE => sel_STORE_int, S_oe_ram => S_oe_ram, S_we_ram => S_we_ram, S_addr_ram => S_addr_ram, S_Wdata_ram => S_Wdata_ram, Sin_Rdata_ram => Sin_Rdata_ram, S_data_ram_size => S_data_ram_size, Sin_DataRdy => Sin_DataRdy, proxy_in1 => proxy_in1, proxy_in2 => proxy_in2, proxy_in3 => proxy_in3, proxy_sel_LOAD => proxy_sel_LOAD, proxy_sel_STORE => proxy_sel_STORE);
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_3</name>
      <attribute name="area" value_type="float64">1</attribute>
      <operation operation_name="LOAD" cycles="3" initiation_time="1"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_UNALIGNED</memory_type>
      <channels_type>MEM_ACC_11</channels_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_3"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="BRAM_BITSIZE">32</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_3 in1 in2 in3 out1 S_addr_ram S_Wdata_ram Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED BRAM_BITSIZE PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY proxy_in1 proxy_in2 proxy_in3 proxy_out1" 
          IP_COMPONENT="ARRAY_1D_STD_BRAM_SP" 
          VERILOG_PROVIDED="
ARRAY_1D_STD_BRAM_SP #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .BRAM_BITSIZE(BRAM_BITSIZE),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .HIGH_LATENCY(1)) ARRAY_1D_STD_BRAM_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" 
          VHDL_PROVIDED="
  signal sel_LOAD_int : std_logic;
  signal sel_STORE_int : std_logic;
begin
  sel_LOAD_int &lt;= sel_LOAD and in4;
  sel_STORE_int &lt;= sel_STORE and in4;
  ARRAY_1D_STD_BRAM_instance : ARRAY_1D_STD_BRAM_SP generic map(BITSIZE_in1 => BITSIZE_in1, BITSIZE_in2 => BITSIZE_in2, BITSIZE_in3 => BITSIZE_in3, BITSIZE_out1 => BITSIZE_out1, BITSIZE_S_addr_ram => BITSIZE_S_addr_ram, BITSIZE_S_Wdata_ram => BITSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram => BITSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram => BITSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size => BITSIZE_S_data_ram_size, MEMORY_INIT_file => MEMORY_INIT_file, n_elements =>  n_elements, data_size => data_size, address_space_begin => address_space_begin, address_space_rangesize => address_space_rangesize, BUS_PIPELINED => BUS_PIPELINED, BRAM_BITSIZE => BRAM_BITSIZE, PRIVATE_MEMORY => PRIVATE_MEMORY, READ_ONLY_MEMORY => READ_ONLY_MEMORY, USE_SPARSE_MEMORY => USE_SPARSE_MEMORY, BITSIZE_proxy_in1 => BITSIZE_proxy_in1, BITSIZE_proxy_in2 => BITSIZE_proxy_in2, BITSIZE_proxy_in3 => BITSIZE_proxy_in3, BITSIZE_proxy_out1 => BITSIZE_proxy_out1, HIGH_LATENCY => (1)) port map (out1  => out1, Sout_Rdata_ram => Sout_Rdata_ram, Sout_DataRdy => Sout_DataRdy, proxy_out1 => proxy_out1, clock => clock, reset => reset, in1 => in1, in2 => in2, in3 => in3, sel_LOAD => sel_LOAD_int, sel_STORE => sel_STORE_int, S_oe_ram => S_oe_ram, S_we_ram => S_we_ram, S_addr_ram => S_addr_ram, S_Wdata_ram => S_Wdata_ram, Sin_Rdata_ram => Sin_Rdata_ram, S_data_ram_size => S_data_ram_size, Sin_DataRdy => Sin_DataRdy, proxy_in1 => proxy_in1, proxy_in2 => proxy_in2, proxy_in3 => proxy_in3, proxy_sel_LOAD => proxy_sel_LOAD, proxy_sel_STORE => proxy_sel_STORE);
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_4</name>
      <attribute name="area" value_type="float64">1</attribute>
      <operation operation_name="LOAD" cycles="4" initiation_time="1"/>
      <operation operation_name="STORE" cycles="2" initiation_time="1"/>
      <memory_type>SYNCHRONOUS_UNALIGNED</memory_type>
      <channels_type>MEM_ACC_11</channels_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_4"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="BRAM_BITSIZE">32</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_4 in1 in2 in3 out1 S_addr_ram S_Wdata_ram Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED BRAM_BITSIZE PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY proxy_in1 proxy_in2 proxy_in3 proxy_out1" 
          IP_COMPONENT="ARRAY_1D_STD_BRAM_SP" 
          VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_SP #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .BRAM_BITSIZE(BRAM_BITSIZE),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .HIGH_LATENCY(2)) ARRAY_1D_STD_BRAM_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="  signal sel_LOAD_int : std_logic;
  signal sel_STORE_int : std_logic;
begin
  sel_LOAD_int &lt;= sel_LOAD and in4;
  sel_STORE_int &lt;= sel_STORE and in4;
  ARRAY_1D_STD_BRAM_instance : ARRAY_1D_STD_BRAM_SP generic map(BITSIZE_in1 => BITSIZE_in1, BITSIZE_in2 => BITSIZE_in2, BITSIZE_in3 => BITSIZE_in3, BITSIZE_out1 => BITSIZE_out1, BITSIZE_S_addr_ram => BITSIZE_S_addr_ram, BITSIZE_S_Wdata_ram => BITSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram => BITSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram => BITSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size => BITSIZE_S_data_ram_size, MEMORY_INIT_file => MEMORY_INIT_file, n_elements =>  n_elements, data_size => data_size, address_space_begin => address_space_begin, address_space_rangesize => address_space_rangesize, BUS_PIPELINED => BUS_PIPELINED, BRAM_BITSIZE => BRAM_BITSIZE, PRIVATE_MEMORY => PRIVATE_MEMORY, READ_ONLY_MEMORY => READ_ONLY_MEMORY, USE_SPARSE_MEMORY => USE_SPARSE_MEMORY, BITSIZE_proxy_in1 => BITSIZE_proxy_in1, BITSIZE_proxy_in2 => BITSIZE_proxy_in2, BITSIZE_proxy_in3 => BITSIZE_proxy_in3, BITSIZE_proxy_out1 => BITSIZE_proxy_out1, HIGH_LATENCY => (2)) port map (out1  => out1, Sout_Rdata_ram => Sout_Rdata_ram, Sout_DataRdy => Sout_DataRdy, proxy_out1 => proxy_out1, clock => clock, reset => reset, in1 => in1, in2 => in2, in3 => in3, sel_LOAD => sel_LOAD_int, sel_STORE => sel_STORE_int, S_oe_ram => S_oe_ram, S_we_ram => S_we_ram, S_addr_ram => S_addr_ram, S_Wdata_ram => S_Wdata_ram, Sin_Rdata_ram => Sin_Rdata_ram, S_data_ram_size => S_data_ram_size, Sin_DataRdy => Sin_DataRdy, proxy_in1 => proxy_in1, proxy_in2 => proxy_in2, proxy_in3 => proxy_in3, proxy_sel_LOAD => proxy_sel_LOAD, proxy_sel_STORE => proxy_sel_STORE);
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_SDS</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="2"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_SDS</memory_type>
      <channels_type>MEM_ACC_11</channels_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_SDS">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_SDS"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_SDS in1 in2 in3 out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_out1" 
          IP_COMPONENT="ARRAY_1D_STD_BRAM_SDS_BASE" 
          VERILOG_PROVIDED="
ARRAY_1D_STD_BRAM_SDS_BASE #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .HIGH_LATENCY(0),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="  signal sel_LOAD_int : std_logic;
  signal sel_STORE_int : std_logic;
begin
  sel_LOAD_int &lt;= sel_LOAD and in4;
  sel_STORE_int &lt;= sel_STORE and in4;
  ARRAY_1D_STD_BRAM_instance : ARRAY_1D_STD_BRAM_SDS_BASE generic map(BITSIZE_in1 => BITSIZE_in1, BITSIZE_in2 => BITSIZE_in2, BITSIZE_in3 => BITSIZE_in3, BITSIZE_out1 => BITSIZE_out1, BITSIZE_S_addr_ram => BITSIZE_S_addr_ram, BITSIZE_S_Wdata_ram => BITSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram => BITSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram => BITSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size => BITSIZE_S_data_ram_size, MEMORY_INIT_file => MEMORY_INIT_file, n_elements =>  n_elements, data_size => data_size, address_space_begin => address_space_begin, address_space_rangesize => address_space_rangesize, BUS_PIPELINED => BUS_PIPELINED, PRIVATE_MEMORY => PRIVATE_MEMORY, READ_ONLY_MEMORY => READ_ONLY_MEMORY, USE_SPARSE_MEMORY => USE_SPARSE_MEMORY, HIGH_LATENCY => (0), ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1 => BITSIZE_proxy_in1, BITSIZE_proxy_in2 => BITSIZE_proxy_in2, BITSIZE_proxy_in3 => BITSIZE_proxy_in3, BITSIZE_proxy_out1 => BITSIZE_proxy_out1) port map (out1  => out1, Sout_Rdata_ram => Sout_Rdata_ram, Sout_DataRdy => Sout_DataRdy, proxy_out1 => proxy_out1, clock => clock, reset => reset, in1 => in1, in2 => in2, in3 => in3, sel_LOAD => sel_LOAD_int, sel_STORE => sel_STORE_int, S_oe_ram => S_oe_ram, S_we_ram => S_we_ram, S_addr_ram => S_addr_ram, S_Wdata_ram => S_Wdata_ram, Sin_Rdata_ram => Sin_Rdata_ram, S_data_ram_size => S_data_ram_size, Sin_DataRdy => Sin_DataRdy, proxy_in1 => proxy_in1, proxy_in2 => proxy_in2, proxy_in3 => proxy_in3, proxy_sel_LOAD => proxy_sel_LOAD, proxy_sel_STORE => proxy_sel_STORE);
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_SDS_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="3"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_SDS</memory_type>
      <channels_type>MEM_ACC_11</channels_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_SDS_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_SDS_3"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_SDS_3 in1 in2 in3 out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_out1" 
          IP_COMPONENT="ARRAY_1D_STD_BRAM_SDS_BASE" 
          VERILOG_PROVIDED="
ARRAY_1D_STD_BRAM_SDS_BASE #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .HIGH_LATENCY(1),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="  signal sel_LOAD_int : std_logic;
  signal sel_STORE_int : std_logic;
begin
  sel_LOAD_int &lt;= sel_LOAD and in4;
  sel_STORE_int &lt;= sel_STORE and in4;
  ARRAY_1D_STD_BRAM_instance : ARRAY_1D_STD_BRAM_SDS_BASE generic map(BITSIZE_in1 => BITSIZE_in1, BITSIZE_in2 => BITSIZE_in2, BITSIZE_in3 => BITSIZE_in3, BITSIZE_out1 => BITSIZE_out1, BITSIZE_S_addr_ram => BITSIZE_S_addr_ram, BITSIZE_S_Wdata_ram => BITSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram => BITSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram => BITSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size => BITSIZE_S_data_ram_size, MEMORY_INIT_file => MEMORY_INIT_file, n_elements =>  n_elements, data_size => data_size, address_space_begin => address_space_begin, address_space_rangesize => address_space_rangesize, BUS_PIPELINED => BUS_PIPELINED, PRIVATE_MEMORY => PRIVATE_MEMORY, READ_ONLY_MEMORY => READ_ONLY_MEMORY, USE_SPARSE_MEMORY => USE_SPARSE_MEMORY, HIGH_LATENCY => (1), ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1 => BITSIZE_proxy_in1, BITSIZE_proxy_in2 => BITSIZE_proxy_in2, BITSIZE_proxy_in3 => BITSIZE_proxy_in3, BITSIZE_proxy_out1 => BITSIZE_proxy_out1) port map (out1  => out1, Sout_Rdata_ram => Sout_Rdata_ram, Sout_DataRdy => Sout_DataRdy, proxy_out1 => proxy_out1, clock => clock, reset => reset, in1 => in1, in2 => in2, in3 => in3, sel_LOAD => sel_LOAD_int, sel_STORE => sel_STORE_int, S_oe_ram => S_oe_ram, S_we_ram => S_we_ram, S_addr_ram => S_addr_ram, S_Wdata_ram => S_Wdata_ram, Sin_Rdata_ram => Sin_Rdata_ram, S_data_ram_size => S_data_ram_size, Sin_DataRdy => Sin_DataRdy, proxy_in1 => proxy_in1, proxy_in2 => proxy_in2, proxy_in3 => proxy_in3, proxy_sel_LOAD => proxy_sel_LOAD, proxy_sel_STORE => proxy_sel_STORE);
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_SDS_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <memory_type>SYNCHRONOUS_SDS</memory_type>
      <channels_type>MEM_ACC_11</channels_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_SDS_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_SDS_4"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_SDS_4 in1 in2 in3 out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_SDS_BASE" VERILOG_PROVIDED="
ARRAY_1D_STD_BRAM_SDS_BASE #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .HIGH_LATENCY(2),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="  signal sel_LOAD_int : std_logic;
  signal sel_STORE_int : std_logic;
begin
  sel_LOAD_int &lt;= sel_LOAD and in4;
  sel_STORE_int &lt;= sel_STORE and in4;
  ARRAY_1D_STD_BRAM_instance : ARRAY_1D_STD_BRAM_SDS_BASE generic map(BITSIZE_in1 => BITSIZE_in1, BITSIZE_in2 => BITSIZE_in2, BITSIZE_in3 => BITSIZE_in3, BITSIZE_out1 => BITSIZE_out1, BITSIZE_S_addr_ram => BITSIZE_S_addr_ram, BITSIZE_S_Wdata_ram => BITSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram => BITSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram => BITSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size => BITSIZE_S_data_ram_size, MEMORY_INIT_file => MEMORY_INIT_file, n_elements =>  n_elements, data_size => data_size, address_space_begin => address_space_begin, address_space_rangesize => address_space_rangesize, BUS_PIPELINED => BUS_PIPELINED, PRIVATE_MEMORY => PRIVATE_MEMORY, READ_ONLY_MEMORY => READ_ONLY_MEMORY, USE_SPARSE_MEMORY => USE_SPARSE_MEMORY, HIGH_LATENCY => (2), ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1 => BITSIZE_proxy_in1, BITSIZE_proxy_in2 => BITSIZE_proxy_in2, BITSIZE_proxy_in3 => BITSIZE_proxy_in3, BITSIZE_proxy_out1 => BITSIZE_proxy_out1) port map (out1  => out1, Sout_Rdata_ram => Sout_Rdata_ram, Sout_DataRdy => Sout_DataRdy, proxy_out1 => proxy_out1, clock => clock, reset => reset, in1 => in1, in2 => in2, in3 => in3, sel_LOAD => sel_LOAD_int, sel_STORE => sel_STORE_int, S_oe_ram => S_oe_ram, S_we_ram => S_we_ram, S_addr_ram => S_addr_ram, S_Wdata_ram => S_Wdata_ram, Sin_Rdata_ram => Sin_Rdata_ram, S_data_ram_size => S_data_ram_size, Sin_DataRdy => Sin_DataRdy, proxy_in1 => proxy_in1, proxy_in2 => proxy_in2, proxy_in3 => proxy_in3, proxy_sel_LOAD => proxy_sel_LOAD, proxy_sel_STORE => proxy_sel_STORE);
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_SDS_BUS</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="2"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_SDS_BUS</memory_type>
      <channels_type>MEM_ACC_11</channels_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_SDS_BUS">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_SDS_BUS"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_SDS_BUS in1 in2 in3 out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_out1" 
          IP_COMPONENT="ARRAY_1D_STD_BRAM_SDS_BUS_BASE" 
          VERILOG_PROVIDED="
ARRAY_1D_STD_BRAM_SDS_BUS_BASE #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .HIGH_LATENCY(0),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="  signal sel_LOAD_int : std_logic;
  signal sel_STORE_int : std_logic;
begin
  sel_LOAD_int &lt;= sel_LOAD and in4;
  sel_STORE_int &lt;= sel_STORE and in4;

ARRAY_1D_STD_BRAM_instance : ARRAY_1D_STD_BRAM_SDS_BUS_BASE generic map(BITSIZE_in1 => BITSIZE_in1, BITSIZE_in2 => BITSIZE_in2, BITSIZE_in3 => BITSIZE_in3, BITSIZE_out1 => BITSIZE_out1, BITSIZE_S_addr_ram => BITSIZE_S_addr_ram, BITSIZE_S_Wdata_ram => BITSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram => BITSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram => BITSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size => BITSIZE_S_data_ram_size, MEMORY_INIT_file => MEMORY_INIT_file, n_elements =>  n_elements, data_size => data_size, address_space_begin => address_space_begin, address_space_rangesize => address_space_rangesize, BUS_PIPELINED => BUS_PIPELINED, PRIVATE_MEMORY => PRIVATE_MEMORY, READ_ONLY_MEMORY => READ_ONLY_MEMORY, USE_SPARSE_MEMORY => USE_SPARSE_MEMORY, HIGH_LATENCY => (0), ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1 => BITSIZE_proxy_in1, BITSIZE_proxy_in2 => BITSIZE_proxy_in2, BITSIZE_proxy_in3 => BITSIZE_proxy_in3, BITSIZE_proxy_out1 => BITSIZE_proxy_out1) port map (out1  => out1, Sout_Rdata_ram => Sout_Rdata_ram, Sout_DataRdy => Sout_DataRdy, proxy_out1 => proxy_out1, clock => clock, reset => reset, in1 => in1, in2 => in2, in3 => in3, sel_LOAD => sel_LOAD_int, sel_STORE => sel_STORE_int, S_oe_ram => S_oe_ram, S_we_ram => S_we_ram, S_addr_ram => S_addr_ram, S_Wdata_ram => S_Wdata_ram, Sin_Rdata_ram => Sin_Rdata_ram, S_data_ram_size => S_data_ram_size, Sin_DataRdy => Sin_DataRdy, proxy_in1 => proxy_in1, proxy_in2 => proxy_in2, proxy_in3 => proxy_in3, proxy_sel_LOAD => proxy_sel_LOAD, proxy_sel_STORE => proxy_sel_STORE);
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_SDS_BUS_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="3"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_SDS_BUS</memory_type>
      <channels_type>MEM_ACC_11</channels_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_SDS_BUS_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_SDS_BUS_3"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_SDS_BUS_3 in1 in2 in3 out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_out1" 
          IP_COMPONENT="ARRAY_1D_STD_BRAM_SDS_BUS_BASE" 
          VERILOG_PROVIDED="
ARRAY_1D_STD_BRAM_SDS_BUS_BASE #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .HIGH_LATENCY(1),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="  signal sel_LOAD_int : std_logic;
  signal sel_STORE_int : std_logic;
begin
  sel_LOAD_int &lt;= sel_LOAD and in4;
  sel_STORE_int &lt;= sel_STORE and in4;

ARRAY_1D_STD_BRAM_instance : ARRAY_1D_STD_BRAM_SDS_BUS_BASE generic map(BITSIZE_in1 => BITSIZE_in1, BITSIZE_in2 => BITSIZE_in2, BITSIZE_in3 => BITSIZE_in3, BITSIZE_out1 => BITSIZE_out1, BITSIZE_S_addr_ram => BITSIZE_S_addr_ram, BITSIZE_S_Wdata_ram => BITSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram => BITSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram => BITSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size => BITSIZE_S_data_ram_size, MEMORY_INIT_file => MEMORY_INIT_file, n_elements =>  n_elements, data_size => data_size, address_space_begin => address_space_begin, address_space_rangesize => address_space_rangesize, BUS_PIPELINED => BUS_PIPELINED, PRIVATE_MEMORY => PRIVATE_MEMORY, READ_ONLY_MEMORY => READ_ONLY_MEMORY, USE_SPARSE_MEMORY => USE_SPARSE_MEMORY, HIGH_LATENCY => (1), ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1 => BITSIZE_proxy_in1, BITSIZE_proxy_in2 => BITSIZE_proxy_in2, BITSIZE_proxy_in3 => BITSIZE_proxy_in3, BITSIZE_proxy_out1 => BITSIZE_proxy_out1) port map (out1  => out1, Sout_Rdata_ram => Sout_Rdata_ram, Sout_DataRdy => Sout_DataRdy, proxy_out1 => proxy_out1, clock => clock, reset => reset, in1 => in1, in2 => in2, in3 => in3, sel_LOAD => sel_LOAD_int, sel_STORE => sel_STORE_int, S_oe_ram => S_oe_ram, S_we_ram => S_we_ram, S_addr_ram => S_addr_ram, S_Wdata_ram => S_Wdata_ram, Sin_Rdata_ram => Sin_Rdata_ram, S_data_ram_size => S_data_ram_size, Sin_DataRdy => Sin_DataRdy, proxy_in1 => proxy_in1, proxy_in2 => proxy_in2, proxy_in3 => proxy_in3, proxy_sel_LOAD => proxy_sel_LOAD, proxy_sel_STORE => proxy_sel_STORE);
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_SDS_BUS_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <memory_type>SYNCHRONOUS_SDS_BUS</memory_type>
      <channels_type>MEM_ACC_11</channels_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_SDS_BUS_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_SDS_BUS_4"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_SDS_BUS_4 in1 in2 in3 out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_out1" 
          IP_COMPONENT="ARRAY_1D_STD_BRAM_SDS_BUS_BASE" 
          VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_SDS_BUS_BASE #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .HIGH_LATENCY(2),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="  signal sel_LOAD_int : std_logic;
  signal sel_STORE_int : std_logic;
begin
  sel_LOAD_int &lt;= sel_LOAD and in4;
  sel_STORE_int &lt;= sel_STORE and in4;

ARRAY_1D_STD_BRAM_instance : ARRAY_1D_STD_BRAM_SDS_BUS_BASE generic map(BITSIZE_in1 => BITSIZE_in1, BITSIZE_in2 => BITSIZE_in2, BITSIZE_in3 => BITSIZE_in3, BITSIZE_out1 => BITSIZE_out1, BITSIZE_S_addr_ram => BITSIZE_S_addr_ram, BITSIZE_S_Wdata_ram => BITSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram => BITSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram => BITSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size => BITSIZE_S_data_ram_size, MEMORY_INIT_file => MEMORY_INIT_file, n_elements =>  n_elements, data_size => data_size, address_space_begin => address_space_begin, address_space_rangesize => address_space_rangesize, BUS_PIPELINED => BUS_PIPELINED, PRIVATE_MEMORY => PRIVATE_MEMORY, READ_ONLY_MEMORY => READ_ONLY_MEMORY, USE_SPARSE_MEMORY => USE_SPARSE_MEMORY, HIGH_LATENCY => (2), ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1 => BITSIZE_proxy_in1, BITSIZE_proxy_in2 => BITSIZE_proxy_in2, BITSIZE_proxy_in3 => BITSIZE_proxy_in3, BITSIZE_proxy_out1 => BITSIZE_proxy_out1) port map (out1  => out1, Sout_Rdata_ram => Sout_Rdata_ram, Sout_DataRdy => Sout_DataRdy, proxy_out1 => proxy_out1, clock => clock, reset => reset, in1 => in1, in2 => in2, in3 => in3, sel_LOAD => sel_LOAD_int, sel_STORE => sel_STORE_int, S_oe_ram => S_oe_ram, S_we_ram => S_we_ram, S_addr_ram => S_addr_ram, S_Wdata_ram => S_Wdata_ram, Sin_Rdata_ram => Sin_Rdata_ram, S_data_ram_size => S_data_ram_size, Sin_DataRdy => Sin_DataRdy, proxy_in1 => proxy_in1, proxy_in2 => proxy_in2, proxy_in3 => proxy_in3, proxy_sel_LOAD => proxy_sel_LOAD, proxy_sel_STORE => proxy_sel_STORE);
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_N1</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="2"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_UNALIGNED</memory_type>
      <channels_type>MEM_ACC_N1</channels_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_N1">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_N1"/>
          <parameter name="MEMORY_INIT_file_a">&quot;&quot;array_a.mem&quot;&quot;</parameter>
          <parameter name="MEMORY_INIT_file_b">&quot;&quot;array_b.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="BRAM_BITSIZE">32</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_N1 in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file_a MEMORY_INIT_file_b n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED BRAM_BITSIZE PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_N1_SP" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_N1_SP #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .MEMORY_INIT_file_a(MEMORY_INIT_file_a),
  .MEMORY_INIT_file_b(MEMORY_INIT_file_b),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .BRAM_BITSIZE(BRAM_BITSIZE),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1),
  .HIGH_LATENCY(0)) ARRAY_1D_STD_BRAM_N1_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="signal int_sel_LOAD : std_logic_vector(PORTSIZE_sel_LOAD-1 downto 0);
signal int_sel_STORE : std_logic_vector(PORTSIZE_sel_STORE-1 downto 0);
begin
int_sel_STORE &lt;= sel_STORE and in4;
int_sel_LOAD &lt;= sel_LOAD and in4;
ARRAY_1D_STD_BRAM_N1_instance : ARRAY_1D_STD_BRAM_N1_SP generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, MEMORY_INIT_file_a=&gt;MEMORY_INIT_file_a, MEMORY_INIT_file_b=&gt;MEMORY_INIT_file_b, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, BRAM_BITSIZE=&gt;BRAM_BITSIZE, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1, HIGH_LATENCY=&gt;0) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, sel_LOAD=&gt;int_sel_LOAD, sel_STORE=&gt;int_sel_STORE, S_oe_ram=&gt;S_oe_ram, S_we_ram=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_N1_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="3"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_UNALIGNED</memory_type>
      <channels_type>MEM_ACC_N1</channels_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_N1_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_N1_3"/>
          <parameter name="MEMORY_INIT_file_a">&quot;&quot;array_a.mem&quot;&quot;</parameter>
          <parameter name="MEMORY_INIT_file_b">&quot;&quot;array_b.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="BRAM_BITSIZE">32</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_N1_3 in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file_a MEMORY_INIT_file_b n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED BRAM_BITSIZE PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_N1_SP" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_N1_SP #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .MEMORY_INIT_file_a(MEMORY_INIT_file_a),
  .MEMORY_INIT_file_b(MEMORY_INIT_file_b),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .BRAM_BITSIZE(BRAM_BITSIZE),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1),
  .HIGH_LATENCY(1)) ARRAY_1D_STD_BRAM_N1_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="signal int_sel_LOAD : std_logic_vector(PORTSIZE_sel_LOAD-1 downto 0);
signal int_sel_STORE : std_logic_vector(PORTSIZE_sel_STORE-1 downto 0);
begin
int_sel_STORE &lt;= sel_STORE and in4;
int_sel_LOAD &lt;= sel_LOAD and in4;
ARRAY_1D_STD_BRAM_N1_instance : ARRAY_1D_STD_BRAM_N1_SP generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, MEMORY_INIT_file_a=&gt;MEMORY_INIT_file_a, MEMORY_INIT_file_b=&gt;MEMORY_INIT_file_b, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, BRAM_BITSIZE=&gt;BRAM_BITSIZE, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1, HIGH_LATENCY=&gt;1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, sel_LOAD=&gt;int_sel_LOAD, sel_STORE=&gt;int_sel_STORE, S_oe_ram=&gt;S_oe_ram, S_we_ram=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_N1_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <memory_type>SYNCHRONOUS_UNALIGNED</memory_type>
      <channels_type>MEM_ACC_N1</channels_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_N1_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_N1_4"/>
          <parameter name="MEMORY_INIT_file_a">&quot;&quot;array_a.mem&quot;&quot;</parameter>
          <parameter name="MEMORY_INIT_file_b">&quot;&quot;array_b.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="BRAM_BITSIZE">32</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_N1_4 in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file_a MEMORY_INIT_file_b n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED BRAM_BITSIZE PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_N1_SP" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_N1_SP #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .MEMORY_INIT_file_a(MEMORY_INIT_file_a),
  .MEMORY_INIT_file_b(MEMORY_INIT_file_b),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .BRAM_BITSIZE(BRAM_BITSIZE),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1),
  .HIGH_LATENCY(2)) ARRAY_1D_STD_BRAM_N1_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="signal int_sel_LOAD : std_logic_vector(PORTSIZE_sel_LOAD-1 downto 0);
signal int_sel_STORE : std_logic_vector(PORTSIZE_sel_STORE-1 downto 0);
begin
int_sel_STORE &lt;= sel_STORE and in4;
int_sel_LOAD &lt;= sel_LOAD and in4;
ARRAY_1D_STD_BRAM_N1_instance : ARRAY_1D_STD_BRAM_N1_SP generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, MEMORY_INIT_file_a=&gt;MEMORY_INIT_file_a, MEMORY_INIT_file_b=&gt;MEMORY_INIT_file_b, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, BRAM_BITSIZE=&gt;BRAM_BITSIZE, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1, HIGH_LATENCY=&gt;2) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, sel_LOAD=&gt;int_sel_LOAD, sel_STORE=&gt;int_sel_STORE, S_oe_ram=&gt;S_oe_ram, S_we_ram=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_N1_SDS</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="2"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_SDS</memory_type>
      <channels_type>MEM_ACC_N1</channels_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_N1_SDS">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_N1_SDS"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <cconnected_objects/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_N1_SDS in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" 
          IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SDS" VERILOG_PROVIDED="
ARRAY_1D_STD_BRAM_NN_SDS #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_in4(BITSIZE_in4),
  .PORTSIZE_in4(PORTSIZE_in4),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(1),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(1),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(1),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(1),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(1),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(1),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(1),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(1),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(1),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size ),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="begin
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SDS generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_in4=&gt;BITSIZE_in4, PORTSIZE_in4=&gt;PORTSIZE_in4, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;1, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;1, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;1, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;1, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;1, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;1, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;1, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;1, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;1, MEMORY_INIT_file=&gt;MEMORY_INIT_file, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy(0)=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, in4=&gt;in4, sel_LOAD=&gt;sel_LOAD, sel_STORE=&gt;sel_STORE, S_oe_ram(0)=&gt;S_oe_ram, S_we_ram(0)=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy(0)=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_N1_SDS_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="3"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_SDS</memory_type>
      <channels_type>MEM_ACC_N1</channels_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_N1_SDS_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_N1_SDS_3"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_N1_SDS_3 in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SDS_3" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_NN_SDS_3 #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_in4(BITSIZE_in4),
  .PORTSIZE_in4(PORTSIZE_in4),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(1),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(1),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(1),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(1),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(1),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(1),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(1),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(1),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(1),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size ),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="begin
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SDS_3 generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_in4=&gt;BITSIZE_in4, PORTSIZE_in4=&gt;PORTSIZE_in4, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;1, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;1, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;1, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;1, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;1, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;1, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;1, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;1, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;1, MEMORY_INIT_file=&gt;MEMORY_INIT_file, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy(0)=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, in4=&gt;in4, sel_LOAD=&gt;sel_LOAD, sel_STORE=&gt;sel_STORE, S_oe_ram(0)=&gt;S_oe_ram, S_we_ram(0)=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy(0)=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_N1_SDS_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <memory_type>SYNCHRONOUS_SDS</memory_type>
      <channels_type>MEM_ACC_N1</channels_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_N1_SDS_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_N1_SDS_4"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_N1_SDS_4 in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SDS_4" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_NN_SDS_4 #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_in4(BITSIZE_in4),
  .PORTSIZE_in4(PORTSIZE_in4),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(1),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(1),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(1),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(1),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(1),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(1),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(1),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(1),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(1),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size ),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="begin
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SDS_4 generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_in4=&gt;BITSIZE_in4, PORTSIZE_in4=&gt;PORTSIZE_in4, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;1, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;1, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;1, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;1, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;1, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;1, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;1, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;1, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;1, MEMORY_INIT_file=&gt;MEMORY_INIT_file, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy(0)=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, in4=&gt;in4, sel_LOAD=&gt;sel_LOAD, sel_STORE=&gt;sel_STORE, S_oe_ram(0)=&gt;S_oe_ram, S_we_ram(0)=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy(0)=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_N1_SDS_BUS</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="2"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_SDS_BUS</memory_type>
      <channels_type>MEM_ACC_N1</channels_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_N1_SDS_BUS">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_N1_SDS_BUS"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_N1_SDS_BUS in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SDS_BUS" VERILOG_PROVIDED="
ARRAY_1D_STD_BRAM_NN_SDS_BUS #(
  .BITSIZE_in1(BITSIZE_in1),
.PORTSIZE_in1(PORTSIZE_in1),
.BITSIZE_in2(BITSIZE_in2),
.PORTSIZE_in2(PORTSIZE_in2),
.BITSIZE_in3(BITSIZE_in3),
.PORTSIZE_in3(PORTSIZE_in3),
.BITSIZE_in4(BITSIZE_in4),
.PORTSIZE_in4(PORTSIZE_in4),
.BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
.PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(1),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(1),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(1),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(1),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(1),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(1),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(1),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(1),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(1),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size ),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="begin
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SDS_BUS generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_in4=&gt;BITSIZE_in4, PORTSIZE_in4=&gt;PORTSIZE_in4, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;1, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;1, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;1, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;1, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;1, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;1, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;1, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;1, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;1, MEMORY_INIT_file=&gt;MEMORY_INIT_file, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy(0)=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, in4=&gt;in4, sel_LOAD=&gt;sel_LOAD, sel_STORE=&gt;sel_STORE, S_oe_ram(0)=&gt;S_oe_ram, S_we_ram(0)=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy(0)=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_N1_SDS_BUS_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="3"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_SDS_BUS</memory_type>
      <channels_type>MEM_ACC_N1</channels_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_N1_SDS_BUS_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_N1_SDS_BUS_3"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_N1_SDS_BUS_3 in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SDS_BUS_3" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_NN_SDS_BUS_3 #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_in4(BITSIZE_in4),
  .PORTSIZE_in4(PORTSIZE_in4),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(1),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(1),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(1),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(1),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(1),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(1),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(1),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(1),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(1),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size ),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="begin
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SDS_BUS_3 generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_in4=&gt;BITSIZE_in4, PORTSIZE_in4=&gt;PORTSIZE_in4, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;1, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;1, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;1, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;1, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;1, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;1, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;1, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;1, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;1, MEMORY_INIT_file=&gt;MEMORY_INIT_file, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy(0)=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, in4=&gt;in4, sel_LOAD=&gt;sel_LOAD, sel_STORE=&gt;sel_STORE, S_oe_ram(0)=&gt;S_oe_ram, S_we_ram(0)=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy(0)=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_N1_SDS_BUS_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <memory_type>SYNCHRONOUS_SDS_BUS</memory_type>
      <channels_type>MEM_ACC_N1</channels_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_N1_SDS_BUS_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_N1_SDS_BUS_4"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_N1_SDS_BUS_4 in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SDS_BUS_4" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_NN_SDS_BUS_4 #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_in4(BITSIZE_in4),
  .PORTSIZE_in4(PORTSIZE_in4),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(1),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(1),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(1),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(1),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(1),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(1),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(1),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(1),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(1),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="begin
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SDS_BUS_4 generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_in4=&gt;BITSIZE_in4, PORTSIZE_in4=&gt;PORTSIZE_in4, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;1, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;1, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;1, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;1, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;1, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;1, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;1, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;1, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;1, MEMORY_INIT_file=&gt;MEMORY_INIT_file, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy(0)=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, in4=&gt;in4, sel_LOAD=&gt;sel_LOAD, sel_STORE=&gt;sel_STORE, S_oe_ram(0)=&gt;S_oe_ram, S_we_ram(0)=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy(0)=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_NN</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="2"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_UNALIGNED</memory_type>
      <channels_type>MEM_ACC_NN</channels_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_NN">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_NN"/>
          <parameter name="MEMORY_INIT_file_a">&quot;&quot;array_a.mem&quot;&quot;</parameter>
          <parameter name="MEMORY_INIT_file_b">&quot;&quot;array_b.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="BRAM_BITSIZE">32</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_NN in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file_a MEMORY_INIT_file_b n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED BRAM_BITSIZE PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SP" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_NN_SP #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(PORTSIZE_S_oe_ram),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(PORTSIZE_S_we_ram),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(PORTSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(PORTSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(PORTSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(PORTSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(PORTSIZE_S_data_ram_size),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(PORTSIZE_Sin_DataRdy),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(PORTSIZE_Sout_DataRdy),
  .MEMORY_INIT_file_a(MEMORY_INIT_file_a),
  .MEMORY_INIT_file_b(MEMORY_INIT_file_b),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .BRAM_BITSIZE(BRAM_BITSIZE),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1),
  .HIGH_LATENCY(0)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="signal int_sel_LOAD : std_logic_vector(PORTSIZE_sel_LOAD-1 downto 0);
signal int_sel_STORE : std_logic_vector(PORTSIZE_sel_STORE-1 downto 0);
begin
int_sel_STORE &lt;= sel_STORE and in4;
int_sel_LOAD &lt;= sel_LOAD and in4;
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SP generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;PORTSIZE_S_oe_ram, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;PORTSIZE_S_we_ram, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;PORTSIZE_S_addr_ram, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;PORTSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;PORTSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;PORTSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;PORTSIZE_S_data_ram_size, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;PORTSIZE_Sin_DataRdy, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;PORTSIZE_Sout_DataRdy, MEMORY_INIT_file_a=&gt;MEMORY_INIT_file_a, MEMORY_INIT_file_b=&gt;MEMORY_INIT_file_b, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, BRAM_BITSIZE=&gt;BRAM_BITSIZE, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1, HIGH_LATENCY=&gt;0) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, sel_LOAD=&gt;int_sel_LOAD, sel_STORE=&gt;int_sel_STORE, S_oe_ram=&gt;S_oe_ram, S_we_ram=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_NN_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="3"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_UNALIGNED</memory_type>
      <channels_type>MEM_ACC_NN</channels_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_NN_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_NN_3"/>
          <parameter name="MEMORY_INIT_file_a">&quot;&quot;array_a.mem&quot;&quot;</parameter>
          <parameter name="MEMORY_INIT_file_b">&quot;&quot;array_b.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="BRAM_BITSIZE">32</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_NN_3 in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file_a MEMORY_INIT_file_b n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED BRAM_BITSIZE PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SP" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_NN_SP #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(PORTSIZE_S_oe_ram),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(PORTSIZE_S_we_ram),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(PORTSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(PORTSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(PORTSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(PORTSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(PORTSIZE_S_data_ram_size),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(PORTSIZE_Sin_DataRdy),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(PORTSIZE_Sout_DataRdy),
  .MEMORY_INIT_file_a(MEMORY_INIT_file_a),
  .MEMORY_INIT_file_b(MEMORY_INIT_file_b),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .BRAM_BITSIZE(BRAM_BITSIZE),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1),
  .HIGH_LATENCY(1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="signal int_sel_LOAD : std_logic_vector(PORTSIZE_sel_LOAD-1 downto 0);
signal int_sel_STORE : std_logic_vector(PORTSIZE_sel_STORE-1 downto 0);
begin
int_sel_STORE &lt;= sel_STORE and in4;
int_sel_LOAD &lt;= sel_LOAD and in4;
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SP generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;PORTSIZE_S_oe_ram, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;PORTSIZE_S_we_ram, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;PORTSIZE_S_addr_ram, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;PORTSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;PORTSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;PORTSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;PORTSIZE_S_data_ram_size, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;PORTSIZE_Sin_DataRdy, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;PORTSIZE_Sout_DataRdy, MEMORY_INIT_file_a=&gt;MEMORY_INIT_file_a, MEMORY_INIT_file_b=&gt;MEMORY_INIT_file_b, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, BRAM_BITSIZE=&gt;BRAM_BITSIZE, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1, HIGH_LATENCY=&gt;1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, sel_LOAD=&gt;int_sel_LOAD, sel_STORE=&gt;int_sel_STORE, S_oe_ram=&gt;S_oe_ram, S_we_ram=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_NN_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <memory_type>SYNCHRONOUS_UNALIGNED</memory_type>
      <channels_type>MEM_ACC_NN</channels_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_NN_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_NN_4"/>
          <parameter name="MEMORY_INIT_file_a">&quot;&quot;array_a.mem&quot;&quot;</parameter>
          <parameter name="MEMORY_INIT_file_b">&quot;&quot;array_b.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="BRAM_BITSIZE">32</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_NN_4 in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file_a MEMORY_INIT_file_b n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED BRAM_BITSIZE PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SP" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_NN_SP #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(PORTSIZE_S_oe_ram),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(PORTSIZE_S_we_ram),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(PORTSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(PORTSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(PORTSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(PORTSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(PORTSIZE_S_data_ram_size),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(PORTSIZE_Sin_DataRdy),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(PORTSIZE_Sout_DataRdy),
  .MEMORY_INIT_file_a(MEMORY_INIT_file_a),
  .MEMORY_INIT_file_b(MEMORY_INIT_file_b),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .BRAM_BITSIZE(BRAM_BITSIZE),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1),
  .HIGH_LATENCY(2)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="signal int_sel_LOAD : std_logic_vector(PORTSIZE_sel_LOAD-1 downto 0);
signal int_sel_STORE : std_logic_vector(PORTSIZE_sel_STORE-1 downto 0);
begin
int_sel_STORE &lt;= sel_STORE and in4;
int_sel_LOAD &lt;= sel_LOAD and in4;
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SP generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;PORTSIZE_S_oe_ram, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;PORTSIZE_S_we_ram, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;PORTSIZE_S_addr_ram, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;PORTSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;PORTSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;PORTSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;PORTSIZE_S_data_ram_size, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;PORTSIZE_Sin_DataRdy, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;PORTSIZE_Sout_DataRdy, MEMORY_INIT_file_a=&gt;MEMORY_INIT_file_a, MEMORY_INIT_file_b=&gt;MEMORY_INIT_file_b, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, BRAM_BITSIZE=&gt;BRAM_BITSIZE, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1, HIGH_LATENCY=&gt;2) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, sel_LOAD=&gt;int_sel_LOAD, sel_STORE=&gt;int_sel_STORE, S_oe_ram=&gt;S_oe_ram, S_we_ram=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_NN_SDS</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="2"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_SDS</memory_type>
      <channels_type>MEM_ACC_NN</channels_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_NN_SDS">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_NN_SDS"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_NN_SDS in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SDS_BASE" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_NN_SDS_BASE #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(PORTSIZE_S_oe_ram),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(PORTSIZE_S_we_ram),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(PORTSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(PORTSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(PORTSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(PORTSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(PORTSIZE_S_data_ram_size),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(PORTSIZE_Sin_DataRdy),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(PORTSIZE_Sout_DataRdy),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .HIGH_LATENCY(0),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size ),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="signal int_sel_LOAD : std_logic_vector(PORTSIZE_sel_LOAD-1 downto 0);
signal int_sel_STORE : std_logic_vector(PORTSIZE_sel_STORE-1 downto 0);
begin
int_sel_STORE &lt;= sel_STORE and in4;
int_sel_LOAD &lt;= sel_LOAD and in4;
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SDS_BASE generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;PORTSIZE_S_oe_ram, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;PORTSIZE_S_we_ram, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;PORTSIZE_S_addr_ram, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;PORTSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;PORTSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;PORTSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;PORTSIZE_S_data_ram_size, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;PORTSIZE_Sin_DataRdy, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;PORTSIZE_Sout_DataRdy, MEMORY_INIT_file=&gt;MEMORY_INIT_file, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, HIGH_LATENCY=&gt;0, ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, sel_LOAD=&gt;int_sel_LOAD, sel_STORE=&gt;int_sel_STORE, S_oe_ram=&gt;S_oe_ram, S_we_ram=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_NN_SDS_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="3"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_SDS</memory_type>
      <channels_type>MEM_ACC_NN</channels_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_NN_SDS_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_NN_SDS_3"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_NN_SDS_3 in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SDS_BASE" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_NN_SDS_BASE #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(PORTSIZE_S_oe_ram),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(PORTSIZE_S_we_ram),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(PORTSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(PORTSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(PORTSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(PORTSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(PORTSIZE_S_data_ram_size),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(PORTSIZE_Sin_DataRdy),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(PORTSIZE_Sout_DataRdy),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .HIGH_LATENCY(1),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size ),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="signal int_sel_LOAD : std_logic_vector(PORTSIZE_sel_LOAD-1 downto 0);
signal int_sel_STORE : std_logic_vector(PORTSIZE_sel_STORE-1 downto 0);
begin
int_sel_STORE &lt;= sel_STORE and in4;
int_sel_LOAD &lt;= sel_LOAD and in4;
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SDS_BASE generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;PORTSIZE_S_oe_ram, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;PORTSIZE_S_we_ram, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;PORTSIZE_S_addr_ram, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;PORTSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;PORTSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;PORTSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;PORTSIZE_S_data_ram_size, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;PORTSIZE_Sin_DataRdy, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;PORTSIZE_Sout_DataRdy, MEMORY_INIT_file=&gt;MEMORY_INIT_file, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, HIGH_LATENCY=&gt;1, ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, sel_LOAD=&gt;int_sel_LOAD, sel_STORE=&gt;int_sel_STORE, S_oe_ram=&gt;S_oe_ram, S_we_ram=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_NN_SDS_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <memory_type>SYNCHRONOUS_SDS</memory_type>
      <channels_type>MEM_ACC_NN</channels_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_NN_SDS_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_NN_SDS_4"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_NN_SDS_4 in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SDS_BASE" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_NN_SDS_BASE #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(PORTSIZE_S_oe_ram),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(PORTSIZE_S_we_ram),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(PORTSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(PORTSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(PORTSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(PORTSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(PORTSIZE_S_data_ram_size),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(PORTSIZE_Sin_DataRdy),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(PORTSIZE_Sout_DataRdy),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .HIGH_LATENCY(2),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size ),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="signal int_sel_LOAD : std_logic_vector(PORTSIZE_sel_LOAD-1 downto 0);
signal int_sel_STORE : std_logic_vector(PORTSIZE_sel_STORE-1 downto 0);
begin
int_sel_STORE &lt;= sel_STORE and in4;
int_sel_LOAD &lt;= sel_LOAD and in4;
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SDS_BASE generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;PORTSIZE_S_oe_ram, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;PORTSIZE_S_we_ram, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;PORTSIZE_S_addr_ram, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;PORTSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;PORTSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;PORTSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;PORTSIZE_S_data_ram_size, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;PORTSIZE_Sin_DataRdy, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;PORTSIZE_Sout_DataRdy, MEMORY_INIT_file=&gt;MEMORY_INIT_file, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, HIGH_LATENCY=&gt;2, ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, sel_LOAD=&gt;int_sel_LOAD, sel_STORE=&gt;int_sel_STORE, S_oe_ram=&gt;S_oe_ram, S_we_ram=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_NN_SDS_BUS</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="2"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_SDS_BUS</memory_type>
      <channels_type>MEM_ACC_NN</channels_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_NN_SDS_BUS">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_NN_SDS_BUS"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_NN_SDS_BUS in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SDS_BUS_BASE" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_NN_SDS_BUS_BASE #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3), 
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE), 
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(PORTSIZE_S_oe_ram),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(PORTSIZE_S_we_ram), 
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(PORTSIZE_S_addr_ram), 
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(PORTSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram), 
  .PORTSIZE_Sin_Rdata_ram(PORTSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(PORTSIZE_Sout_Rdata_ram), 
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(PORTSIZE_S_data_ram_size),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy), 
  .PORTSIZE_Sin_DataRdy(PORTSIZE_Sin_DataRdy),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(PORTSIZE_Sout_DataRdy), 
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize), 
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .HIGH_LATENCY(0),
  .ALIGNMENT(ALIGNMENT), 
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2), 
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD), 
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE), 
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size ),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="signal int_sel_LOAD : std_logic_vector(PORTSIZE_sel_LOAD-1 downto 0);
signal int_sel_STORE : std_logic_vector(PORTSIZE_sel_STORE-1 downto 0);
begin
int_sel_STORE &lt;= sel_STORE and in4;
int_sel_LOAD &lt;= sel_LOAD and in4;
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SDS_BUS_BASE generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;PORTSIZE_S_oe_ram, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;PORTSIZE_S_we_ram, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;PORTSIZE_S_addr_ram, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;PORTSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;PORTSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;PORTSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;PORTSIZE_S_data_ram_size, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;PORTSIZE_Sin_DataRdy, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;PORTSIZE_Sout_DataRdy, MEMORY_INIT_file=&gt;MEMORY_INIT_file, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, HIGH_LATENCY=&gt;0, ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, sel_LOAD=&gt;int_sel_LOAD, sel_STORE=&gt;int_sel_STORE, S_oe_ram=&gt;S_oe_ram, S_we_ram=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_NN_SDS_BUS_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="3"/>
      <operation operation_name="STORE"/>
      <memory_type>SYNCHRONOUS_SDS_BUS</memory_type>
      <channels_type>MEM_ACC_NN</channels_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_NN_SDS_BUS_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_NN_SDS_BUS_3"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_NN_SDS_BUS_3 in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SDS_BUS_BASE" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_NN_SDS_BUS_BASE #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3), 
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE), 
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(PORTSIZE_S_oe_ram),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(PORTSIZE_S_we_ram), 
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(PORTSIZE_S_addr_ram),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram), 
  .PORTSIZE_S_Wdata_ram(PORTSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(PORTSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram), 
  .PORTSIZE_Sout_Rdata_ram(PORTSIZE_Sout_Rdata_ram),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(PORTSIZE_S_data_ram_size), 
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(PORTSIZE_Sin_DataRdy),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(PORTSIZE_Sout_DataRdy), 
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize), 
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY), 
  .HIGH_LATENCY(1),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2), 
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2),
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD), 
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE), 
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size ),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="signal int_sel_LOAD : std_logic_vector(PORTSIZE_sel_LOAD-1 downto 0);
signal int_sel_STORE : std_logic_vector(PORTSIZE_sel_STORE-1 downto 0);
begin
int_sel_STORE &lt;= sel_STORE and in4;
int_sel_LOAD &lt;= sel_LOAD and in4;
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SDS_BUS_BASE generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;PORTSIZE_S_oe_ram, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;PORTSIZE_S_we_ram, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;PORTSIZE_S_addr_ram, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;PORTSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;PORTSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;PORTSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;PORTSIZE_S_data_ram_size, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;PORTSIZE_Sin_DataRdy, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;PORTSIZE_Sout_DataRdy, MEMORY_INIT_file=&gt;MEMORY_INIT_file, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY,
READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, HIGH_LATENCY=&gt;1, ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, sel_LOAD=&gt;int_sel_LOAD, sel_STORE=&gt;int_sel_STORE, S_oe_ram=&gt;S_oe_ram, S_we_ram=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_BRAM_NN_SDS_BUS_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <memory_type>SYNCHRONOUS_SDS_BUS</memory_type>
      <channels_type>MEM_ACC_NN</channels_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="ARRAY_1D_STD_BRAM_NN_SDS_BUS_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_BRAM_NN_SDS_BUS_4"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> array address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element loaded or stored </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_BRAM_NN_SDS_BUS_4 in1 in2 in3 in4 sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2 proxy_in3 proxy_sel_LOAD proxy_sel_STORE proxy_out1" IP_COMPONENT="ARRAY_1D_STD_BRAM_NN_SDS_BUS_BASE" VERILOG_PROVIDED="ARRAY_1D_STD_BRAM_NN_SDS_BUS_BASE #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3), 
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE), 
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(PORTSIZE_S_oe_ram),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(PORTSIZE_S_we_ram), 
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(PORTSIZE_S_addr_ram), 
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(PORTSIZE_S_Wdata_ram),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram), 
  .PORTSIZE_Sin_Rdata_ram(PORTSIZE_Sin_Rdata_ram),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(PORTSIZE_Sout_Rdata_ram), 
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(PORTSIZE_S_data_ram_size),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy), 
  .PORTSIZE_Sin_DataRdy(PORTSIZE_Sin_DataRdy),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(PORTSIZE_Sout_DataRdy),
  .MEMORY_INIT_file(MEMORY_INIT_file), 
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize), 
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .HIGH_LATENCY(2),
  .ALIGNMENT(ALIGNMENT), 
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2(BITSIZE_proxy_in2),
  .PORTSIZE_proxy_in2(PORTSIZE_proxy_in2), 
  .BITSIZE_proxy_in3(BITSIZE_proxy_in3),
  .PORTSIZE_proxy_in3(PORTSIZE_proxy_in3),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD), 
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1), 
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .sel_LOAD(sel_LOAD &amp; in4),
  .sel_STORE(sel_STORE &amp; in4),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size ),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2(proxy_in2),
  .proxy_in3(proxy_in3),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));" VHDL_PROVIDED="signal int_sel_LOAD : std_logic_vector(PORTSIZE_sel_LOAD-1 downto 0);
signal int_sel_STORE : std_logic_vector(PORTSIZE_sel_STORE-1 downto 0);
begin
int_sel_STORE &lt;= sel_STORE and in4;
int_sel_LOAD &lt;= sel_LOAD and in4;
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SDS_BUS_BASE generic map (BITSIZE_in1=&gt;BITSIZE_in1, PORTSIZE_in1=&gt;PORTSIZE_in1, BITSIZE_in2=&gt;BITSIZE_in2, PORTSIZE_in2=&gt;PORTSIZE_in2, BITSIZE_in3=&gt;BITSIZE_in3, PORTSIZE_in3=&gt;PORTSIZE_in3, BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE, PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE, BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram, PORTSIZE_S_oe_ram=&gt;PORTSIZE_S_oe_ram, BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram, PORTSIZE_S_we_ram=&gt;PORTSIZE_S_we_ram, BITSIZE_out1=&gt;BITSIZE_out1, PORTSIZE_out1=&gt;PORTSIZE_out1, BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram, PORTSIZE_S_addr_ram=&gt;PORTSIZE_S_addr_ram, BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram, PORTSIZE_S_Wdata_ram=&gt;PORTSIZE_S_Wdata_ram, BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram, PORTSIZE_Sin_Rdata_ram=&gt;PORTSIZE_Sin_Rdata_ram, BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram, PORTSIZE_Sout_Rdata_ram=&gt;PORTSIZE_Sout_Rdata_ram, BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size, PORTSIZE_S_data_ram_size=&gt;PORTSIZE_S_data_ram_size, BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy, PORTSIZE_Sin_DataRdy=&gt;PORTSIZE_Sin_DataRdy, BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy, PORTSIZE_Sout_DataRdy=&gt;PORTSIZE_Sout_DataRdy, MEMORY_INIT_file=&gt;MEMORY_INIT_file, n_elements=&gt;n_elements, data_size=&gt;data_size, address_space_begin=&gt;address_space_begin, address_space_rangesize=&gt;address_space_rangesize, BUS_PIPELINED=&gt;BUS_PIPELINED, PRIVATE_MEMORY=&gt;PRIVATE_MEMORY, READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY, USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY, HIGH_LATENCY=&gt;2, ALIGNMENT=>ALIGNMENT, BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1, PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1, BITSIZE_proxy_in2=&gt;BITSIZE_proxy_in2, PORTSIZE_proxy_in2=&gt;PORTSIZE_proxy_in2, BITSIZE_proxy_in3=&gt;BITSIZE_proxy_in3, PORTSIZE_proxy_in3=&gt;PORTSIZE_proxy_in3, BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD, PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD, BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE, PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE, BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1, PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1) port map (out1=&gt;out1, Sout_Rdata_ram=&gt;Sout_Rdata_ram, Sout_DataRdy=&gt;Sout_DataRdy, proxy_out1=&gt;proxy_out1, clock=&gt;clock, reset=&gt;reset, in1=&gt;in1, in2=&gt;in2, in3=&gt;in3, sel_LOAD=&gt;int_sel_LOAD, sel_STORE=&gt;int_sel_STORE, S_oe_ram=&gt;S_oe_ram, S_we_ram=&gt;S_we_ram, S_addr_ram=&gt;S_addr_ram, S_Wdata_ram=&gt;S_Wdata_ram, Sin_Rdata_ram=&gt;Sin_Rdata_ram, S_data_ram_size=&gt;S_data_ram_size, Sin_DataRdy=&gt;Sin_DataRdy, proxy_in1=&gt;proxy_in1, proxy_in2=&gt;proxy_in2, proxy_in3=&gt;proxy_in3, proxy_sel_LOAD=&gt;proxy_sel_LOAD, proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>MEMORY_CTRL</name>
      <operation operation_name="LOAD" bounded="0"/>
      <operation operation_name="STORE" bounded="0"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <memory_ctrl_type>D00</memory_ctrl_type>
      <circuit>
        <component_o id="MEMORY_CTRL">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="MEMORY_CTRL"/>
          <parameter name="USE_BACK_PRESSURE">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_back_pressure" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="MEMORY_CTRL USE_BACK_PRESSURE in1 in2 in3 out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" VERILOG_PROVIDED="
wire [BITSIZE_in2-1:0] tmp_addr;
wire int_sel_LOAD;
wire int_sel_STORE;

generate 
  if(USE_BACK_PRESSURE == 1)
  begin
    reg int_sel_LOAD_old;
    reg int_sel_STORE_old;
    wire int_sel_LOAD_old_next;
    wire int_sel_STORE_old_next;

    assign int_sel_LOAD_old_next = Mout_back_pressure &amp;&amp; (sel_LOAD || int_sel_LOAD_old);
    assign int_sel_STORE_old_next = Mout_back_pressure &amp;&amp; (sel_STORE || int_sel_STORE_old);
    always @(posedge clock)
    if(1RESET_VALUE)
    begin
      int_sel_LOAD_old &lt;= 0;
      int_sel_STORE_old &lt;= 0;
    end
    else
    begin
      int_sel_LOAD_old &lt;= int_sel_LOAD_old_next;
      int_sel_STORE_old &lt;= int_sel_STORE_old_next;
    end
    assign int_sel_LOAD = (in4 &amp;&amp; sel_LOAD) || int_sel_LOAD_old;
    assign int_sel_STORE = (in4 &amp;&amp; sel_STORE) || int_sel_STORE_old;
  end
  else
  begin
    assign int_sel_LOAD = in4 &amp;&amp; sel_LOAD;
    assign int_sel_STORE = in4 &amp;&amp; sel_STORE;
  end
endgenerate

assign tmp_addr = in2;
assign Mout_addr_ram = (int_sel_LOAD || int_sel_STORE) ? tmp_addr : Min_addr_ram;
assign Mout_oe_ram = int_sel_LOAD ? 1&apos;b1 : Min_oe_ram;
assign Mout_we_ram = int_sel_STORE ? 1&apos;b1 : Min_we_ram;
assign out1 = M_Rdata_ram[BITSIZE_out1-1:0];
assign Mout_Wdata_ram = int_sel_STORE ? in1 : Min_Wdata_ram;
assign Mout_data_ram_size = int_sel_STORE || int_sel_LOAD ? in3[BITSIZE_in3-1:0] : Min_data_ram_size;
assign done_port = (M_DataRdy &amp;&amp; in4) || (!in4 &amp;&amp; (sel_STORE || sel_LOAD));
// Add assertion here
// psl default clock = (posedge clock);
// psl ERROR_Min_we_ram_Min_oe_ram: assert never {Min_we_ram &amp;&amp; Min_oe_ram};
// psl ERROR_LOAD_Min_oe_ram: assert never {int_sel_LOAD &amp;&amp; Min_oe_ram};
// psl ERROR_STORE_Min_we_ram: assert never {int_sel_STORE &amp;&amp; Min_we_ram};
// psl ERROR_STORE_LOAD: assert never {int_sel_STORE &amp;&amp; int_sel_LOAD};"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>MEMORY_CTRL_D10</name>
      <operation operation_name="LOAD" bounded="0"/>
      <operation operation_name="STORE" bounded="0"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <memory_ctrl_type>D10</memory_ctrl_type>
      <circuit>
        <component_o id="MEMORY_CTRL_D10">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="MEMORY_CTRL_D10"/>
          <parameter name="USE_BACK_PRESSURE">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_back_pressure" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="MEMORY_CTRL_D10 USE_BACK_PRESSURE in1 in2 in3 out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" VERILOG_PROVIDED="
reg [BITSIZE_out1-1:0] delayed_out1;
reg delayed_M_DataRdy;
wire [BITSIZE_in2-1:0] tmp_addr;
wire int_sel_LOAD;
wire int_sel_STORE;

generate 
  if(USE_BACK_PRESSURE == 1)
  begin
    reg int_sel_LOAD_old;
    reg int_sel_STORE_old;
    wire int_sel_LOAD_old_next;
    wire int_sel_STORE_old_next;

    assign int_sel_LOAD_old_next = Mout_back_pressure &amp;&amp; (sel_LOAD || int_sel_LOAD_old);
    assign int_sel_STORE_old_next = Mout_back_pressure &amp;&amp; (sel_STORE || int_sel_STORE_old);
    always @(posedge clock)
    if(1RESET_VALUE)
    begin
      int_sel_LOAD_old &lt;= 0;
      int_sel_STORE_old &lt;= 0;
    end
    else
    begin
      int_sel_LOAD_old &lt;= int_sel_LOAD_old_next;
      int_sel_STORE_old &lt;= int_sel_STORE_old_next;
    end
    assign int_sel_LOAD = (in4 &amp;&amp; sel_LOAD) || int_sel_LOAD_old;
    assign int_sel_STORE = (in4 &amp;&amp; sel_STORE) || int_sel_STORE_old;
  end
  else
  begin
    assign int_sel_LOAD = in4 &amp;&amp; sel_LOAD;
    assign int_sel_STORE = in4 &amp;&amp; sel_STORE;
  end
endgenerate

assign tmp_addr = in2;
assign Mout_addr_ram = (int_sel_LOAD || int_sel_STORE) ? tmp_addr : Min_addr_ram;
assign Mout_oe_ram = int_sel_LOAD ? 1&apos;b1 : Min_oe_ram;
assign Mout_we_ram = int_sel_STORE ? 1&apos;b1 : Min_we_ram;
always @(posedge clock)
  delayed_out1 &lt;= M_Rdata_ram;
assign out1 = delayed_out1;
assign Mout_Wdata_ram = int_sel_STORE ? in1 : Min_Wdata_ram;
assign Mout_data_ram_size = int_sel_STORE || int_sel_LOAD ? in3[BITSIZE_in3-1:0] : Min_data_ram_size;
always @(posedge clock)
  delayed_M_DataRdy &lt;= M_DataRdy;
assign done_port = (delayed_M_DataRdy &amp; in4) || (!in4 &amp; (sel_STORE || sel_LOAD));
// Add assertion here
// psl default clock = (posedge clock);
// psl ERROR_Min_we_ram_Min_oe_ram: assert never {Min_we_ram &amp;&amp; Min_oe_ram};
// psl ERROR_LOAD_Min_oe_ram: assert never {sel_LOAD &amp;&amp; Min_oe_ram};
// psl ERROR_STORE_Min_we_ram: assert never {sel_STORE &amp;&amp; Min_we_ram};
// psl ERROR_STORE_LOAD: assert never {sel_STORE &amp;&amp; sel_LOAD};"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>MEMORY_CTRL_D11</name>
      <operation operation_name="LOAD" bounded="0"/>
      <operation operation_name="STORE" bounded="0"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <memory_ctrl_type>D11</memory_ctrl_type>
      <circuit>
        <component_o id="MEMORY_CTRL_D11">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="MEMORY_CTRL_D11"/>
          <parameter name="USE_BACK_PRESSURE">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_back_pressure" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="MEMORY_CTRL_D11 USE_BACK_PRESSURE in1 in2 in3 out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" VERILOG_PROVIDED="
reg delayed_sel_LOAD;
reg delayed_sel_STORE;
reg [BITSIZE_in1-1:0] delayed_in1;
reg [BITSIZE_in2-1:0] delayed_in2;
reg [BITSIZE_in3-1:0] delayed_in3;
wire [BITSIZE_in2-1:0] tmp_addr;
wire int_sel_LOAD;
wire int_sel_STORE;

generate 
  if(USE_BACK_PRESSURE == 1)
  begin
    reg int_sel_LOAD_old;
    reg int_sel_STORE_old;
    wire int_sel_LOAD_old_next;
    wire int_sel_STORE_old_next;

    assign int_sel_LOAD_old_next = Mout_back_pressure &amp;&amp; (delayed_sel_LOAD || int_sel_LOAD_old);
    assign int_sel_STORE_old_next = Mout_back_pressure &amp;&amp; (delayed_sel_STORE || int_sel_STORE_old);
    always @(posedge clock)
    if(1RESET_VALUE)
    begin
      int_sel_LOAD_old &lt;= 0;
      int_sel_STORE_old &lt;= 0;
    end
    else
    begin
      int_sel_LOAD_old &lt;= int_sel_LOAD_old_next;
      int_sel_STORE_old &lt;= int_sel_STORE_old_next;
    end
    assign int_sel_LOAD = (in4 &amp;&amp; delayed_sel_LOAD) || int_sel_LOAD_old;
    assign int_sel_STORE = (in4 &amp;&amp; delayed_sel_STORE) || int_sel_STORE_old;
  end
  else
  begin
    assign int_sel_LOAD = in4 &amp;&amp; delayed_sel_LOAD;
    assign int_sel_STORE = in4 &amp;&amp; delayed_sel_STORE;
  end
endgenerate

always @(posedge clock)
  delayed_sel_LOAD &lt;= sel_LOAD;
always @(posedge clock)
  delayed_sel_STORE &lt;= sel_STORE;
always @(posedge clock)
  delayed_in1 &lt;= in1;
always @(posedge clock)
  delayed_in2 &lt;= in2;
always @(posedge clock)
  delayed_in3 &lt;= in3;

assign tmp_addr = delayed_in2;
assign Mout_addr_ram = (int_sel_LOAD || int_sel_STORE) ? tmp_addr : Min_addr_ram;
assign Mout_oe_ram = int_sel_LOAD ? 1&apos;b1 : Min_oe_ram;
assign Mout_we_ram = int_sel_STORE ? 1&apos;b1 : Min_we_ram;
assign out1 = M_Rdata_ram;
assign Mout_Wdata_ram = int_sel_STORE ? delayed_in1 : Min_Wdata_ram;
assign Mout_data_ram_size = int_sel_STORE || int_sel_LOAD ? delayed_in3[BITSIZE_in3-1:0] : Min_data_ram_size;
assign done_port = (M_DataRdy &amp; in4) || (!in4 &amp; (delayed_sel_STORE || delayed_sel_LOAD));
// Add assertion here
// psl default clock = (posedge clock);
// psl ERROR_Min_we_ram_Min_oe_ram: assert never {Min_we_ram &amp;&amp; Min_oe_ram};
// psl ERROR_LOAD_Min_oe_ram: assert never {sel_LOAD &amp;&amp; Min_oe_ram};
// psl ERROR_STORE_Min_we_ram: assert never {sel_STORE &amp;&amp; Min_we_ram};
// psl ERROR_STORE_LOAD: assert never {sel_STORE &amp;&amp; sel_LOAD};"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>MEMORY_CTRL_D21</name>
      <operation operation_name="LOAD" bounded="0"/>
      <operation operation_name="STORE" bounded="0"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <memory_ctrl_type>D21</memory_ctrl_type>
      <circuit>
        <component_o id="MEMORY_CTRL_D21">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="MEMORY_CTRL_D21"/>
          <parameter name="USE_BACK_PRESSURE">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_back_pressure" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="MEMORY_CTRL_D21 USE_BACK_PRESSURE in1 in2 in3 out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" VERILOG_PROVIDED="
reg [BITSIZE_out1-1:0] delayed_out1;
reg delayed_M_DataRdy;
reg delayed_sel_LOAD;
reg delayed_sel_STORE;
reg [BITSIZE_in1-1:0] delayed_in1;
reg [BITSIZE_in2-1:0] delayed_in2;
reg [BITSIZE_in3-1:0] delayed_in3;
wire [BITSIZE_in2-1:0] tmp_addr;
wire int_sel_LOAD;
wire int_sel_STORE;

generate 
  if(USE_BACK_PRESSURE == 1)
  begin
    reg int_sel_LOAD_old;
    reg int_sel_STORE_old;
    wire int_sel_LOAD_old_next;
    wire int_sel_STORE_old_next;

    assign int_sel_LOAD_old_next = Mout_back_pressure &amp;&amp; (delayed_sel_LOAD || int_sel_LOAD_old);
    assign int_sel_STORE_old_next = Mout_back_pressure &amp;&amp; (delayed_sel_STORE || int_sel_STORE_old);
    always @(posedge clock)
    if(1RESET_VALUE)
    begin
      int_sel_LOAD_old &lt;= 0;
      int_sel_STORE_old &lt;= 0;
    end
    else
    begin
      int_sel_LOAD_old &lt;= int_sel_LOAD_old_next;
      int_sel_STORE_old &lt;= int_sel_STORE_old_next;
    end
    assign int_sel_LOAD = (in4 &amp;&amp; delayed_sel_LOAD) || int_sel_LOAD_old;
    assign int_sel_STORE = (in4 &amp;&amp; delayed_sel_STORE) || int_sel_STORE_old;
  end
  else
  begin
    assign int_sel_LOAD = in4 &amp;&amp; delayed_sel_LOAD;
    assign int_sel_STORE = in4 &amp;&amp; delayed_sel_STORE;
  end
endgenerate

always @(posedge clock)
  delayed_sel_LOAD &lt;= sel_LOAD &amp;&amp; !M_DataRdy &amp;&amp; !delayed_M_DataRdy;
always @(posedge clock)
  delayed_sel_STORE &lt;= sel_STORE &amp;&amp; !M_DataRdy &amp;&amp; !delayed_M_DataRdy;
always @(posedge clock)
  delayed_in1 &lt;= in1;
always @(posedge clock)
  delayed_in2 &lt;= in2;
always @(posedge clock)
  delayed_in3 &lt;= in3;

assign tmp_addr = delayed_in2;
assign Mout_addr_ram = (int_sel_LOAD || int_sel_STORE) ? tmp_addr : Min_addr_ram;
assign Mout_oe_ram = int_sel_LOAD ? 1&apos;b1 : Min_oe_ram;
assign Mout_we_ram = int_sel_STORE ? 1&apos;b1 : Min_we_ram;
always @(posedge clock)
  delayed_out1 &lt;= M_Rdata_ram;
assign out1 = delayed_out1;
assign Mout_Wdata_ram = int_sel_STORE ? delayed_in1 : Min_Wdata_ram;
assign Mout_data_ram_size = int_sel_STORE || int_sel_LOAD ? delayed_in3[BITSIZE_in3-1:0] : Min_data_ram_size;
always @(posedge clock)
  delayed_M_DataRdy &lt;= (M_DataRdy &amp; in4) || (!in4 &amp; (delayed_sel_STORE || delayed_sel_LOAD));
assign done_port = delayed_M_DataRdy;
// Add assertion here
// psl default clock = (posedge clock);
// psl ERROR_Min_we_ram_Min_oe_ram: assert never {Min_we_ram &amp;&amp; Min_oe_ram};
// psl ERROR_LOAD_Min_oe_ram: assert never {delayed_sel_LOAD &amp;&amp; Min_oe_ram};
// psl ERROR_STORE_Min_we_ram: assert never {delayed_sel_STORE &amp;&amp; Min_we_ram};
// psl ERROR_STORE_LOAD: assert never {sel_STORE &amp;&amp; sel_LOAD};"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>MEMORY_CTRLN</name>
      <operation operation_name="LOAD" bounded="0"/>
      <operation operation_name="STORE" bounded="0"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <memory_ctrl_type>D00</memory_ctrl_type>
      <circuit>
        <component_o id="MEMORY_CTRLN">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="MEMORY_CTRLN"/>
          <parameter name="USE_BACK_PRESSURE">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_back_pressure" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="MEMORY_CTRLN USE_BACK_PRESSURE in1 in2 in3 in4 sel_LOAD sel_STORE out1 done_port Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size Mout_back_pressure" VERILOG_PROVIDED="
localparam max_n_writes = PORTSIZE_sel_STORE &gt; PORTSIZE_Mout_we_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_we_ram;
localparam max_n_reads = PORTSIZE_sel_LOAD &gt; PORTSIZE_Mout_oe_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_oe_ram;
localparam max_n_rw = max_n_writes &gt; max_n_reads ? max_n_writes : max_n_reads;
wire [PORTSIZE_sel_LOAD-1:0] int_sel_LOAD;
wire [PORTSIZE_sel_STORE-1:0] int_sel_STORE;

generate 
  if(USE_BACK_PRESSURE == 1)
  begin
    reg [PORTSIZE_sel_LOAD-1:0] int_sel_LOAD_old;
    reg [PORTSIZE_sel_STORE-1:0] int_sel_STORE_old;
    wire [PORTSIZE_sel_LOAD-1:0] int_sel_LOAD_old_next;
    wire [PORTSIZE_sel_STORE-1:0] int_sel_STORE_old_next;

    assign int_sel_LOAD_old_next = Mout_back_pressure &amp; (sel_LOAD | int_sel_LOAD_old);
    assign int_sel_STORE_old_next = Mout_back_pressure &amp; (sel_STORE | int_sel_STORE_old);
    always @(posedge clock)
    if(1RESET_VALUE)
    begin
      int_sel_LOAD_old &lt;= 0;
      int_sel_STORE_old &lt;= 0;
    end
    else
    begin
      int_sel_LOAD_old &lt;= int_sel_LOAD_old_next;
      int_sel_STORE_old &lt;= int_sel_STORE_old_next;
    end
    assign int_sel_LOAD = (in4 &amp; sel_LOAD) | int_sel_LOAD_old;
    assign int_sel_STORE = (in4 &amp; sel_STORE) | int_sel_STORE_old;
  end
  else
  begin
    assign int_sel_LOAD = in4 &amp; sel_LOAD;
    assign int_sel_STORE = in4 &amp; sel_STORE;
  end
endgenerate

wire  [(PORTSIZE_in2*BITSIZE_in2)-1:0] tmp_addr;
assign tmp_addr = in2;
generate
genvar i;
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L0
    assign Mout_addr_ram[(i+1)*BITSIZE_Mout_addr_ram-1:i*BITSIZE_Mout_addr_ram] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; int_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; int_sel_STORE[i])) ? (tmp_addr[(i+1)*BITSIZE_in2-1:i*BITSIZE_in2]) : Min_addr_ram[(i+1)*BITSIZE_Min_addr_ram-1:i*BITSIZE_Min_addr_ram];
  end
endgenerate
assign Mout_oe_ram = int_sel_LOAD | Min_oe_ram;
assign Mout_we_ram = int_sel_STORE | Min_we_ram;
generate
  for (i=0; i&lt;max_n_reads; i=i+1)
  begin : L1
    assign out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1] = M_Rdata_ram[i*BITSIZE_M_Rdata_ram+BITSIZE_out1-1:i*BITSIZE_M_Rdata_ram];
end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L2
    assign Mout_Wdata_ram[(i+1)*BITSIZE_Mout_Wdata_ram-1:i*BITSIZE_Mout_Wdata_ram] = int_sel_STORE[i] ? in1[(i+1)*BITSIZE_in1-1:i*BITSIZE_in1] : Min_Wdata_ram[(i+1)*BITSIZE_Min_Wdata_ram-1:i*BITSIZE_Min_Wdata_ram];
end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L3
    assign Mout_data_ram_size[(i+1)*BITSIZE_Mout_data_ram_size-1:i*BITSIZE_Mout_data_ram_size] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; int_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; int_sel_STORE[i])) ? (in3[(i+1)*BITSIZE_in3-1:i*BITSIZE_in3]) : Min_data_ram_size[(i+1)*BITSIZE_Min_data_ram_size-1:i*BITSIZE_Min_data_ram_size];
  end
  endgenerate
assign done_port = (M_DataRdy &amp; in4) | (~in4 &amp; (sel_STORE | sel_LOAD));"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>MEMORY_CTRLN_D10</name>
      <operation operation_name="LOAD" bounded="0"/>
      <operation operation_name="STORE" bounded="0"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <memory_ctrl_type>D10</memory_ctrl_type>
      <circuit>
        <component_o id="MEMORY_CTRLN_D10">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="MEMORY_CTRLN_D10"/>
          <parameter name="USE_BACK_PRESSURE">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_back_pressure" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="MEMORY_CTRLN_D10 USE_BACK_PRESSURE in1 in2 in3 in4 sel_LOAD sel_STORE out1 done_port Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size Mout_back_pressure" VERILOG_PROVIDED="
localparam max_n_writes = PORTSIZE_sel_STORE &gt; PORTSIZE_Mout_we_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_we_ram;
localparam max_n_reads = PORTSIZE_sel_LOAD &gt; PORTSIZE_Mout_oe_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_oe_ram;
localparam max_n_rw = max_n_writes &gt; max_n_reads ? max_n_writes : max_n_reads;
reg [PORTSIZE_out1*BITSIZE_out1-1:0] delayed_out1;
reg [PORTSIZE_M_DataRdy-1:0] delayed_M_DataRdy;
wire [(PORTSIZE_in2*BITSIZE_in2)-1:0] tmp_addr;
wire [PORTSIZE_sel_LOAD-1:0] int_sel_LOAD;
wire [PORTSIZE_sel_STORE-1:0] int_sel_STORE;

generate 
  if(USE_BACK_PRESSURE == 1)
  begin
    reg [PORTSIZE_sel_LOAD-1:0] int_sel_LOAD_old;
    reg [PORTSIZE_sel_STORE-1:0] int_sel_STORE_old;
    wire [PORTSIZE_sel_LOAD-1:0] int_sel_LOAD_old_next;
    wire [PORTSIZE_sel_STORE-1:0] int_sel_STORE_old_next;

    assign int_sel_LOAD_old_next = Mout_back_pressure &amp; (sel_LOAD | int_sel_LOAD_old);
    assign int_sel_STORE_old_next = Mout_back_pressure &amp; (sel_STORE | int_sel_STORE_old);
    always @(posedge clock)
    if(1RESET_VALUE)
    begin
      int_sel_LOAD_old &lt;= 0;
      int_sel_STORE_old &lt;= 0;
    end
    else
    begin
      int_sel_LOAD_old &lt;= int_sel_LOAD_old_next;
      int_sel_STORE_old &lt;= int_sel_STORE_old_next;
    end
    assign int_sel_LOAD = (in4 &amp; sel_LOAD) | int_sel_LOAD_old;
    assign int_sel_STORE = (in4 &amp; sel_STORE) | int_sel_STORE_old;
  end
  else
  begin
    assign int_sel_LOAD = in4 &amp; sel_LOAD;
    assign int_sel_STORE = in4 &amp; sel_STORE;
  end
endgenerate

assign tmp_addr = in2;
generate
genvar i;
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L0
    assign Mout_addr_ram[(i+1)*BITSIZE_Mout_addr_ram-1:i*BITSIZE_Mout_addr_ram] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; int_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; int_sel_STORE[i])) ? (tmp_addr[(i+1)*BITSIZE_in2-1:i*BITSIZE_in2]) : Min_addr_ram[(i+1)*BITSIZE_Min_addr_ram-1:i*BITSIZE_Min_addr_ram];
  end
  endgenerate
assign Mout_oe_ram = int_sel_LOAD | Min_oe_ram;
assign Mout_we_ram = int_sel_STORE | Min_we_ram;
generate
  for (i=0; i&lt;max_n_reads; i=i+1)
  begin : L1
    always @(posedge clock)
      delayed_out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1] &lt;= M_Rdata_ram[i*BITSIZE_M_Rdata_ram+BITSIZE_out1-1:i*BITSIZE_M_Rdata_ram];
    assign out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1] = delayed_out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1];
end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L2
    assign Mout_Wdata_ram[(i+1)*BITSIZE_Mout_Wdata_ram-1:i*BITSIZE_Mout_Wdata_ram] = int_sel_STORE[i] ? in1[(i+1)*BITSIZE_in1-1:i*BITSIZE_in1] : Min_Wdata_ram[(i+1)*BITSIZE_Min_Wdata_ram-1:i*BITSIZE_Min_Wdata_ram];
end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L3
    assign Mout_data_ram_size[(i+1)*BITSIZE_Mout_data_ram_size-1:i*BITSIZE_Mout_data_ram_size] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; int_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; int_sel_STORE[i])) ? (in3[(i+1)*BITSIZE_in3-1:i*BITSIZE_in3]) : Min_data_ram_size[(i+1)*BITSIZE_Min_data_ram_size-1:i*BITSIZE_Min_data_ram_size];
  end
endgenerate
always @(posedge clock)
  delayed_M_DataRdy &lt;= (M_DataRdy &amp; in4) | (~in4 &amp; (sel_STORE | sel_LOAD));
assign done_port = delayed_M_DataRdy;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>MEMORY_CTRLN_D11</name>
      <operation operation_name="LOAD" bounded="0"/>
      <operation operation_name="STORE" bounded="0"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <memory_ctrl_type>D11</memory_ctrl_type>
      <circuit>
        <component_o id="MEMORY_CTRLN_D11">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="MEMORY_CTRLN_D11"/>
          <parameter name="USE_BACK_PRESSURE">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_back_pressure" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="MEMORY_CTRLN_D11 USE_BACK_PRESSURE in1 in2 in3 in4 sel_LOAD sel_STORE out1 done_port Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size Mout_back_pressure" VERILOG_PROVIDED="
localparam max_n_writes = PORTSIZE_sel_STORE &gt; PORTSIZE_Mout_we_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_we_ram;
localparam max_n_reads = PORTSIZE_sel_LOAD &gt; PORTSIZE_Mout_oe_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_oe_ram;
localparam max_n_rw = max_n_writes &gt; max_n_reads ? max_n_writes : max_n_reads;
reg [PORTSIZE_sel_LOAD-1:0] delayed_sel_LOAD;
reg [PORTSIZE_sel_STORE-1:0] delayed_sel_STORE;
reg [PORTSIZE_in1*BITSIZE_in1-1:0] delayed_in1;
reg [PORTSIZE_in2*BITSIZE_in2-1:0] delayed_in2;
reg [PORTSIZE_in3*BITSIZE_in3-1:0] delayed_in3;
reg [PORTSIZE_in4*BITSIZE_in4-1:0] delayed_in4;
wire [(PORTSIZE_in2*BITSIZE_in2)-1:0] tmp_addr;
wire [PORTSIZE_sel_LOAD-1:0] int_sel_LOAD;
wire [PORTSIZE_sel_STORE-1:0] int_sel_STORE;

generate 
  if(USE_BACK_PRESSURE == 1)
  begin
    reg [PORTSIZE_sel_LOAD-1:0] int_sel_LOAD_old;
    reg [PORTSIZE_sel_STORE-1:0] int_sel_STORE_old;
    wire [PORTSIZE_sel_LOAD-1:0] int_sel_LOAD_old_next;
    wire [PORTSIZE_sel_STORE-1:0] int_sel_STORE_old_next;

    assign int_sel_LOAD_old_next = Mout_back_pressure &amp; (delayed_sel_LOAD | int_sel_LOAD_old);
    assign int_sel_STORE_old_next = Mout_back_pressure &amp; (delayed_sel_STORE | int_sel_STORE_old);
    always @(posedge clock)
    if(1RESET_VALUE)
    begin
      int_sel_LOAD_old &lt;= 0;
      int_sel_STORE_old &lt;= 0;
    end
    else
    begin
      int_sel_LOAD_old &lt;= int_sel_LOAD_old_next;
      int_sel_STORE_old &lt;= int_sel_STORE_old_next;
    end
    assign int_sel_LOAD = (in4 &amp; delayed_sel_LOAD) | int_sel_LOAD_old;
    assign int_sel_STORE = (in4 &amp; delayed_sel_STORE) | int_sel_STORE_old;
  end
  else
  begin
    assign int_sel_LOAD = in4 &amp; delayed_sel_LOAD;
    assign int_sel_STORE = in4 &amp; delayed_sel_STORE;
  end
endgenerate

always @(posedge clock)
  delayed_sel_LOAD &lt;= sel_LOAD;
always @(posedge clock)
  delayed_sel_STORE &lt;= sel_STORE;
always @(posedge clock)
  delayed_in1 &lt;= in1;
always @(posedge clock)
  delayed_in2 &lt;= in2;
always @(posedge clock)
  delayed_in3 &lt;= in3;
always @(posedge clock)
  delayed_in4 &lt;= in4;

assign tmp_addr = delayed_in2;
generate
genvar i;
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L0
    assign Mout_addr_ram[(i+1)*BITSIZE_Mout_addr_ram-1:i*BITSIZE_Mout_addr_ram] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; int_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; int_sel_STORE[i])) ? (tmp_addr[(i+1)*BITSIZE_in2-1:i*BITSIZE_in2]) : Min_addr_ram[(i+1)*BITSIZE_Min_addr_ram-1:i*BITSIZE_Min_addr_ram];
  end
  endgenerate
assign Mout_oe_ram = (int_sel_LOAD &amp; delayed_in4)| Min_oe_ram;
assign Mout_we_ram = (int_sel_STORE &amp; delayed_in4) | Min_we_ram;
generate
  for (i=0; i&lt;max_n_reads; i=i+1)
  begin : L1
    assign out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1] = M_Rdata_ram[i*BITSIZE_M_Rdata_ram+BITSIZE_out1-1:i*BITSIZE_M_Rdata_ram];
end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L2
    assign Mout_Wdata_ram[(i+1)*BITSIZE_Mout_Wdata_ram-1:i*BITSIZE_Mout_Wdata_ram] = int_sel_STORE[i] ? delayed_in1[(i+1)*BITSIZE_in1-1:i*BITSIZE_in1] : Min_Wdata_ram[(i+1)*BITSIZE_Min_Wdata_ram-1:i*BITSIZE_Min_Wdata_ram];
end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L3
    assign Mout_data_ram_size[(i+1)*BITSIZE_Mout_data_ram_size-1:i*BITSIZE_Mout_data_ram_size] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; int_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; int_sel_STORE[i])) ? (delayed_in3[(i+1)*BITSIZE_in3-1:i*BITSIZE_in3]) : Min_data_ram_size[(i+1)*BITSIZE_Min_data_ram_size-1:i*BITSIZE_Min_data_ram_size];
  end
endgenerate
assign done_port = (M_DataRdy &amp; in4) | (~in4 &amp; (delayed_sel_LOAD | delayed_sel_STORE));;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>MEMORY_CTRLN_D21</name>
      <operation operation_name="LOAD" bounded="0"/>
      <operation operation_name="STORE" bounded="0"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <memory_ctrl_type>D21</memory_ctrl_type>
      <circuit>
        <component_o id="MEMORY_CTRLN_D21">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="MEMORY_CTRLN_D21"/>
          <parameter name="USE_BACK_PRESSURE">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_back_pressure" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="MEMORY_CTRLN_D21 USE_BACK_PRESSURE in1 in2 in3 in4 sel_LOAD sel_STORE out1 done_port Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size Mout_back_pressure" VERILOG_PROVIDED="
localparam max_n_writes = PORTSIZE_sel_STORE &gt; PORTSIZE_Mout_we_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_we_ram;
localparam max_n_reads = PORTSIZE_sel_LOAD &gt; PORTSIZE_Mout_oe_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_oe_ram;
localparam max_n_rw = max_n_writes &gt; max_n_reads ? max_n_writes : max_n_reads;
reg [PORTSIZE_out1*BITSIZE_out1-1:0] delayed_out1;
reg [PORTSIZE_M_DataRdy-1:0] delayed_M_DataRdy;
reg [PORTSIZE_sel_LOAD-1:0] delayed_sel_LOAD;
reg [PORTSIZE_sel_STORE-1:0] delayed_sel_STORE;
reg [PORTSIZE_in1*BITSIZE_in1-1:0] delayed_in1;
reg [PORTSIZE_in2*BITSIZE_in2-1:0] delayed_in2;
reg [PORTSIZE_in3*BITSIZE_in3-1:0] delayed_in3;
wire [(PORTSIZE_in2*BITSIZE_in2)-1:0] tmp_addr;
wire [PORTSIZE_sel_LOAD-1:0] int_sel_LOAD;
wire [PORTSIZE_sel_STORE-1:0] int_sel_STORE;

generate 
  if(USE_BACK_PRESSURE == 1)
  begin
    reg [PORTSIZE_sel_LOAD-1:0] int_sel_LOAD_old;
    reg [PORTSIZE_sel_STORE-1:0] int_sel_STORE_old;
    wire [PORTSIZE_sel_LOAD-1:0] int_sel_LOAD_old_next;
    wire [PORTSIZE_sel_STORE-1:0] int_sel_STORE_old_next;

    assign int_sel_LOAD_old_next = Mout_back_pressure &amp; (delayed_sel_LOAD | int_sel_LOAD_old);
    assign int_sel_STORE_old_next = Mout_back_pressure &amp; (delayed_sel_STORE | int_sel_STORE_old);
    always @(posedge clock)
    if(1RESET_VALUE)
    begin
      int_sel_LOAD_old &lt;= 0;
      int_sel_STORE_old &lt;= 0;
    end
    else
    begin
      int_sel_LOAD_old &lt;= int_sel_LOAD_old_next;
      int_sel_STORE_old &lt;= int_sel_STORE_old_next;
    end
    assign int_sel_LOAD = (in4 &amp; delayed_sel_LOAD) | int_sel_LOAD_old;
    assign int_sel_STORE = (in4 &amp; delayed_sel_STORE) | int_sel_STORE_old;
  end
  else
  begin
    assign int_sel_LOAD = in4 &amp; delayed_sel_LOAD;
    assign int_sel_STORE = in4 &amp; delayed_sel_STORE;
  end
endgenerate

always @(posedge clock)
  delayed_sel_LOAD &lt;= sel_LOAD&amp;~M_DataRdy&amp;~delayed_M_DataRdy;
always @(posedge clock)
  delayed_sel_STORE &lt;= sel_STORE&amp;~M_DataRdy&amp;~delayed_M_DataRdy;
always @(posedge clock)
  delayed_in1 &lt;= in1;
always @(posedge clock)
  delayed_in2 &lt;= in2;
always @(posedge clock)
  delayed_in3 &lt;= in3;

assign tmp_addr = delayed_in2;
generate
genvar i;
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L0
    assign Mout_addr_ram[(i+1)*BITSIZE_Mout_addr_ram-1:i*BITSIZE_Mout_addr_ram] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; int_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; int_sel_STORE[i])) ? (tmp_addr[(i+1)*BITSIZE_in2-1:i*BITSIZE_in2]) : Min_addr_ram[(i+1)*BITSIZE_Min_addr_ram-1:i*BITSIZE_Min_addr_ram];
  end
  endgenerate
assign Mout_oe_ram = int_sel_LOAD | Min_oe_ram;
assign Mout_we_ram = int_sel_STORE | Min_we_ram;
generate
  for (i=0; i&lt;max_n_reads; i=i+1)
  begin : L1
    always @(posedge clock)
      delayed_out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1] &lt;= M_Rdata_ram[i*BITSIZE_M_Rdata_ram+BITSIZE_out1-1:i*BITSIZE_M_Rdata_ram];
    assign out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1] = delayed_out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1];
end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L2
    assign Mout_Wdata_ram[(i+1)*BITSIZE_Mout_Wdata_ram-1:i*BITSIZE_Mout_Wdata_ram] = int_sel_STORE[i] ? delayed_in1[(i+1)*BITSIZE_in1-1:i*BITSIZE_in1] : Min_Wdata_ram[(i+1)*BITSIZE_Min_Wdata_ram-1:i*BITSIZE_Min_Wdata_ram];
end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L3
    assign Mout_data_ram_size[(i+1)*BITSIZE_Mout_data_ram_size-1:i*BITSIZE_Mout_data_ram_size] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; int_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; int_sel_STORE[i])) ? (delayed_in3[(i+1)*BITSIZE_in3-1:i*BITSIZE_in3]) : Min_data_ram_size[(i+1)*BITSIZE_Min_data_ram_size-1:i*BITSIZE_Min_data_ram_size];
  end
endgenerate
always @(posedge clock)
  delayed_M_DataRdy &lt;= (M_DataRdy &amp; in4) | (~in4 &amp; (delayed_sel_STORE | delayed_sel_LOAD));
assign done_port = delayed_M_DataRdy;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRL_D10</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="3"/>
      <operation operation_name="STORE"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <memory_ctrl_type>D10</memory_ctrl_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRL_D10">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRL_D10"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="BMEMORY_CTRL_D10 in1 in2 in3 out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" VERILOG_PROVIDED="
wire [BITSIZE_in2-1:0] tmp_addr;
reg [BITSIZE_out1-1:0] delayed_out1;
assign tmp_addr = in2;
assign Mout_addr_ram = ((sel_LOAD &amp; in4) || (sel_STORE &amp; in4)) ? tmp_addr : Min_addr_ram;
assign Mout_oe_ram = (sel_LOAD &amp; in4) ? 1&apos;b1 : Min_oe_ram;
assign Mout_we_ram = (sel_STORE &amp; in4) ? 1&apos;b1 : Min_we_ram;
always @(posedge clock)
begin
  delayed_out1 &lt;= M_Rdata_ram;
end
assign out1 = delayed_out1;
assign Mout_Wdata_ram = (sel_STORE &amp; in4) ? in1 : Min_Wdata_ram;
assign Mout_data_ram_size = ((sel_STORE &amp; in4) || (sel_LOAD &amp; in4)) ? in3[BITSIZE_in3-1:0] : Min_data_ram_size;
// Add assertion here
// psl default clock = (posedge clock);
// psl ERROR_LOAD_Min_oe_ram: assert never {(sel_LOAD &amp; in4) &amp;&amp; Min_oe_ram};
// psl ERROR_STORE_Min_we_ram: assert never {(sel_STORE &amp; in4) &amp;&amp; Min_we_ram};
// psl ERROR_STORE_LOAD: assert never {(sel_STORE &amp; in4) &amp;&amp; (sel_LOAD &amp; in4)};"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRL_D11</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="3"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <memory_ctrl_type>D11</memory_ctrl_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRL_D11">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRL_D11"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="BMEMORY_CTRL_D11 in1 in2 in3 out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" VERILOG_PROVIDED="
wire [BITSIZE_in2-1:0] tmp_addr;
reg delayed_sel_LOAD;
reg delayed_sel_STORE;
reg [BITSIZE_in1-1:0] delayed_in1;
reg [BITSIZE_in2-1:0] delayed_in2;
reg [BITSIZE_in3-1:0] delayed_in3;

assign tmp_addr = delayed_in2;
assign Mout_addr_ram = ((delayed_sel_LOAD || delayed_sel_STORE)) ? tmp_addr : Min_addr_ram;
assign Mout_oe_ram = delayed_sel_LOAD ? 1&apos;b1 : Min_oe_ram;
assign Mout_we_ram = delayed_sel_STORE ? 1&apos;b1 : Min_we_ram;
always @(posedge clock)
begin
  delayed_sel_LOAD &lt;= sel_LOAD &amp; in4;
end
always @(posedge clock)
begin
  delayed_sel_STORE &lt;= sel_STORE &amp; in4;
end
always @(posedge clock)
begin
  delayed_in1 &lt;= in1;
end
always @(posedge clock)
begin
  delayed_in2 &lt;= in2;
end
always @(posedge clock)
begin
  delayed_in3 &lt;= in3;
end
assign out1 = M_Rdata_ram;
assign Mout_Wdata_ram = delayed_sel_STORE ? delayed_in1 : Min_Wdata_ram;
assign Mout_data_ram_size = (delayed_sel_STORE || delayed_sel_LOAD) ? delayed_in3[BITSIZE_in3-1:0] : Min_data_ram_size;
// Add assertion here
// psl default clock = (posedge clock);
// psl ERROR_LOAD_Min_oe_ram: assert never {delayed_sel_LOAD &amp;&amp; Min_oe_ram};
// psl ERROR_STORE_Min_we_ram: assert never {delayed_sel_STORE &amp;&amp; Min_we_ram};
// psl ERROR_STORE_LOAD: assert never {sel_STORE &amp;&amp; sel_LOAD};"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRL_D21</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <memory_ctrl_type>D21</memory_ctrl_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRL_D21">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRL_D21"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="BMEMORY_CTRL_D21 in1 in2 in3 out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" VERILOG_PROVIDED="
wire [BITSIZE_in2-1:0] tmp_addr;
reg delayed_sel_LOAD;
reg delayed_sel_STORE;
reg [BITSIZE_in1-1:0] delayed_in1;
reg [BITSIZE_in2-1:0] delayed_in2;
reg [BITSIZE_in3-1:0] delayed_in3;
reg [BITSIZE_out1-1:0] delayed_out1;

assign tmp_addr = delayed_in2;
assign Mout_addr_ram = (delayed_sel_LOAD || delayed_sel_STORE) ? tmp_addr : Min_addr_ram;
assign Mout_oe_ram = delayed_sel_LOAD ? 1&apos;b1 : Min_oe_ram;
assign Mout_we_ram = delayed_sel_STORE ? 1&apos;b1 : Min_we_ram;
always @(posedge clock)
begin
  delayed_sel_LOAD &lt;= sel_LOAD &amp; in4;
end
always @(posedge clock)
begin
  delayed_sel_STORE &lt;= sel_STORE &amp; in4;
end
always @(posedge clock)
begin
  delayed_in1 &lt;= in1;
end
always @(posedge clock)
begin
  delayed_in2 &lt;= in2;
end
always @(posedge clock)
begin
  delayed_in3 &lt;= in3;
end
always @(posedge clock)
begin
  delayed_out1 &lt;= M_Rdata_ram;
end
assign out1 = delayed_out1;
assign Mout_Wdata_ram = delayed_sel_STORE ? delayed_in1 : Min_Wdata_ram;
assign Mout_data_ram_size = (delayed_sel_STORE || delayed_sel_LOAD) ? delayed_in3[BITSIZE_in3-1:0] : Min_data_ram_size;
// Add assertion here
// psl default clock = (posedge clock);
// psl ERROR_LOAD_Min_oe_ram: assert never {delayed_sel_LOAD &amp;&amp; Min_oe_ram};
// psl ERROR_STORE_Min_we_ram: assert never {delayed_sel_STORE &amp;&amp; Min_we_ram};
// psl ERROR_STORE_LOAD: assert never {sel_STORE &amp;&amp; sel_LOAD};"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRLN_D10</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="3"/>
      <operation operation_name="STORE"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <memory_ctrl_type>D10</memory_ctrl_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRLN_D10">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRLN_D10"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="BMEMORY_CTRLN_D10 in1 in2 in3 in4 sel_LOAD sel_STORE out1 Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" VERILOG_PROVIDED="
localparam max_n_writes = PORTSIZE_sel_STORE &gt; PORTSIZE_Mout_we_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_we_ram;
localparam max_n_reads = PORTSIZE_sel_LOAD &gt; PORTSIZE_Mout_oe_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_oe_ram;
localparam max_n_rw = max_n_writes &gt; max_n_reads ? max_n_writes : max_n_reads;
wire [(PORTSIZE_in2*BITSIZE_in2)-1:0] tmp_addr;
wire [PORTSIZE_sel_LOAD-1:0] int_sel_LOAD;
wire [PORTSIZE_sel_STORE-1:0] int_sel_STORE;
reg [PORTSIZE_out1*BITSIZE_out1-1:0] delayed_out1;
assign tmp_addr = in2;
assign int_sel_STORE = sel_STORE &amp; in4;
assign int_sel_LOAD = sel_LOAD &amp; in4;
generate
genvar i;
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L0
    assign Mout_addr_ram[(i+1)*BITSIZE_Mout_addr_ram-1:i*BITSIZE_Mout_addr_ram] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; int_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; int_sel_STORE[i])) ? (tmp_addr[(i+1)*BITSIZE_in2-1:i*BITSIZE_in2]) : Min_addr_ram[(i+1)*BITSIZE_Min_addr_ram-1:i*BITSIZE_Min_addr_ram];
  end
endgenerate
assign Mout_oe_ram = int_sel_LOAD | Min_oe_ram;
assign Mout_we_ram = int_sel_STORE | Min_we_ram;
generate
  for (i=0; i&lt;max_n_reads; i=i+1)
  begin : L1
    always @(posedge clock)
      delayed_out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1] &lt;= M_Rdata_ram[i*BITSIZE_M_Rdata_ram+BITSIZE_out1-1:i*BITSIZE_M_Rdata_ram];
    assign out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1] = delayed_out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1];
  end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L2
    assign Mout_Wdata_ram[(i+1)*BITSIZE_Mout_Wdata_ram-1:i*BITSIZE_Mout_Wdata_ram] = int_sel_STORE[i] ? in1[(i+1)*BITSIZE_in1-1:i*BITSIZE_in1] : Min_Wdata_ram[(i+1)*BITSIZE_Min_Wdata_ram-1:i*BITSIZE_Min_Wdata_ram];
  end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L3
    assign Mout_data_ram_size[(i+1)*BITSIZE_Mout_data_ram_size-1:i*BITSIZE_Mout_data_ram_size] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; int_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; int_sel_STORE[i])) ? (in3[(i+1)*BITSIZE_in3-1:i*BITSIZE_in3]) : Min_data_ram_size[(i+1)*BITSIZE_Min_data_ram_size-1:i*BITSIZE_Min_data_ram_size];
  end
endgenerate"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRLN_D11</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="3"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <memory_ctrl_type>D11</memory_ctrl_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRLN_D11">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRLN_D11"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="BMEMORY_CTRLN_D11 in1 in2 in3 in4 sel_LOAD sel_STORE out1 Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" VERILOG_PROVIDED="
localparam max_n_writes = PORTSIZE_sel_STORE &gt; PORTSIZE_Mout_we_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_we_ram;
localparam max_n_reads = PORTSIZE_sel_LOAD &gt; PORTSIZE_Mout_oe_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_oe_ram;
localparam max_n_rw = max_n_writes &gt; max_n_reads ? max_n_writes : max_n_reads;
wire [(PORTSIZE_in2*BITSIZE_in2)-1:0] tmp_addr;
reg [PORTSIZE_sel_LOAD-1:0] delayed_sel_LOAD;
reg [PORTSIZE_sel_STORE-1:0] delayed_sel_STORE;
reg [PORTSIZE_in1*BITSIZE_in1-1:0] delayed_in1;
reg [PORTSIZE_in2*BITSIZE_in2-1:0] delayed_in2;
reg [PORTSIZE_in3*BITSIZE_in3-1:0] delayed_in3;

always @(posedge clock)
  delayed_sel_LOAD &lt;= sel_LOAD &amp; in4;
always @(posedge clock)
  delayed_sel_STORE &lt;= sel_STORE &amp; in4;
always @(posedge clock)
  delayed_in1 &lt;= in1;
always @(posedge clock)
  delayed_in2 &lt;= in2;
always @(posedge clock)
  delayed_in3 &lt;= in3;
assign tmp_addr = delayed_in2;
generate
genvar i;
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L0
    assign Mout_addr_ram[(i+1)*BITSIZE_Mout_addr_ram-1:i*BITSIZE_Mout_addr_ram] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; delayed_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; delayed_sel_STORE[i])) ? (tmp_addr[(i+1)*BITSIZE_in2-1:i*BITSIZE_in2]) : Min_addr_ram[(i+1)*BITSIZE_Min_addr_ram-1:i*BITSIZE_Min_addr_ram];
  end
endgenerate
assign Mout_oe_ram = delayed_sel_LOAD | Min_oe_ram;
assign Mout_we_ram = delayed_sel_STORE | Min_we_ram;
generate
  for (i=0; i&lt;max_n_reads; i=i+1)
  begin : L1
    assign out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1] = M_Rdata_ram[i*BITSIZE_M_Rdata_ram+BITSIZE_out1-1:i*BITSIZE_M_Rdata_ram];
  end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L2
    assign Mout_Wdata_ram[(i+1)*BITSIZE_Mout_Wdata_ram-1:i*BITSIZE_Mout_Wdata_ram] = delayed_sel_STORE[i] ? delayed_in1[(i+1)*BITSIZE_in1-1:i*BITSIZE_in1] : Min_Wdata_ram[(i+1)*BITSIZE_Min_Wdata_ram-1:i*BITSIZE_Min_Wdata_ram];
  end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L3
    assign Mout_data_ram_size[(i+1)*BITSIZE_Mout_data_ram_size-1:i*BITSIZE_Mout_data_ram_size] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; delayed_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; delayed_sel_STORE[i])) ? (delayed_in3[(i+1)*BITSIZE_in3-1:i*BITSIZE_in3]) : Min_data_ram_size[(i+1)*BITSIZE_Min_data_ram_size-1:i*BITSIZE_Min_data_ram_size];
  end
endgenerate"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRLN_D21</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <memory_ctrl_type>D21</memory_ctrl_type>
      <bram_load_latency>2</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRLN_D21">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRLN_D21"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="BMEMORY_CTRLN_D21 in1 in2 in3 in4 sel_LOAD sel_STORE out1 Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" VERILOG_PROVIDED="
localparam max_n_writes = PORTSIZE_sel_STORE &gt; PORTSIZE_Mout_we_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_we_ram;
localparam max_n_reads = PORTSIZE_sel_LOAD &gt; PORTSIZE_Mout_oe_ram ? PORTSIZE_sel_STORE : PORTSIZE_Mout_oe_ram;
localparam max_n_rw = max_n_writes &gt; max_n_reads ? max_n_writes : max_n_reads;
wire [(PORTSIZE_in2*BITSIZE_in2)-1:0] tmp_addr;
reg [PORTSIZE_sel_LOAD-1:0] delayed_sel_LOAD;
reg [PORTSIZE_sel_STORE-1:0] delayed_sel_STORE;
reg [PORTSIZE_in1*BITSIZE_in1-1:0] delayed_in1;
reg [PORTSIZE_in2*BITSIZE_in2-1:0] delayed_in2;
reg [PORTSIZE_in3*BITSIZE_in3-1:0] delayed_in3;
reg [PORTSIZE_out1*BITSIZE_out1-1:0] delayed_out1;

always @(posedge clock)
  delayed_sel_LOAD &lt;= sel_LOAD &amp; in4;
always @(posedge clock)
  delayed_sel_STORE &lt;= sel_STORE &amp; in4;
always @(posedge clock)
  delayed_in1 &lt;= in1;
always @(posedge clock)
  delayed_in2 &lt;= in2;
always @(posedge clock)
  delayed_in3 &lt;= in3;
assign tmp_addr = delayed_in2;
generate
genvar i;
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L0
    assign Mout_addr_ram[(i+1)*BITSIZE_Mout_addr_ram-1:i*BITSIZE_Mout_addr_ram] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; delayed_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; delayed_sel_STORE[i])) ? (tmp_addr[(i+1)*BITSIZE_in2-1:i*BITSIZE_in2]) : Min_addr_ram[(i+1)*BITSIZE_Min_addr_ram-1:i*BITSIZE_Min_addr_ram];
  end
endgenerate
assign Mout_oe_ram = delayed_sel_LOAD | Min_oe_ram;
assign Mout_we_ram = delayed_sel_STORE | Min_we_ram;
generate
  for (i=0; i&lt;max_n_reads; i=i+1)
  begin : L1
    always @(posedge clock)
      delayed_out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1] &lt;= M_Rdata_ram[i*BITSIZE_M_Rdata_ram+BITSIZE_out1-1:i*BITSIZE_M_Rdata_ram];
    assign out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1] = delayed_out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1];
  end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L2
    assign Mout_Wdata_ram[(i+1)*BITSIZE_Mout_Wdata_ram-1:i*BITSIZE_Mout_Wdata_ram] = delayed_sel_STORE[i] ? delayed_in1[(i+1)*BITSIZE_in1-1:i*BITSIZE_in1] : Min_Wdata_ram[(i+1)*BITSIZE_Min_Wdata_ram-1:i*BITSIZE_Min_Wdata_ram];
  end
endgenerate
generate
  for (i=0; i&lt;max_n_rw; i=i+1)
  begin : L3
    assign Mout_data_ram_size[(i+1)*BITSIZE_Mout_data_ram_size-1:i*BITSIZE_Mout_data_ram_size] = ((i &lt; PORTSIZE_sel_LOAD &amp;&amp; delayed_sel_LOAD[i]) || (i &lt; PORTSIZE_sel_STORE &amp;&amp; delayed_sel_STORE[i])) ? (delayed_in3[(i+1)*BITSIZE_in3-1:i*BITSIZE_in3]) : Min_data_ram_size[(i+1)*BITSIZE_Min_data_ram_size-1:i*BITSIZE_Min_data_ram_size];
  end
endgenerate"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_DISTRAM_SDS</name>
      <operation operation_name="LOAD"/>
      <operation operation_name="STORE"/>
      <memory_type>ASYNCHRONOUS</memory_type>
      <channels_type>MEM_ACC_11</channels_type>
      <circuit>
        <component_o id="ARRAY_1D_STD_DISTRAM_SDS">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_DISTRAM_SDS"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2r" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> read array address </port_o>
          <port_o id="in2w" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> write array address </port_o>
          <port_o id="in3r" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element to be loaded </port_o>
          <port_o id="in3w" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element to be stored </port_o>
          <port_o id="in4r" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate for read </port_o>
          <port_o id="in4w" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate for write </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in2r" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in2w" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in3r" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in3w" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="proxy_in4r" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_in4w" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_DISTRAM_SDS in1 in2r in2w in3r in3w out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2r proxy_in2w proxy_in3r proxy_in3w proxy_out1" 
          VERILOG_PROVIDED="
`ifndef _SIM_HAVE_CLOG2
  function integer log2;
     input integer value;
     integer temp_value;
    begin
      temp_value = value-1;
      for (log2=0; temp_value&gt;0; log2=log2+1)
        temp_value = temp_value&gt;&gt;1;
    end
  endfunction
`endif
parameter n_byte_on_databus = ALIGNMENT/8;
parameter nbit_addr_r = BITSIZE_in2r &gt; BITSIZE_proxy_in2r ? BITSIZE_in2r : BITSIZE_proxy_in2r;
parameter nbit_addr_w = BITSIZE_in2w &gt; BITSIZE_proxy_in2w ? BITSIZE_in2w : BITSIZE_proxy_in2w;

`ifdef _SIM_HAVE_CLOG2
  localparam nbit_read_addr = n_elements == 1 ? 1 : $clog2(n_elements);
  localparam nbits_byte_offset = n_byte_on_databus&lt;=1 ? 0 : $clog2(n_byte_on_databus);
`else
  localparam nbit_read_addr = n_elements == 1 ? 1 : log2(n_elements);
  localparam nbits_byte_offset = n_byte_on_databus&lt;=1 ? 0 : log2(n_byte_on_databus);
`endif
  
wire [nbit_read_addr-1:0] memory_addr_a_r;
wire [nbit_read_addr-1:0] memory_addr_a_w;

wire bram_write;
wire [data_size-1:0] dout_a;
wire [nbit_addr_r-1:0] relative_addr_r;
wire [nbit_addr_w-1:0] relative_addr_w;
wire [nbit_addr_r-1:0] tmp_addr_r;
wire [nbit_addr_w-1:0] tmp_addr_w;
wire [data_size-1:0] din_a;
reg [data_size-1:0] memory [0:n_elements-1] /* synthesis syn_ramstyle = &quot;no_rw_check&quot; */;

initial
begin
  $readmemb(MEMORY_INIT_file, memory, 0, n_elements-1);
end

assign din_a = proxy_sel_STORE ? proxy_in1 : in1;
assign bram_write = (sel_STORE &amp;&amp; in4w) || (proxy_sel_STORE  &amp;&amp; proxy_in4w);

generate if(READ_ONLY_MEMORY==0)
  always @(posedge clock)
  begin
    if (bram_write)
    begin
      memory[memory_addr_a_w] &lt;= din_a;
    end
  end
endgenerate

assign dout_a = memory[memory_addr_a_r];

assign tmp_addr_r = proxy_sel_LOAD ? proxy_in2r : in2r;
generate
  if(USE_SPARSE_MEMORY==1)
    assign relative_addr_r = tmp_addr_r[nbit_addr_r-1:0];
  else
    assign relative_addr_r = tmp_addr_r-address_space_begin[((nbit_addr_r-1) &lt; 32 ? (nbit_addr_r-1) : 31):0];
endgenerate

assign tmp_addr_w = proxy_sel_STORE ? proxy_in2w : in2w;
generate
  if(USE_SPARSE_MEMORY==1)
    assign relative_addr_w = tmp_addr_w[nbit_addr_w-1:0];
  else
    assign relative_addr_w = tmp_addr_w-address_space_begin[((nbit_addr_w-1) &lt; 32 ? (nbit_addr_w-1) : 31):0];
endgenerate

generate
  if (n_elements==1)
    assign memory_addr_a_r = {nbit_read_addr{1&apos;b0}};
  else
    assign memory_addr_a_r = relative_addr_r[nbit_read_addr+nbits_byte_offset-1:nbits_byte_offset];
endgenerate

generate
  if (n_elements==1)
    assign memory_addr_a_w = {nbit_read_addr{1&apos;b0}};
  else
    assign memory_addr_a_w = relative_addr_w[nbit_read_addr+nbits_byte_offset-1:nbits_byte_offset];
endgenerate

assign out1 = dout_a;
assign proxy_out1 = dout_a;
assign Sout_Rdata_ram =Sin_Rdata_ram;
assign Sout_DataRdy = Sin_DataRdy;
// Add assertion here
// psl default clock = (posedge clock);
// psl ERROR_SDS_data_ram_size: assert never {((data_size != in3r &amp;&amp; sel_LOAD &amp;&amp; in4r) || (data_size != in3w &amp;&amp; sel_STORE &amp; in4w)) || ((data_size != proxy_in3r &amp;&amp; proxy_sel_LOAD) || (data_size != proxy_in3w &amp;&amp; proxy_sel_STORE))};
// psl ERROR_SDS_alignment: assert never {(((in2r-address_space_begin) %(ALIGNMENT/8) != 0) &amp;&amp; sel_LOAD &amp;&amp; in4r) || (((in2r-address_space_begin) %(ALIGNMENT/8) != 0) &amp;&amp; sel_STORE &amp;&amp; in4w) || (((proxy_in2r-address_space_begin) %(ALIGNMENT/8) != 0) &amp;&amp; proxy_sel_LOAD  &amp;&amp; proxy_in4r) || (((proxy_in2w-address_space_begin) %(ALIGNMENT/8) != 0) &amp;&amp; proxy_sel_STORE &amp;&amp; proxy_in4r)};
" VHDL_PROVIDED="  function integer_ternary_operator(cond : boolean; op1 : integer; op2 : integer) return integer is
  begin
    if cond then
      return op1;
    else
      return op2;
    end if;
  end integer_ternary_operator;

  constant n_byte_on_databus : integer := ALIGNMENT/8;
  constant nbit_addr_r         : integer := integer_ternary_operator(BITSIZE_in2r &gt; BITSIZE_proxy_in2r, BITSIZE_in2w, BITSIZE_proxy_in2r);
  constant nbit_addr_w         : integer := integer_ternary_operator(BITSIZE_in2w &gt; BITSIZE_proxy_in2w, BITSIZE_in2w, BITSIZE_proxy_in2w);
  constant nbit_read_addr    : integer := integer_ternary_operator(n_elements = 1, 1, integer(ceil(log2(real(n_elements)))));
  constant nbits_byte_offset : integer := integer_ternary_operator(n_byte_on_databus &lt;= 1, 0, integer(ceil(log2(real(n_byte_on_databus)))));

  signal memory_addr_a_r : std_logic_vector(nbit_read_addr-1 downto 0);
  signal memory_addr_a_w : std_logic_vector(nbit_read_addr-1 downto 0);

  signal bram_write : std_logic;
  signal dout_a : std_logic_vector(data_size-1 downto 0);
  signal relative_addr_r : std_logic_vector(nbit_addr_r-1 downto 0);
  signal relative_addr_w : std_logic_vector(nbit_addr_w-1 downto 0);
  signal tmp_addr_r : std_logic_vector(nbit_addr_r-1 downto 0);
  signal tmp_addr_w : std_logic_vector(nbit_addr_w-1 downto 0);
  signal din_a : std_logic_vector(data_size-1 downto 0);

  type mem_type is array (n_elements-1 downto 0) of std_logic_vector(data_size-1 downto 0);

  impure function InitMemFromFile (MemFileName : in string) return mem_type is
    FILE memfile : text open READ_MODE is MemFileName;
    variable MemFileLine : line;
    variable mem : mem_type;
    begin
       for i in 0 to n_elements-1 loop
        readline(memfile, MemFileLine);
        read(MemFileLine, mem(i));
      end loop;
      return mem;
  end function;

  signal mem : mem_type := InitMemFromFile(MEMORY_INIT_file);

begin

  din_a &lt;= std_logic_vector(resize(unsigned(proxy_in1), data_size))  when (proxy_sel_STORE = &apos;1&apos;) else in1;
  bram_write &lt;= (sel_STORE and in4w) or (proxy_sel_STORE and proxy_in4w);

  L1_single_write : process(clock)
  begin
    if (clock&apos;event and clock=&apos;1&apos;) then
      if(READ_ONLY_MEMORY=0) then
        if(bram_write=&apos;1&apos;) then
-- synthesis translate_off
          if (to_integer(unsigned(memory_addr_a_w)) &lt; n_elements) then
-- synthesis translate_on
            mem(to_integer(unsigned(memory_addr_a_w))) &lt;= din_a;
-- synthesis translate_off
          end if;
-- synthesis translate_on
        end if;
       end if;
    end if;
  end process;

  dout_a &lt;= mem(to_integer(unsigned(memory_addr_a_r))) when (to_integer(unsigned(memory_addr_a_r)) &lt; n_elements) else (others =&gt; &apos;X&apos;);
  tmp_addr_r &lt;= proxy_in2r when (proxy_sel_LOAD  = &apos;1&apos;) else in2r;
  tmp_addr_w &lt;= proxy_in2w when (proxy_sel_STORE = &apos;1&apos;) else in2w;

  L2_r : process(relative_addr_r)
  begin
    if(n_elements=1) then
      memory_addr_a_r &lt;= (others =&gt; &apos;0&apos;);
    else
      memory_addr_a_r &lt;= relative_addr_r(nbit_read_addr+nbits_byte_offset-1 downto nbits_byte_offset);
    end if;
  end process;

  L2_w : process(relative_addr_w)
  begin
    if(n_elements=1) then
      memory_addr_a_w &lt;= (others =&gt; &apos;0&apos;);
    else
      memory_addr_a_w &lt;= relative_addr_w(nbit_read_addr+nbits_byte_offset-1 downto nbits_byte_offset);
    end if;
  end process;

  L3_r : process(tmp_addr_r)
  begin
      if(USE_SPARSE_MEMORY=1) then
        relative_addr_r &lt;= tmp_addr_r(nbit_addr_r-1 downto 0);
      else
        relative_addr_r &lt;= std_logic_vector(resize(unsigned(tmp_addr_r), nbit_addr_r) - to_unsigned(address_space_begin, nbit_addr_r));
      end if;
  end process;

  L3_w : process(tmp_addr_r)
  begin
      if(USE_SPARSE_MEMORY=1) then
        relative_addr_w &lt;= tmp_addr_w(nbit_addr_w-1 downto 0);
      else
        relative_addr_w &lt;= std_logic_vector(resize(unsigned(tmp_addr_w), nbit_addr_w) - to_unsigned(address_space_begin, nbit_addr_w));
      end if;
  end process;

  out1 &lt;= dout_a;
  proxy_out1 &lt;= std_logic_vector(resize(unsigned(dout_a), BITSIZE_proxy_out1));
  Sout_Rdata_ram &lt;= Sin_Rdata_ram;
  Sout_DataRdy &lt;= Sin_DataRdy;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_DISTRAM_N1_SDS</name>
      <operation operation_name="LOAD"/>
      <operation operation_name="STORE"/>
      <memory_type>ASYNCHRONOUS</memory_type>
      <channels_type>MEM_ACC_N1</channels_type>
      <circuit>
        <component_o id="ARRAY_1D_STD_DISTRAM_N1_SDS">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_DISTRAM_N1_SDS"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2r" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> read array address </port_vector_o>
          <port_vector_o id="in2w" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> write array address </port_vector_o>
          <port_vector_o id="in3r" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element to be loaded</port_vector_o>
          <port_vector_o id="in3w" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element to be stored </port_vector_o>
          <port_vector_o id="in4r" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate for read </port_vector_o>
          <port_vector_o id="in4w" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate for write </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2r" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2w" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3r" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3w" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in4r" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in4w" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_DISTRAM_N1_SDS in1 in2r in2w in3r in3w in4r in4w sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2r proxy_in2w proxy_in3r proxy_in3w proxy_in4r proxy_in4w proxy_sel_LOAD proxy_sel_STORE proxy_out1" 
          IP_COMPONENT="ARRAY_1D_STD_DISTRAM_NN_SDS" VERILOG_PROVIDED="
ARRAY_1D_STD_DISTRAM_NN_SDS #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2r(BITSIZE_in2r),
  .PORTSIZE_in2r(PORTSIZE_in2r),
  .BITSIZE_in2w(BITSIZE_in2w),
  .PORTSIZE_in2w(PORTSIZE_in2w),
  .BITSIZE_in3r(BITSIZE_in3r),
  .PORTSIZE_in3r(PORTSIZE_in3r),
  .BITSIZE_in3w(BITSIZE_in3w),
  .PORTSIZE_in3w(PORTSIZE_in3w),
  .BITSIZE_in4r(BITSIZE_in4r),
  .PORTSIZE_in4r(PORTSIZE_in4r),
  .BITSIZE_in4w(BITSIZE_in4w),
  .PORTSIZE_in4w(PORTSIZE_in4w),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_S_oe_ram(BITSIZE_S_oe_ram),
  .PORTSIZE_S_oe_ram(1),
  .BITSIZE_S_we_ram(BITSIZE_S_we_ram),
  .PORTSIZE_S_we_ram(1),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram),
  .PORTSIZE_S_addr_ram(1),
  .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram),
  .PORTSIZE_S_Wdata_ram(1),
  .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram),
  .PORTSIZE_Sin_Rdata_ram(1),
  .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram),
  .PORTSIZE_Sout_Rdata_ram(1),
  .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size),
  .PORTSIZE_S_data_ram_size(1),
  .BITSIZE_Sin_DataRdy(BITSIZE_Sin_DataRdy),
  .PORTSIZE_Sin_DataRdy(1),
  .BITSIZE_Sout_DataRdy(BITSIZE_Sout_DataRdy),
  .PORTSIZE_Sout_DataRdy(1),
  .MEMORY_INIT_file(MEMORY_INIT_file),
  .n_elements(n_elements),
  .data_size(data_size),
  .address_space_begin(address_space_begin),
  .address_space_rangesize(address_space_rangesize),
  .BUS_PIPELINED(BUS_PIPELINED),
  .PRIVATE_MEMORY(PRIVATE_MEMORY),
  .READ_ONLY_MEMORY(READ_ONLY_MEMORY),
  .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY),
  .ALIGNMENT(ALIGNMENT),
  .BITSIZE_proxy_in1(BITSIZE_proxy_in1),
  .PORTSIZE_proxy_in1(PORTSIZE_proxy_in1),
  .BITSIZE_proxy_in2r(BITSIZE_proxy_in2r),
  .PORTSIZE_proxy_in2r(PORTSIZE_proxy_in2r),
  .BITSIZE_proxy_in2w(BITSIZE_proxy_in2w),
  .PORTSIZE_proxy_in2w(PORTSIZE_proxy_in2w),
  .BITSIZE_proxy_in3r(BITSIZE_proxy_in3r),
  .PORTSIZE_proxy_in3r(PORTSIZE_proxy_in3r),
  .BITSIZE_proxy_in3w(BITSIZE_proxy_in3w),
  .PORTSIZE_proxy_in3w(PORTSIZE_proxy_in3w),
  .BITSIZE_proxy_in4r(BITSIZE_proxy_in4r),
  .PORTSIZE_proxy_in4r(PORTSIZE_proxy_in4r),
  .BITSIZE_proxy_in4w(BITSIZE_proxy_in4w),
  .PORTSIZE_proxy_in4w(PORTSIZE_proxy_in4w),
  .BITSIZE_proxy_sel_LOAD(BITSIZE_proxy_sel_LOAD),
  .PORTSIZE_proxy_sel_LOAD(PORTSIZE_proxy_sel_LOAD),
  .BITSIZE_proxy_sel_STORE(BITSIZE_proxy_sel_STORE),
  .PORTSIZE_proxy_sel_STORE(PORTSIZE_proxy_sel_STORE),
  .BITSIZE_proxy_out1(BITSIZE_proxy_out1),
  .PORTSIZE_proxy_out1(PORTSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_NN_instance (.out1(out1),
  .Sout_Rdata_ram(Sout_Rdata_ram),
  .Sout_DataRdy(Sout_DataRdy),
  .proxy_out1(proxy_out1),
  .clock(clock),
  .reset(reset),
  .in1(in1),
  .in2r(in2r),
  .in2w(in2w),
  .in3r(in3r),
  .in3w(in3w),
  .in4r(in4r),
  .in4w(in4w),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .S_oe_ram(S_oe_ram),
  .S_we_ram(S_we_ram),
  .S_addr_ram(S_addr_ram),
  .S_Wdata_ram(S_Wdata_ram),
  .Sin_Rdata_ram(Sin_Rdata_ram),
  .S_data_ram_size(S_data_ram_size ),
  .Sin_DataRdy(Sin_DataRdy),
  .proxy_in1(proxy_in1),
  .proxy_in2r(proxy_in2r),
  .proxy_in2w(proxy_in2w),
  .proxy_in3r(proxy_in3r),
  .proxy_in3w(proxy_in3w),
  .proxy_in4r(proxy_in4r),
  .proxy_in5_w(proxy_in4w),
  .proxy_sel_LOAD(proxy_sel_LOAD),
  .proxy_sel_STORE(proxy_sel_STORE));
" VHDL_PROVIDED="
begin
ARRAY_1D_STD_BRAM_NN_instance : ARRAY_1D_STD_BRAM_NN_SDS generic map (
  BITSIZE_in1=&gt;BITSIZE_in1,
  PORTSIZE_in1=&gt;PORTSIZE_in1,
  BITSIZE_in2r=&gt;BITSIZE_in2r,
  PORTSIZE_in2r=&gt;PORTSIZE_in2r,
  BITSIZE_in2w=&gt;BITSIZE_in2w,
  PORTSIZE_in2w=&gt;PORTSIZE_in2w,
  BITSIZE_in3r=&gt;BITSIZE_in3r,
  PORTSIZE_in3r=&gt;PORTSIZE_in3r,
  BITSIZE_in3w=&gt;BITSIZE_in3w,
  PORTSIZE_in3w=&gt;PORTSIZE_in3w,
  BITSIZE_in4r=&gt;BITSIZE_in4r,
  PORTSIZE_in4r=&gt;PORTSIZE_in4r,
  BITSIZE_in4w=&gt;BITSIZE_in4w,
  PORTSIZE_in4w=&gt;PORTSIZE_in4w,
  BITSIZE_sel_LOAD=&gt;BITSIZE_sel_LOAD,
  PORTSIZE_sel_LOAD=&gt;PORTSIZE_sel_LOAD,
  BITSIZE_sel_STORE=&gt;BITSIZE_sel_STORE,
  PORTSIZE_sel_STORE=&gt;PORTSIZE_sel_STORE,
  BITSIZE_S_oe_ram=&gt;BITSIZE_S_oe_ram,
  PORTSIZE_S_oe_ram=&gt;1,
  BITSIZE_S_we_ram=&gt;BITSIZE_S_we_ram,
  PORTSIZE_S_we_ram=&gt;1,
  BITSIZE_out1=&gt;BITSIZE_out1,
  PORTSIZE_out1=&gt;PORTSIZE_out1,
  BITSIZE_S_addr_ram=&gt;BITSIZE_S_addr_ram,
  PORTSIZE_S_addr_ram=&gt;1,
  BITSIZE_S_Wdata_ram=&gt;BITSIZE_S_Wdata_ram,
  PORTSIZE_S_Wdata_ram=&gt;1,
  BITSIZE_Sin_Rdata_ram=&gt;BITSIZE_Sin_Rdata_ram,
  PORTSIZE_Sin_Rdata_ram=&gt;1,
  BITSIZE_Sout_Rdata_ram=&gt;BITSIZE_Sout_Rdata_ram,
  PORTSIZE_Sout_Rdata_ram=&gt;1,
  BITSIZE_S_data_ram_size=&gt;BITSIZE_S_data_ram_size,
  PORTSIZE_S_data_ram_size=&gt;1,
  BITSIZE_Sin_DataRdy=&gt;BITSIZE_Sin_DataRdy,
  PORTSIZE_Sin_DataRdy=&gt;1,
  BITSIZE_Sout_DataRdy=&gt;BITSIZE_Sout_DataRdy,
  PORTSIZE_Sout_DataRdy=&gt;1,
  MEMORY_INIT_file=&gt;MEMORY_INIT_file,
  n_elements=&gt;n_elements,
  data_size=&gt;data_size,
  address_space_begin=&gt;address_space_begin,
  address_space_rangesize=&gt;address_space_rangesize,
  BUS_PIPELINED=&gt;BUS_PIPELINED,
  PRIVATE_MEMORY=&gt;PRIVATE_MEMORY,
  READ_ONLY_MEMORY=&gt;READ_ONLY_MEMORY,
  USE_SPARSE_MEMORY=&gt;USE_SPARSE_MEMORY,
  ALIGNMENT=>ALIGNMENT,
  BITSIZE_proxy_in1=&gt;BITSIZE_proxy_in1,
  PORTSIZE_proxy_in1=&gt;PORTSIZE_proxy_in1,
  BITSIZE_proxy_in2r=&gt;BITSIZE_proxy_in2r,
  PORTSIZE_proxy_in2r=&gt;PORTSIZE_proxy_in2r,
  BITSIZE_proxy_in2w=&gt;BITSIZE_proxy_in2w,
  PORTSIZE_proxy_in2w=&gt;PORTSIZE_proxy_in2w,
  BITSIZE_proxy_in3r=&gt;BITSIZE_proxy_in3r,
  PORTSIZE_proxy_in3r=&gt;PORTSIZE_proxy_in3r,
  BITSIZE_proxy_in3w=&gt;BITSIZE_proxy_in3w,
  PORTSIZE_proxy_in3w=&gt;PORTSIZE_proxy_in3w,
  BITSIZE_proxy_in4r=&gt;BITSIZE_proxy_in4r,
  PORTSIZE_proxy_in4r=&gt;PORTSIZE_proxy_in4r,
  BITSIZE_proxy_in4w=&gt;BITSIZE_proxy_in4w,
  PORTSIZE_proxy_in4w=&gt;PORTSIZE_proxy_in4w,
  BITSIZE_proxy_sel_LOAD=&gt;BITSIZE_proxy_sel_LOAD,
  PORTSIZE_proxy_sel_LOAD=&gt;PORTSIZE_proxy_sel_LOAD,
  BITSIZE_proxy_sel_STORE=&gt;BITSIZE_proxy_sel_STORE,
  PORTSIZE_proxy_sel_STORE=&gt;PORTSIZE_proxy_sel_STORE,
  BITSIZE_proxy_out1=&gt;BITSIZE_proxy_out1,
  PORTSIZE_proxy_out1=&gt;PORTSIZE_proxy_out1
) port map (
  out1=&gt;out1,
  Sout_Rdata_ram=&gt;Sout_Rdata_ram,
  Sout_DataRdy(0)=&gt;Sout_DataRdy,
  proxy_out1=&gt;proxy_out1,
  clock=&gt;clock,
  reset=&gt;reset,
  in1=&gt;in1,
  in2r=&gt;in2r,
  in2w=&gt;in2w,
  in3r=&gt;in3r,
  in3w=&gt;in3w,
  in4r=&gt;in4r,
  in4w=&gt;in4w,
  sel_LOAD=&gt;sel_LOAD,
  sel_STORE=&gt;sel_STORE,
  S_oe_ram(0)=&gt;S_oe_ram,
  S_we_ram(0)=&gt;S_we_ram,
  S_addr_ram=&gt;S_addr_ram,
  S_Wdata_ram=&gt;S_Wdata_ram,
  Sin_Rdata_ram=&gt;Sin_Rdata_ram,
  S_data_ram_size=&gt;S_data_ram_size,
  Sin_DataRdy(0)=&gt;Sin_DataRdy,
  proxy_in1=&gt;proxy_in1,
  proxy_in2r=&gt;proxy_in2r,
  proxy_in2w=&gt;proxy_in2w,
  proxy_in3r=&gt;proxy_in3r,
  proxy_in3w=&gt;proxy_in3w,
  proxy_in4r=&gt;proxy_in4r,
  proxy_in4w=&gt;proxy_in4w,
  proxy_sel_LOAD=&gt;proxy_sel_LOAD,
  proxy_sel_STORE=&gt;proxy_sel_STORE);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ARRAY_1D_STD_DISTRAM_NN_SDS</name>
      <operation operation_name="LOAD"/>
      <operation operation_name="STORE"/>
      <memory_type>ASYNCHRONOUS</memory_type>
      <channels_type>MEM_ACC_NN</channels_type>
      <circuit>
        <component_o id="ARRAY_1D_STD_DISTRAM_NN_SDS">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ARRAY_1D_STD_DISTRAM_NN_SDS"/>
          <parameter name="MEMORY_INIT_file">&quot;&quot;array.mem&quot;&quot;</parameter>
          <parameter name="n_elements">1</parameter>
          <parameter name="data_size">32</parameter>
          <parameter name="address_space_begin">0</parameter>
          <parameter name="address_space_rangesize">4</parameter>
          <parameter name="BUS_PIPELINED">1</parameter>
          <parameter name="PRIVATE_MEMORY">0</parameter>
          <parameter name="READ_ONLY_MEMORY">0</parameter>
          <parameter name="USE_SPARSE_MEMORY">1</parameter>
          <parameter name="ALIGNMENT">32</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2r" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> read array address </port_vector_o>
          <port_vector_o id="in2w" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> write array address </port_vector_o>
          <port_vector_o id="in3r" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element to be loaded </port_vector_o>
          <port_vector_o id="in3w" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> size of the element to be stored </port_vector_o>
          <port_vector_o id="in4r" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> read predicate </port_vector_o>
          <port_vector_o id="in4w" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> write predicate </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data returned by a LOAD operation </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_slave="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in1" dir="IN" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2r" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in2w" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3r" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in3w" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in4r" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_in4w" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="proxy_out1" dir="OUT" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="ARRAY_1D_STD_DISTRAM_NN_SDS in1 in2r in2w in3r in3w in4r in4w sel_LOAD sel_STORE S_oe_ram S_we_ram out1 S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy MEMORY_INIT_file n_elements data_size address_space_begin address_space_rangesize BUS_PIPELINED PRIVATE_MEMORY READ_ONLY_MEMORY USE_SPARSE_MEMORY ALIGNMENT proxy_in1 proxy_in2r proxy_in2w proxy_in3r proxy_in3w proxy_in4r proxy_in4w proxy_sel_LOAD proxy_sel_STORE proxy_out1" VERILOG_PROVIDED="
`ifndef _SIM_HAVE_CLOG2
    function integer log2;
      input integer value;
      integer temp_value;
      begin
      temp_value = value-1;
      for (log2=0; temp_value&gt;0; log2=log2+1)
        temp_value = temp_value&gt;&gt;1;
      end
    endfunction
`endif
parameter n_byte_on_databus = ALIGNMENT/8;
parameter nbit_addr_r = BITSIZE_in2r &gt; BITSIZE_proxy_in2r ? BITSIZE_in2r : BITSIZE_proxy_in2r;
parameter nbit_addr_w = BITSIZE_in2w &gt; BITSIZE_proxy_in2w ? BITSIZE_in2w : BITSIZE_proxy_in2w;
`ifdef _SIM_HAVE_CLOG2
  localparam nbit_read_addr = n_elements == 1 ? 1 : $clog2(n_elements);
  localparam nbits_byte_offset = n_byte_on_databus&lt;=1 ? 0 : $clog2(n_byte_on_databus);
`else
  localparam nbit_read_addr = n_elements == 1 ? 1 : log2(n_elements);
  localparam nbits_byte_offset = n_byte_on_databus&lt;=1 ? 0 : log2(n_byte_on_databus);
`endif
parameter max_n_writes = PORTSIZE_sel_STORE;
parameter max_n_reads = PORTSIZE_sel_LOAD;

wire [max_n_writes-1:0] bram_write;

wire [nbit_read_addr*max_n_reads-1:0] memory_addr_a_r;
wire [nbit_read_addr*max_n_writes-1:0] memory_addr_a_w;

wire [data_size*max_n_writes-1:0] din_value_aggregated;
wire [data_size*max_n_reads-1:0] dout_a;
wire [nbit_addr_r*max_n_reads-1:0] tmp_addr_r;
wire [nbit_addr_w*max_n_writes-1:0] tmp_addr_w;
wire [nbit_addr_r*max_n_reads-1:0] relative_addr_r;
wire [nbit_addr_w*max_n_writes-1:0] relative_addr_w;
integer index2;

reg [data_size-1:0] memory [0:n_elements-1] /* synthesis syn_ramstyle = &quot;no_rw_check&quot; */;

initial
begin
  $readmemb(MEMORY_INIT_file, memory, 0, n_elements-1);
end

generate
genvar ind2_r;
for (ind2_r=0; ind2_r&lt;max_n_reads; ind2_r=ind2_r+1)
  begin : Lind2_r
    assign tmp_addr_r[(ind2_r+1)*nbit_addr_r-1:ind2_r*nbit_addr_r] = proxy_sel_LOAD[ind2_r] ? proxy_in2r[(ind2_r+1)*BITSIZE_proxy_in2r-1:ind2_r*BITSIZE_proxy_in2r] : in2r[(ind2_r+1)*BITSIZE_in2r-1:ind2_r*BITSIZE_in2r];
  end
endgenerate

generate
genvar ind2_w;
for (ind2_w=0; ind2_w&lt;max_n_writes; ind2_w=ind2_w+1)
  begin : Lind2_w
    assign tmp_addr_w[(ind2_w+1)*nbit_addr_w-1:ind2_w*nbit_addr_w] = proxy_sel_STORE[ind2_w] ? proxy_in2w[(ind2_w+1)*BITSIZE_proxy_in2w-1:ind2_w*BITSIZE_proxy_in2w] : in2w[(ind2_w+1)*BITSIZE_in2w-1:ind2_w*BITSIZE_in2w];
  end
endgenerate

generate
genvar i6_r;
  for (i6_r=0; i6_r&lt;max_n_reads; i6_r=i6_r+1)
  begin : L6_r
    if(USE_SPARSE_MEMORY==1)
      assign relative_addr_r[(i6_r+1)*nbit_addr_r-1:i6_r*nbit_addr_r] = tmp_addr_r[(i6_r+1)*nbit_addr_r-1:i6_r*nbit_addr_r];
    else
      assign relative_addr_r[(i6_r+1)*nbit_addr_r-1:i6_r*nbit_addr_r] = tmp_addr_r[(i6_r+1)*nbit_addr_r-1:i6_r*nbit_addr_r]-address_space_begin;
  end
endgenerate

generate
genvar i6_w;
  for (i6_w=0; i6_w&lt;max_n_writes; i6_w=i6_w+1)
  begin : L6_w
    if(USE_SPARSE_MEMORY==1)
      assign relative_addr_w[(i6_w+1)*nbit_addr_w-1:i6_w*nbit_addr_w] = tmp_addr_w[(i6_w+1)*nbit_addr_w-1:i6_w*nbit_addr_w];
    else
      assign relative_addr_w[(i6_w+1)*nbit_addr_w-1:i6_w*nbit_addr_w] = tmp_addr_w[(i6_w+1)*nbit_addr_w-1:i6_w*nbit_addr_w]-address_space_begin;
  end
endgenerate

generate
genvar i7_r;
  for (i7_r=0; i7_r&lt;max_n_reads; i7_r=i7_r+1)
  begin : L7_A_r
    if (n_elements==1)
      assign memory_addr_a_r[(i7_r+1)*nbit_read_addr-1:i7_r*nbit_read_addr] = {nbit_read_addr{1&apos;b0}};
    else
      assign memory_addr_a_r[(i7_r+1)*nbit_read_addr-1:i7_r*nbit_read_addr] = relative_addr_r[nbit_read_addr+nbits_byte_offset-1+i7_r*nbit_addr_r:nbits_byte_offset+i7_r*nbit_addr_r];
  end
endgenerate

generate
genvar i7_w;
  for (i7_w=0; i7_w&lt;max_n_writes; i7_w=i7_w+1)
  begin : L7_A_w
    if (n_elements==1)
      assign memory_addr_a_w[(i7_w+1)*nbit_read_addr-1:i7_w*nbit_read_addr] = {nbit_read_addr{1&apos;b0}};
    else
      assign memory_addr_a_w[(i7_w+1)*nbit_read_addr-1:i7_w*nbit_read_addr] = relative_addr_w[nbit_read_addr+nbits_byte_offset-1+i7_w*nbit_addr_w:nbits_byte_offset+i7_w*nbit_addr_w];
  end
endgenerate

generate
genvar i14;
  for (i14=0; i14&lt;max_n_writes; i14=i14+1)
  begin : L14
    assign din_value_aggregated[(i14+1)*data_size-1:i14*data_size] = proxy_sel_STORE[i14] ? proxy_in1[(i14+1)*BITSIZE_proxy_in1-1:i14*BITSIZE_proxy_in1] : in1[(i14+1)*BITSIZE_in1-1:i14*BITSIZE_in1];
  end
endgenerate

generate
genvar i11;
  for (i11=0; i11&lt;max_n_reads; i11=i11+1)
  begin : asynchronous_read
    assign dout_a[data_size*i11+:data_size] = memory[memory_addr_a_r[nbit_read_addr*i11+:nbit_read_addr]];
  end
endgenerate

generate if(READ_ONLY_MEMORY==0)
  always @(posedge clock)
  begin
    for (index2=0; index2&lt;max_n_writes; index2=index2+1)
    begin
      if(bram_write[index2])
        memory[memory_addr_a_w[nbit_read_addr*index2+:nbit_read_addr]] &lt;= din_value_aggregated[data_size*index2+:data_size];
    end
  end
endgenerate

generate
genvar i21;
  for (i21=0; i21&lt;max_n_writes; i21=i21+1)
  begin : L21
      assign bram_write[i21] = (sel_STORE[i21] &amp;&amp; in4w[i21]) || (proxy_sel_STORE[i21] &amp;&amp; proxy_in4w[i21]);
  end
endgenerate

generate
genvar i20;
  for (i20=0; i20&lt;max_n_reads; i20=i20+1)
  begin : L20
    assign out1[(i20+1)*BITSIZE_out1-1:i20*BITSIZE_out1] = dout_a[(i20+1)*data_size-1:i20*data_size];
    assign proxy_out1[(i20+1)*BITSIZE_proxy_out1-1:i20*BITSIZE_proxy_out1] = dout_a[(i20+1)*data_size-1:i20*data_size];
  end
endgenerate
assign Sout_Rdata_ram =Sin_Rdata_ram;
assign Sout_DataRdy = Sin_DataRdy;
" VHDL_PROVIDED="  function integer_ternary_operator(cond : boolean; op1 : integer; op2 : integer) return integer is
  begin
    if cond then
      return op1;
    else
      return op2;
    end if;
  end integer_ternary_operator;

  constant n_byte_on_databus             : integer := ALIGNMENT/8;
  constant nbit_addr_r                     : integer := integer_ternary_operator(BITSIZE_in2r &gt; BITSIZE_proxy_in2r, BITSIZE_in2r, BITSIZE_proxy_in2r);
  constant nbit_addr_w                     : integer := integer_ternary_operator(BITSIZE_in2w &gt; BITSIZE_proxy_in2w, BITSIZE_in2w, BITSIZE_proxy_in2w);
  constant nbits_byte_offset             : integer := integer_ternary_operator(n_byte_on_databus &lt;=1, 0, integer(ceil(log2(real(n_byte_on_databus)))));
  constant nbit_read_addr                : integer := integer_ternary_operator(n_elements = 1, 1, integer(ceil(log2(real(n_elements)))));
  constant max_n_writes                  : integer := PORTSIZE_sel_STORE;
  constant max_n_reads                   : integer := PORTSIZE_sel_LOAD;

  signal bram_write : std_logic_vector(max_n_writes-1 downto 0);

  signal memory_addr_a_r : std_logic_vector(nbit_read_addr*max_n_reads-1 downto 0);
  signal memory_addr_a_w : std_logic_vector(nbit_read_addr*max_n_writes-1 downto 0);

  signal din_value_aggregated : std_logic_vector(data_size*max_n_writes-1 downto 0);
  signal dout_a : std_logic_vector(data_size*max_n_reads-1 downto 0);
  signal tmp_addr_r : std_logic_vector(nbit_addr_r*max_n_reads-1 downto 0);
  signal tmp_addr_w : std_logic_vector(nbit_addr_w*max_n_writes-1 downto 0);
  signal relative_addr_r : std_logic_vector(nbit_addr_r*max_n_reads-1 downto 0);
  signal relative_addr_w : std_logic_vector(nbit_addr_w*max_n_writes-1 downto 0);

  type mem_type is array (n_elements-1 downto 0) of std_logic_vector(data_size-1 downto 0);

  impure function InitMemFromFile (MemFileName : in string) return mem_type is
    FILE memfile : text open READ_MODE is MemFileName;
    variable MemFileLine : line;
    variable mem : mem_type;
    begin
       for i in 0 to n_elements-1 loop
        readline(memfile, MemFileLine);
        read(MemFileLine, mem(i));
      end loop;
      return mem;
  end function;

  signal mem : mem_type := InitMemFromFile(MEMORY_INIT_file);

begin
  Lind2_r : process(proxy_sel_LOAD, proxy_in2r,in2r)
  begin
    for ind2_r in 0 to max_n_reads-1 loop
      if (proxy_sel_LOAD(ind2_r) = &apos;1&apos;) then
        tmp_addr_r((ind2_r+1)*nbit_addr_r-1 downto ind2_r * nbit_addr_r) &lt;= proxy_in2r((ind2_r+1)*BITSIZE_proxy_in2r-1 downto ind2_r*BITSIZE_proxy_in2r);
      else
        tmp_addr_r((ind2_r+1)*nbit_addr_r-1 downto ind2_r * nbit_addr_r) &lt;= in2r((ind2_r+1)*BITSIZE_in2r-1 downto ind2_r*BITSIZE_in2r);
      end if;
    end loop;
  end process;

  Lind2_w : process(proxy_sel_STORE,proxy_in2,in2)
  begin
    for ind2_w in 0 to max_n_writes-1 loop
      if (proxy_sel_STORE(ind2_w) = &apos;1&apos;) then
        tmp_addr_w((ind2_w+1)*nbit_addr_w-1 downto ind2_w * nbit_addr_w) &lt;= proxy_in2w((ind2_w+1)*BITSIZE_proxy_in2w-1 downto ind2_w*BITSIZE_proxy_in2w);
      else
        tmp_addr_w((ind2_w+1)*nbit_addr_w-1 downto ind2_w * nbit_addr_w) &lt;= in2w((ind2_w+1)*BITSIZE_in2w-1 downto ind2_w*BITSIZE_in2w);
      end if;
    end loop;
  end process;

  L6_r : process(tmp_addr_r)
  begin
    for i6_r in 0 to max_n_reads-1 loop
      if(USE_SPARSE_MEMORY=1) then
        relative_addr_r((i6_r+1)*nbit_addr_r-1 downto i6_r*nbit_addr_r) &lt;= tmp_addr((i6+1)*nbit_addr_r-1 downto i6*nbit_addr_r);
      else
        relative_addr_r((i6_r+1)*nbit_addr_r-1 downto i6_r*nbit_addr_r) &lt;= std_logic_vector(resize(unsigned(tmp_addr_r), nbit_addr_r) - to_unsigned(address_space_begin, nbit_addr_r));
      end if;
    end loop;
  end process;

  L6_w : process(tmp_addr_w)
  begin
    for i6_w in 0 to max_n_writes-1 loop
      if(USE_SPARSE_MEMORY=1) then
        relative_addr_w((i6_w+1)*nbit_addr_w-1 downto i6_w*nbit_addr_w) &lt;= tmp_addr((i6_w+1)*nbit_addr_w-1 downto i6_w*nbit_addr_w);
      else
        relative_addr_w((i6_w+1)*nbit_add_wr-1 downto i6_w*nbit_addr_w) &lt;= std_logic_vector(resize(unsigned(tmp_addr_w), nbit_addr_w) - to_unsigned(address_space_begin, nbit_addr_w));
      end if;
    end loop;
  end process;

  L7_A_r : process(relative_addr_r)
  begin
    for i7_r in 0 to max_n_rw-1 loop
      if(n_elements=1) then
        memory_addr_a_r((i7_r+1)*nbit_read_addr-1 downto i7_r*nbit_read_addr) &lt;= (others =&gt; &apos;0&apos;);
      else
        memory_addr_a_r((i7_r+1)*nbit_read_addr-1 downto i7_r*nbit_read_addr) &lt;= relative_addr_r(nbit_read_addr+nbits_byte_offset-1+i7_r*nbit_addr_r downto nbits_byte_offset+i7_r*nbit_addr_r);
      end if;
    end loop;
  end process;

  L7_A_w : process(relative_addr_w)
  begin
    for i7_w in 0 to max_n_rw-1 loop
      if(n_elements=1) then
        memory_addr_a_w((i7_w+1)*nbit_read_addr-1 downto i7_w*nbit_read_addr) &lt;= (others =&gt; &apos;0&apos;);
      else
        memory_addr_a_w((i7_w+1)*nbit_read_addr-1 downto i7_w*nbit_read_addr) &lt;= relative_addr_w(nbit_read_addr+nbits_byte_offset-1+i7_w*nbit_addr_w downto nbits_byte_offset+i7_w*nbit_addr_w);
      end if;
    end loop;
  end process;

  L14 : process(proxy_sel_STORE,proxy_in1,in1)
  begin
    for i14 in 0 to max_n_reads-1 loop
      if(proxy_sel_STORE(i14)=&apos;1&apos;) then
        din_value_aggregated((i14+1)*data_size-1 downto i14*data_size) &lt;= std_logic_vector(resize(unsigned(proxy_in1((i14+1)*BITSIZE_proxy_in1-1 downto i14*BITSIZE_proxy_in1)), data_size));
      else
        din_value_aggregated((i14+1)*data_size-1 downto i14*data_size) &lt;= in1((i14+1)*BITSIZE_in1-1 downto i14*BITSIZE_in1);
      end if;
    end loop;
  end process;

  asynchronous_read : process(mem, memory_addr_a)
  begin
     for i11 in 0 to max_n_reads-1 loop
        if(to_integer(unsigned(memory_addr_a_r((i11+1)*nbit_read_addr-1 downto nbit_read_addr*i11))) &lt; n_elements) then
           dout_a((i11+1)*data_size-1 downto data_size*i11) &lt;= mem(to_integer(unsigned(memory_addr_a_r((i11+1)*nbit_read_addr-1 downto nbit_read_addr*i11))));
        else
           dout_a((i11+1)*data_size-1 downto data_size*i11) &lt;= (others =&gt; &apos;X&apos;);
        end if;

    end loop;
  end process;

  L12_single_write : process(clock)
  begin
    if (clock&apos;event and clock=&apos;1&apos;) then
       if(READ_ONLY_MEMORY=0) then
        for index2 in 0 to max_n_writes-1 loop
          if(bram_write(index2)=&apos;1&apos;) then
            mem(to_integer(unsigned(memory_addr_a_w((index2+1)*nbit_read_addr-1 downto index2*nbit_read_addr)))) &lt;= din_value_aggregated((index2+1)*data_size-1 downto index2*data_size);
          end if;
        end loop;
      end if;
    end if;
  end process;

  L21 : process (sel_STORE, proxy_sel_STORE, in4)
  begin
    for i21 in 0 to max_n_writes-1 loop
      bram_write(i21) &lt;= (sel_STORE(i21) and in4w(i21)) or (proxy_sel_STORE(i21) or proxy_in4w(i21));
    end loop;
  end process;

  L20 : process(dout_a)
  begin
    for i20 in 0 to max_n_reads-1 loop
      out1((i20+1)*BITSIZE_out1-1 downto i20*BITSIZE_out1) &lt;= dout_a((i20+1)*data_size-1 downto i20*data_size);
      proxy_out1((i20+1)*BITSIZE_proxy_out1-1 downto i20*BITSIZE_proxy_out1) &lt;= std_logic_vector(resize(unsigned(dout_a((i20+1)*data_size-1 downto i20*data_size)), BITSIZE_proxy_out1));
    end loop;
  end process;

  Sout_Rdata_ram &lt;= Sin_Rdata_ram;
  Sout_DataRdy &lt;= Sin_DataRdy;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRL_D10_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <memory_ctrl_type>D10</memory_ctrl_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRL_D10_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRL_D10_3"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="BMEMORY_CTRL_D10_3 in1 in2 in3 out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" IP_COMPONENT="BMEMORY_CTRL_D10" VERILOG_PROVIDED="BMEMORY_CTRL_D10 #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_Min_addr_ram(BITSIZE_Min_addr_ram),
  .BITSIZE_Mout_addr_ram(BITSIZE_Mout_addr_ram),
  .BITSIZE_M_Rdata_ram(BITSIZE_M_Rdata_ram),
  .BITSIZE_Min_Wdata_ram(BITSIZE_Min_Wdata_ram),
  .BITSIZE_Mout_Wdata_ram(BITSIZE_Mout_Wdata_ram),
  .BITSIZE_Min_data_ram_size(BITSIZE_Min_data_ram_size),
  .BITSIZE_Mout_data_ram_size(BITSIZE_Mout_data_ram_size)) BMEMORY_CTRL_D10_i (.out1(out1),
  .Mout_oe_ram(Mout_oe_ram),
  .Mout_we_ram(Mout_we_ram),
  .Mout_addr_ram(Mout_addr_ram),
  .Mout_Wdata_ram(Mout_Wdata_ram),
  .Mout_data_ram_size(Mout_data_ram_size),
  .clock(clock),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .Min_oe_ram(Min_oe_ram),
  .Min_we_ram(Min_we_ram),
  .Min_addr_ram(Min_addr_ram),
  .M_Rdata_ram(M_Rdata_ram),
  .Min_Wdata_ram(Min_Wdata_ram),
  .Min_data_ram_size(Min_data_ram_size),
  .M_DataRdy(M_DataRdy));" VHDL_PROVIDED="
begin
  BMEMORY_CTRL_D10_i0 : BMEMORY_CTRL_D10 generic map(BITSIZE_in1=>BITSIZE_in1, BITSIZE_in2=>BITSIZE_in2, BITSIZE_in3=>BITSIZE_in3, BITSIZE_out1=>BITSIZE_out1, BITSIZE_Min_addr_ram=>BITSIZE_Min_addr_ram, BITSIZE_Mout_addr_ram=>BITSIZE_Mout_addr_ram, BITSIZE_M_Rdata_ram=>BITSIZE_M_Rdata_ram, BITSIZE_Min_Wdata_ram=>BITSIZE_Min_Wdata_ram, BITSIZE_Mout_Wdata_ram=>BITSIZE_Mout_Wdata_ram, BITSIZE_Min_data_ram_size=>BITSIZE_Min_data_ram_size, BITSIZE_Mout_data_ram_size=>BITSIZE_Mout_data_ram_size) port map (out1 => out1, Mout_oe_ram => Mout_oe_ram, Mout_we_ram => Mout_we_ram, Mout_addr_ram => Mout_addr_ram, Mout_Wdata_ram => Mout_Wdata_ram, Mout_data_ram_size => Mout_data_ram_size, clock => clock, in1 => in1, in2 => in2, in3 => in3, in4 => in4, sel_LOAD => sel_LOAD, sel_STORE => sel_STORE, Min_oe_ram => Min_oe_ram, Min_we_ram => Min_we_ram, Min_addr_ram => Min_addr_ram, M_Rdata_ram => M_Rdata_ram, Min_Wdata_ram => Min_Wdata_ram, Min_data_ram_size => Min_data_ram_size, M_DataRdy => M_DataRdy);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRL_D10_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="5"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <memory_ctrl_type>D10</memory_ctrl_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRL_D10_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRL_D10_4"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/> predicate </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="BMEMORY_CTRL_D10_4 in1 in2 in3 out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" IP_COMPONENT="BMEMORY_CTRL_D10" VERILOG_PROVIDED="BMEMORY_CTRL_D10 #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_Min_addr_ram(BITSIZE_Min_addr_ram),
  .BITSIZE_Mout_addr_ram(BITSIZE_Mout_addr_ram),
  .BITSIZE_M_Rdata_ram(BITSIZE_M_Rdata_ram),
  .BITSIZE_Min_Wdata_ram(BITSIZE_Min_Wdata_ram),
  .BITSIZE_Mout_Wdata_ram(BITSIZE_Mout_Wdata_ram),
  .BITSIZE_Min_data_ram_size(BITSIZE_Min_data_ram_size),
  .BITSIZE_Mout_data_ram_size(BITSIZE_Mout_data_ram_size)) BMEMORY_CTRL_D10_i (.out1(out1),
  .Mout_oe_ram(Mout_oe_ram),
  .Mout_we_ram(Mout_we_ram),
  .Mout_addr_ram(Mout_addr_ram),
  .Mout_Wdata_ram(Mout_Wdata_ram),
  .Mout_data_ram_size(Mout_data_ram_size),
  .clock(clock),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .Min_oe_ram(Min_oe_ram),
  .Min_we_ram(Min_we_ram),
  .Min_addr_ram(Min_addr_ram),
  .M_Rdata_ram(M_Rdata_ram),
  .Min_Wdata_ram(Min_Wdata_ram),
  .Min_data_ram_size(Min_data_ram_size),
  .M_DataRdy(M_DataRdy));" VHDL_PROVIDED="
begin
  BMEMORY_CTRL_D10_i0 : BMEMORY_CTRL_D10 generic map(BITSIZE_in1=>BITSIZE_in1, BITSIZE_in2=>BITSIZE_in2, BITSIZE_in3=>BITSIZE_in3, BITSIZE_out1=>BITSIZE_out1, BITSIZE_Min_addr_ram=>BITSIZE_Min_addr_ram, BITSIZE_Mout_addr_ram=>BITSIZE_Mout_addr_ram, BITSIZE_M_Rdata_ram=>BITSIZE_M_Rdata_ram, BITSIZE_Min_Wdata_ram=>BITSIZE_Min_Wdata_ram, BITSIZE_Mout_Wdata_ram=>BITSIZE_Mout_Wdata_ram, BITSIZE_Min_data_ram_size=>BITSIZE_Min_data_ram_size, BITSIZE_Mout_data_ram_size=>BITSIZE_Mout_data_ram_size) port map (out1 => out1, Mout_oe_ram => Mout_oe_ram, Mout_we_ram => Mout_we_ram, Mout_addr_ram => Mout_addr_ram, Mout_Wdata_ram => Mout_Wdata_ram, Mout_data_ram_size => Mout_data_ram_size, clock => clock, in1 => in1, in2 => in2, in3 => in3, in4 => in4, sel_LOAD => sel_LOAD, sel_STORE => sel_STORE, Min_oe_ram => Min_oe_ram, Min_we_ram => Min_we_ram, Min_addr_ram => Min_addr_ram, M_Rdata_ram => M_Rdata_ram, Min_Wdata_ram => Min_Wdata_ram, Min_data_ram_size => Min_data_ram_size, M_DataRdy => M_DataRdy);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRL_D11_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <memory_ctrl_type>D11</memory_ctrl_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRL_D11_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRL_D11_3"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="BMEMORY_CTRL_D11_3 in1 in2 in3 out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" IP_COMPONENT="BMEMORY_CTRL_D11" VERILOG_PROVIDED="BMEMORY_CTRL_D11 #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_Min_addr_ram(BITSIZE_Min_addr_ram),
  .BITSIZE_Mout_addr_ram(BITSIZE_Mout_addr_ram),
  .BITSIZE_M_Rdata_ram(BITSIZE_M_Rdata_ram),
  .BITSIZE_Min_Wdata_ram(BITSIZE_Min_Wdata_ram),
  .BITSIZE_Mout_Wdata_ram(BITSIZE_Mout_Wdata_ram),
  .BITSIZE_Min_data_ram_size(BITSIZE_Min_data_ram_size),
  .BITSIZE_Mout_data_ram_size(BITSIZE_Mout_data_ram_size)) BMEMORY_CTRL_D11_i (.out1(out1),
  .Mout_oe_ram(Mout_oe_ram),
  .Mout_we_ram(Mout_we_ram),
  .Mout_addr_ram(Mout_addr_ram),
  .Mout_Wdata_ram(Mout_Wdata_ram),
  .Mout_data_ram_size(Mout_data_ram_size),
  .clock(clock),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .Min_oe_ram(Min_oe_ram),
  .Min_we_ram(Min_we_ram),
  .Min_addr_ram(Min_addr_ram),
  .M_Rdata_ram(M_Rdata_ram),
  .Min_Wdata_ram(Min_Wdata_ram),
  .Min_data_ram_size(Min_data_ram_size),
  .M_DataRdy(M_DataRdy));" VHDL_PROVIDED="
begin
  BMEMORY_CTRL_D11_i0 : BMEMORY_CTRL_D11 generic map(BITSIZE_in1=>BITSIZE_in1, BITSIZE_in2=>BITSIZE_in2, BITSIZE_in3=>BITSIZE_in3, BITSIZE_out1=>BITSIZE_out1, BITSIZE_Min_addr_ram=>BITSIZE_Min_addr_ram, BITSIZE_Mout_addr_ram=>BITSIZE_Mout_addr_ram, BITSIZE_M_Rdata_ram=>BITSIZE_M_Rdata_ram, BITSIZE_Min_Wdata_ram=>BITSIZE_Min_Wdata_ram, BITSIZE_Mout_Wdata_ram=>BITSIZE_Mout_Wdata_ram, BITSIZE_Min_data_ram_size=>BITSIZE_Min_data_ram_size, BITSIZE_Mout_data_ram_size=>BITSIZE_Mout_data_ram_size) port map (out1 => out1, Mout_oe_ram => Mout_oe_ram, Mout_we_ram => Mout_we_ram, Mout_addr_ram => Mout_addr_ram, Mout_Wdata_ram => Mout_Wdata_ram, Mout_data_ram_size => Mout_data_ram_size, clock => clock, in1 => in1, in2 => in2, in3 => in3, in4 => in4, sel_LOAD => sel_LOAD, sel_STORE => sel_STORE, Min_oe_ram => Min_oe_ram, Min_we_ram => Min_we_ram, Min_addr_ram => Min_addr_ram, M_Rdata_ram => M_Rdata_ram, Min_Wdata_ram => Min_Wdata_ram, Min_data_ram_size => Min_data_ram_size, M_DataRdy => M_DataRdy);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRL_D11_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="5"/>
      <operation operation_name="STORE" initiation_time="1" cycles="3"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <memory_ctrl_type>D11</memory_ctrl_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRL_D11_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRL_D11_4"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="BMEMORY_CTRL_D11_4 in1 in2 in3 out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" IP_COMPONENT="BMEMORY_CTRL_D11" VERILOG_PROVIDED="BMEMORY_CTRL_D11 #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_Min_addr_ram(BITSIZE_Min_addr_ram),
  .BITSIZE_Mout_addr_ram(BITSIZE_Mout_addr_ram),
  .BITSIZE_M_Rdata_ram(BITSIZE_M_Rdata_ram),
  .BITSIZE_Min_Wdata_ram(BITSIZE_Min_Wdata_ram),
  .BITSIZE_Mout_Wdata_ram(BITSIZE_Mout_Wdata_ram),
  .BITSIZE_Min_data_ram_size(BITSIZE_Min_data_ram_size),
  .BITSIZE_Mout_data_ram_size(BITSIZE_Mout_data_ram_size)) BMEMORY_CTRL_D11_i (.out1(out1),
  .Mout_oe_ram(Mout_oe_ram),
  .Mout_we_ram(Mout_we_ram),
  .Mout_addr_ram(Mout_addr_ram),
  .Mout_Wdata_ram(Mout_Wdata_ram),
  .Mout_data_ram_size(Mout_data_ram_size),
  .clock(clock),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .Min_oe_ram(Min_oe_ram),
  .Min_we_ram(Min_we_ram),
  .Min_addr_ram(Min_addr_ram),
  .M_Rdata_ram(M_Rdata_ram),
  .Min_Wdata_ram(Min_Wdata_ram),
  .Min_data_ram_size(Min_data_ram_size),
  .M_DataRdy(M_DataRdy));" VHDL_PROVIDED="
begin
  BMEMORY_CTRL_D11_i0 : BMEMORY_CTRL_D11 generic map(BITSIZE_in1=>BITSIZE_in1, BITSIZE_in2=>BITSIZE_in2, BITSIZE_in3=>BITSIZE_in3, BITSIZE_out1=>BITSIZE_out1, BITSIZE_Min_addr_ram=>BITSIZE_Min_addr_ram, BITSIZE_Mout_addr_ram=>BITSIZE_Mout_addr_ram, BITSIZE_M_Rdata_ram=>BITSIZE_M_Rdata_ram, BITSIZE_Min_Wdata_ram=>BITSIZE_Min_Wdata_ram, BITSIZE_Mout_Wdata_ram=>BITSIZE_Mout_Wdata_ram, BITSIZE_Min_data_ram_size=>BITSIZE_Min_data_ram_size, BITSIZE_Mout_data_ram_size=>BITSIZE_Mout_data_ram_size) port map (out1 => out1, Mout_oe_ram => Mout_oe_ram, Mout_we_ram => Mout_we_ram, Mout_addr_ram => Mout_addr_ram, Mout_Wdata_ram => Mout_Wdata_ram, Mout_data_ram_size => Mout_data_ram_size, clock => clock, in1 => in1, in2 => in2, in3 => in3, in4 => in4, sel_LOAD => sel_LOAD, sel_STORE => sel_STORE, Min_oe_ram => Min_oe_ram, Min_we_ram => Min_we_ram, Min_addr_ram => Min_addr_ram, M_Rdata_ram => M_Rdata_ram, Min_Wdata_ram => Min_Wdata_ram, Min_data_ram_size => Min_data_ram_size, M_DataRdy => M_DataRdy);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRL_D21_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="5"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <memory_ctrl_type>D21</memory_ctrl_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRL_D21_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRL_D21_3"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="BMEMORY_CTRL_D21_3 in1 in2 in3 out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" IP_COMPONENT="BMEMORY_CTRL_D21" VERILOG_PROVIDED="BMEMORY_CTRL_D21 #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_Min_addr_ram(BITSIZE_Min_addr_ram),
  .BITSIZE_Mout_addr_ram(BITSIZE_Mout_addr_ram),
  .BITSIZE_M_Rdata_ram(BITSIZE_M_Rdata_ram),
  .BITSIZE_Min_Wdata_ram(BITSIZE_Min_Wdata_ram),
  .BITSIZE_Mout_Wdata_ram(BITSIZE_Mout_Wdata_ram),
  .BITSIZE_Min_data_ram_size(BITSIZE_Min_data_ram_size),
  .BITSIZE_Mout_data_ram_size(BITSIZE_Mout_data_ram_size)) BMEMORY_CTRL_D21_i (.out1(out1),
  .Mout_oe_ram(Mout_oe_ram),
  .Mout_we_ram(Mout_we_ram),
  .Mout_addr_ram(Mout_addr_ram),
  .Mout_Wdata_ram(Mout_Wdata_ram),
  .Mout_data_ram_size(Mout_data_ram_size),
  .clock(clock),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .Min_oe_ram(Min_oe_ram),
  .Min_we_ram(Min_we_ram),
  .Min_addr_ram(Min_addr_ram),
  .M_Rdata_ram(M_Rdata_ram),
  .Min_Wdata_ram(Min_Wdata_ram),
  .Min_data_ram_size(Min_data_ram_size),
  .M_DataRdy(M_DataRdy));" VHDL_PROVIDED="
begin
  BMEMORY_CTRL_D21_i0 : BMEMORY_CTRL_D21 generic map(BITSIZE_in1=>BITSIZE_in1, BITSIZE_in2=>BITSIZE_in2, BITSIZE_in3=>BITSIZE_in3, BITSIZE_out1=>BITSIZE_out1, BITSIZE_Min_addr_ram=>BITSIZE_Min_addr_ram, BITSIZE_Mout_addr_ram=>BITSIZE_Mout_addr_ram, BITSIZE_M_Rdata_ram=>BITSIZE_M_Rdata_ram, BITSIZE_Min_Wdata_ram=>BITSIZE_Min_Wdata_ram, BITSIZE_Mout_Wdata_ram=>BITSIZE_Mout_Wdata_ram, BITSIZE_Min_data_ram_size=>BITSIZE_Min_data_ram_size, BITSIZE_Mout_data_ram_size=>BITSIZE_Mout_data_ram_size) port map (out1 => out1, Mout_oe_ram => Mout_oe_ram, Mout_we_ram => Mout_we_ram, Mout_addr_ram => Mout_addr_ram, Mout_Wdata_ram => Mout_Wdata_ram, Mout_data_ram_size => Mout_data_ram_size, clock => clock, in1 => in1, in2 => in2, in3 => in3, in4 => in4, sel_LOAD => sel_LOAD, sel_STORE => sel_STORE, Min_oe_ram => Min_oe_ram, Min_we_ram => Min_we_ram, Min_addr_ram => Min_addr_ram, M_Rdata_ram => M_Rdata_ram, Min_Wdata_ram => Min_Wdata_ram, Min_data_ram_size => Min_data_ram_size, M_DataRdy => M_DataRdy);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRL_D21_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="6"/>
      <operation operation_name="STORE" initiation_time="1" cycles="3"/>
      <channels_type>MEM_ACC_11,MEM_ACC_N1</channels_type>
      <memory_ctrl_type>D21</memory_ctrl_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRL_D21_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRL_D21_4"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="BMEMORY_CTRL_D21_4 in1 in2 in3 out1 Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" IP_COMPONENT="BMEMORY_CTRL_D21" VERILOG_PROVIDED="BMEMORY_CTRL_D21 #(
  .BITSIZE_in1(BITSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .BITSIZE_out1(BITSIZE_out1),
  .BITSIZE_Min_addr_ram(BITSIZE_Min_addr_ram),
  .BITSIZE_Mout_addr_ram(BITSIZE_Mout_addr_ram),
  .BITSIZE_M_Rdata_ram(BITSIZE_M_Rdata_ram),
  .BITSIZE_Min_Wdata_ram(BITSIZE_Min_Wdata_ram),
  .BITSIZE_Mout_Wdata_ram(BITSIZE_Mout_Wdata_ram),
  .BITSIZE_Min_data_ram_size(BITSIZE_Min_data_ram_size),
  .BITSIZE_Mout_data_ram_size(BITSIZE_Mout_data_ram_size)) BMEMORY_CTRL_D21_i (.out1(out1),
  .Mout_oe_ram(Mout_oe_ram),
  .Mout_we_ram(Mout_we_ram),
  .Mout_addr_ram(Mout_addr_ram),
  .Mout_Wdata_ram(Mout_Wdata_ram),
  .Mout_data_ram_size(Mout_data_ram_size),
  .clock(clock),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .Min_oe_ram(Min_oe_ram),
  .Min_we_ram(Min_we_ram),
  .Min_addr_ram(Min_addr_ram),
  .M_Rdata_ram(M_Rdata_ram),
  .Min_Wdata_ram(Min_Wdata_ram),
  .Min_data_ram_size(Min_data_ram_size),
  .M_DataRdy(M_DataRdy));" VHDL_PROVIDED="
begin
  BMEMORY_CTRL_D21_i0 : BMEMORY_CTRL_D21 generic map(BITSIZE_in1=>BITSIZE_in1, BITSIZE_in2=>BITSIZE_in2, BITSIZE_in3=>BITSIZE_in3, BITSIZE_out1=>BITSIZE_out1, BITSIZE_Min_addr_ram=>BITSIZE_Min_addr_ram, BITSIZE_Mout_addr_ram=>BITSIZE_Mout_addr_ram, BITSIZE_M_Rdata_ram=>BITSIZE_M_Rdata_ram, BITSIZE_Min_Wdata_ram=>BITSIZE_Min_Wdata_ram, BITSIZE_Mout_Wdata_ram=>BITSIZE_Mout_Wdata_ram, BITSIZE_Min_data_ram_size=>BITSIZE_Min_data_ram_size, BITSIZE_Mout_data_ram_size=>BITSIZE_Mout_data_ram_size) port map (out1 => out1, Mout_oe_ram => Mout_oe_ram, Mout_we_ram => Mout_we_ram, Mout_addr_ram => Mout_addr_ram, Mout_Wdata_ram => Mout_Wdata_ram, Mout_data_ram_size => Mout_data_ram_size, clock => clock, in1 => in1, in2 => in2, in3 => in3, in4 => in4, sel_LOAD => sel_LOAD, sel_STORE => sel_STORE, Min_oe_ram => Min_oe_ram, Min_we_ram => Min_we_ram, Min_addr_ram => Min_addr_ram, M_Rdata_ram => M_Rdata_ram, Min_Wdata_ram => Min_Wdata_ram, Min_data_ram_size => Min_data_ram_size, M_DataRdy => M_DataRdy);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRLN_D10_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <memory_ctrl_type>D10</memory_ctrl_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRLN_D10_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRLN_D10_3"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="BMEMORY_CTRLN_D10_3 in1 in2 in3 in4 sel_LOAD sel_STORE out1 Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" IP_COMPONENT="BMEMORY_CTRLN_D10" VERILOG_PROVIDED="BMEMORY_CTRLN_D10 #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_in4(BITSIZE_in4),
  .PORTSIZE_in4(PORTSIZE_in4),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_Min_oe_ram(BITSIZE_Min_oe_ram),
  .PORTSIZE_Min_oe_ram(PORTSIZE_Min_oe_ram),
  .BITSIZE_Min_we_ram(BITSIZE_Min_we_ram),
  .PORTSIZE_Min_we_ram(PORTSIZE_Min_we_ram),
  .BITSIZE_Mout_oe_ram(BITSIZE_Mout_oe_ram),
  .PORTSIZE_Mout_oe_ram(PORTSIZE_Mout_oe_ram),
  .BITSIZE_Mout_we_ram(BITSIZE_Mout_we_ram),
  .PORTSIZE_Mout_we_ram(PORTSIZE_Mout_we_ram),
  .BITSIZE_M_DataRdy(BITSIZE_M_DataRdy),
  .PORTSIZE_M_DataRdy(PORTSIZE_M_DataRdy),
  .BITSIZE_Min_addr_ram(BITSIZE_Min_addr_ram),
  .PORTSIZE_Min_addr_ram(PORTSIZE_Min_addr_ram),
  .BITSIZE_Mout_addr_ram(BITSIZE_Mout_addr_ram),
  .PORTSIZE_Mout_addr_ram(PORTSIZE_Mout_addr_ram),
  .BITSIZE_M_Rdata_ram(BITSIZE_M_Rdata_ram),
  .PORTSIZE_M_Rdata_ram(PORTSIZE_M_Rdata_ram),
  .BITSIZE_Min_Wdata_ram(BITSIZE_Min_Wdata_ram),
  .PORTSIZE_Min_Wdata_ram(PORTSIZE_Min_Wdata_ram),
  .BITSIZE_Mout_Wdata_ram(BITSIZE_Mout_Wdata_ram),
  .PORTSIZE_Mout_Wdata_ram(PORTSIZE_Mout_Wdata_ram),
  .BITSIZE_Min_data_ram_size(BITSIZE_Min_data_ram_size),
  .PORTSIZE_Min_data_ram_size(PORTSIZE_Min_data_ram_size),
  .BITSIZE_Mout_data_ram_size(BITSIZE_Mout_data_ram_size),
  .PORTSIZE_Mout_data_ram_size(PORTSIZE_Mout_data_ram_size)) BMEMORY_CTRLN_D10_i0 (.out1(out1),
  .Mout_oe_ram(Mout_oe_ram),
  .Mout_we_ram(Mout_we_ram),
  .Mout_addr_ram(Mout_addr_ram),
  .Mout_Wdata_ram(Mout_Wdata_ram),
  .Mout_data_ram_size(Mout_data_ram_size),
  .clock(clock),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .Min_oe_ram(Min_oe_ram),
  .Min_we_ram(Min_we_ram),
  .Min_addr_ram(Min_addr_ram),
  .M_Rdata_ram(M_Rdata_ram),
  .Min_Wdata_ram(Min_Wdata_ram),
  .Min_data_ram_size(Min_data_ram_size),
  .M_DataRdy(M_DataRdy));" VHDL_PROVIDED="
begin
  BMEMORY_CTRLN_D10_i0 : BMEMORY_CTRLN_D10 generic map(BITSIZE_in1=>BITSIZE_in1, PORTSIZE_in1=>PORTSIZE_in1, BITSIZE_in2=>BITSIZE_in2, PORTSIZE_in2=>PORTSIZE_in2, BITSIZE_in3=>BITSIZE_in3, PORTSIZE_in3=>PORTSIZE_in3, BITSIZE_in4=>BITSIZE_in4, PORTSIZE_in4=>PORTSIZE_in4, BITSIZE_sel_LOAD=>BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=>PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=>BITSIZE_sel_STORE, PORTSIZE_sel_STORE=>PORTSIZE_sel_STORE, BITSIZE_out1=>BITSIZE_out1, PORTSIZE_out1=>PORTSIZE_out1, BITSIZE_Min_oe_ram=>BITSIZE_Min_oe_ram, PORTSIZE_Min_oe_ram=>PORTSIZE_Min_oe_ram, BITSIZE_Min_we_ram=>BITSIZE_Min_we_ram, PORTSIZE_Min_we_ram=>PORTSIZE_Min_we_ram, BITSIZE_Mout_oe_ram=>BITSIZE_Mout_oe_ram, PORTSIZE_Mout_oe_ram=>PORTSIZE_Mout_oe_ram, BITSIZE_Mout_we_ram=>BITSIZE_Mout_we_ram, PORTSIZE_Mout_we_ram=>PORTSIZE_Mout_we_ram, BITSIZE_M_DataRdy=>BITSIZE_M_DataRdy, PORTSIZE_M_DataRdy=>PORTSIZE_M_DataRdy, BITSIZE_Min_addr_ram=>BITSIZE_Min_addr_ram, PORTSIZE_Min_addr_ram=>PORTSIZE_Min_addr_ram, BITSIZE_Mout_addr_ram=>BITSIZE_Mout_addr_ram, PORTSIZE_Mout_addr_ram=>PORTSIZE_Mout_addr_ram, BITSIZE_M_Rdata_ram=>BITSIZE_M_Rdata_ram, PORTSIZE_M_Rdata_ram=>PORTSIZE_M_Rdata_ram, BITSIZE_Min_Wdata_ram=>BITSIZE_Min_Wdata_ram, PORTSIZE_Min_Wdata_ram=>PORTSIZE_Min_Wdata_ram, BITSIZE_Mout_Wdata_ram=>BITSIZE_Mout_Wdata_ram, PORTSIZE_Mout_Wdata_ram=>PORTSIZE_Mout_Wdata_ram, BITSIZE_Min_data_ram_size=>BITSIZE_Min_data_ram_size, PORTSIZE_Min_data_ram_size=>PORTSIZE_Min_data_ram_size, BITSIZE_Mout_data_ram_size=>BITSIZE_Mout_data_ram_size, PORTSIZE_Mout_data_ram_size=>PORTSIZE_Mout_data_ram_size) port map (out1 => out1, Mout_oe_ram => Mout_oe_ram, Mout_we_ram => Mout_we_ram, Mout_addr_ram => Mout_addr_ram, Mout_Wdata_ram => Mout_Wdata_ram, Mout_data_ram_size => Mout_data_ram_size, clock => clock, in1 => in1, in2 => in2, in3 => in3, in4 => in4, sel_LOAD => sel_LOAD, sel_STORE => sel_STORE, Min_oe_ram => Min_oe_ram, Min_we_ram => Min_we_ram, Min_addr_ram => Min_addr_ram, M_Rdata_ram => M_Rdata_ram, Min_Wdata_ram => Min_Wdata_ram, Min_data_ram_size => Min_data_ram_size, M_DataRdy => M_DataRdy);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRLN_D10_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="5"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <memory_ctrl_type>D10</memory_ctrl_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRLN_D10_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRLN_D10_4"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="BMEMORY_CTRLN_D10_4 in1 in2 in3 in4 sel_LOAD sel_STORE out1 Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" IP_COMPONENT="BMEMORY_CTRLN_D10" VERILOG_PROVIDED="BMEMORY_CTRLN_D10 #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_in4(BITSIZE_in4),
  .PORTSIZE_in4(PORTSIZE_in4),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_Min_oe_ram(BITSIZE_Min_oe_ram),
  .PORTSIZE_Min_oe_ram(PORTSIZE_Min_oe_ram),
  .BITSIZE_Min_we_ram(BITSIZE_Min_we_ram),
  .PORTSIZE_Min_we_ram(PORTSIZE_Min_we_ram),
  .BITSIZE_Mout_oe_ram(BITSIZE_Mout_oe_ram),
  .PORTSIZE_Mout_oe_ram(PORTSIZE_Mout_oe_ram),
  .BITSIZE_Mout_we_ram(BITSIZE_Mout_we_ram),
  .PORTSIZE_Mout_we_ram(PORTSIZE_Mout_we_ram),
  .BITSIZE_M_DataRdy(BITSIZE_M_DataRdy),
  .PORTSIZE_M_DataRdy(PORTSIZE_M_DataRdy),
  .BITSIZE_Min_addr_ram(BITSIZE_Min_addr_ram),
  .PORTSIZE_Min_addr_ram(PORTSIZE_Min_addr_ram),
  .BITSIZE_Mout_addr_ram(BITSIZE_Mout_addr_ram),
  .PORTSIZE_Mout_addr_ram(PORTSIZE_Mout_addr_ram),
  .BITSIZE_M_Rdata_ram(BITSIZE_M_Rdata_ram),
  .PORTSIZE_M_Rdata_ram(PORTSIZE_M_Rdata_ram),
  .BITSIZE_Min_Wdata_ram(BITSIZE_Min_Wdata_ram),
  .PORTSIZE_Min_Wdata_ram(PORTSIZE_Min_Wdata_ram),
  .BITSIZE_Mout_Wdata_ram(BITSIZE_Mout_Wdata_ram),
  .PORTSIZE_Mout_Wdata_ram(PORTSIZE_Mout_Wdata_ram),
  .BITSIZE_Min_data_ram_size(BITSIZE_Min_data_ram_size),
  .PORTSIZE_Min_data_ram_size(PORTSIZE_Min_data_ram_size),
  .BITSIZE_Mout_data_ram_size(BITSIZE_Mout_data_ram_size),
  .PORTSIZE_Mout_data_ram_size(PORTSIZE_Mout_data_ram_size)) BMEMORY_CTRLN_D10_i0 (.out1(out1),
  .Mout_oe_ram(Mout_oe_ram),
  .Mout_we_ram(Mout_we_ram),
  .Mout_addr_ram(Mout_addr_ram),
  .Mout_Wdata_ram(Mout_Wdata_ram),
  .Mout_data_ram_size(Mout_data_ram_size),
  .clock(clock),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .Min_oe_ram(Min_oe_ram),
  .Min_we_ram(Min_we_ram),
  .Min_addr_ram(Min_addr_ram),
  .M_Rdata_ram(M_Rdata_ram),
  .Min_Wdata_ram(Min_Wdata_ram),
  .Min_data_ram_size(Min_data_ram_size),
  .M_DataRdy(M_DataRdy));" VHDL_PROVIDED="
begin
  BMEMORY_CTRLN_D10_i0 : BMEMORY_CTRLN_D10 generic map(BITSIZE_in1=>BITSIZE_in1, PORTSIZE_in1=>PORTSIZE_in1, BITSIZE_in2=>BITSIZE_in2, PORTSIZE_in2=>PORTSIZE_in2, BITSIZE_in3=>BITSIZE_in3, PORTSIZE_in3=>PORTSIZE_in3, BITSIZE_in4=>BITSIZE_in4, PORTSIZE_in4=>PORTSIZE_in4, BITSIZE_sel_LOAD=>BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=>PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=>BITSIZE_sel_STORE, PORTSIZE_sel_STORE=>PORTSIZE_sel_STORE, BITSIZE_out1=>BITSIZE_out1, PORTSIZE_out1=>PORTSIZE_out1, BITSIZE_Min_oe_ram=>BITSIZE_Min_oe_ram, PORTSIZE_Min_oe_ram=>PORTSIZE_Min_oe_ram, BITSIZE_Min_we_ram=>BITSIZE_Min_we_ram, PORTSIZE_Min_we_ram=>PORTSIZE_Min_we_ram, BITSIZE_Mout_oe_ram=>BITSIZE_Mout_oe_ram, PORTSIZE_Mout_oe_ram=>PORTSIZE_Mout_oe_ram, BITSIZE_Mout_we_ram=>BITSIZE_Mout_we_ram, PORTSIZE_Mout_we_ram=>PORTSIZE_Mout_we_ram, BITSIZE_M_DataRdy=>BITSIZE_M_DataRdy, PORTSIZE_M_DataRdy=>PORTSIZE_M_DataRdy, BITSIZE_Min_addr_ram=>BITSIZE_Min_addr_ram, PORTSIZE_Min_addr_ram=>PORTSIZE_Min_addr_ram, BITSIZE_Mout_addr_ram=>BITSIZE_Mout_addr_ram, PORTSIZE_Mout_addr_ram=>PORTSIZE_Mout_addr_ram, BITSIZE_M_Rdata_ram=>BITSIZE_M_Rdata_ram, PORTSIZE_M_Rdata_ram=>PORTSIZE_M_Rdata_ram, BITSIZE_Min_Wdata_ram=>BITSIZE_Min_Wdata_ram, PORTSIZE_Min_Wdata_ram=>PORTSIZE_Min_Wdata_ram, BITSIZE_Mout_Wdata_ram=>BITSIZE_Mout_Wdata_ram, PORTSIZE_Mout_Wdata_ram=>PORTSIZE_Mout_Wdata_ram, BITSIZE_Min_data_ram_size=>BITSIZE_Min_data_ram_size, PORTSIZE_Min_data_ram_size=>PORTSIZE_Min_data_ram_size, BITSIZE_Mout_data_ram_size=>BITSIZE_Mout_data_ram_size, PORTSIZE_Mout_data_ram_size=>PORTSIZE_Mout_data_ram_size) port map (out1 => out1, Mout_oe_ram => Mout_oe_ram, Mout_we_ram => Mout_we_ram, Mout_addr_ram => Mout_addr_ram, Mout_Wdata_ram => Mout_Wdata_ram, Mout_data_ram_size => Mout_data_ram_size, clock => clock, in1 => in1, in2 => in2, in3 => in3, in4 => in4, sel_LOAD => sel_LOAD, sel_STORE => sel_STORE, Min_oe_ram => Min_oe_ram, Min_we_ram => Min_we_ram, Min_addr_ram => Min_addr_ram, M_Rdata_ram => M_Rdata_ram, Min_Wdata_ram => Min_Wdata_ram, Min_data_ram_size => Min_data_ram_size, M_DataRdy => M_DataRdy);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRLN_D11_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="4"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <memory_ctrl_type>D11</memory_ctrl_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRLN_D11_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRLN_D11_3"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="BMEMORY_CTRLN_D11_3 in1 in2 in3 in4 sel_LOAD sel_STORE out1 Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" IP_COMPONENT="BMEMORY_CTRLN_D11" VERILOG_PROVIDED="BMEMORY_CTRLN_D11 #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_in4(BITSIZE_in4),
  .PORTSIZE_in4(PORTSIZE_in4),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_Min_oe_ram(BITSIZE_Min_oe_ram),
  .PORTSIZE_Min_oe_ram(PORTSIZE_Min_oe_ram),
  .BITSIZE_Min_we_ram(BITSIZE_Min_we_ram),
  .PORTSIZE_Min_we_ram(PORTSIZE_Min_we_ram),
  .BITSIZE_Mout_oe_ram(BITSIZE_Mout_oe_ram),
  .PORTSIZE_Mout_oe_ram(PORTSIZE_Mout_oe_ram),
  .BITSIZE_Mout_we_ram(BITSIZE_Mout_we_ram),
  .PORTSIZE_Mout_we_ram(PORTSIZE_Mout_we_ram),
  .BITSIZE_M_DataRdy(BITSIZE_M_DataRdy),
  .PORTSIZE_M_DataRdy(PORTSIZE_M_DataRdy),
  .BITSIZE_Min_addr_ram(BITSIZE_Min_addr_ram),
  .PORTSIZE_Min_addr_ram(PORTSIZE_Min_addr_ram),
  .BITSIZE_Mout_addr_ram(BITSIZE_Mout_addr_ram),
  .PORTSIZE_Mout_addr_ram(PORTSIZE_Mout_addr_ram),
  .BITSIZE_M_Rdata_ram(BITSIZE_M_Rdata_ram),
  .PORTSIZE_M_Rdata_ram(PORTSIZE_M_Rdata_ram),
  .BITSIZE_Min_Wdata_ram(BITSIZE_Min_Wdata_ram),
  .PORTSIZE_Min_Wdata_ram(PORTSIZE_Min_Wdata_ram),
  .BITSIZE_Mout_Wdata_ram(BITSIZE_Mout_Wdata_ram),
  .PORTSIZE_Mout_Wdata_ram(PORTSIZE_Mout_Wdata_ram),
  .BITSIZE_Min_data_ram_size(BITSIZE_Min_data_ram_size),
  .PORTSIZE_Min_data_ram_size(PORTSIZE_Min_data_ram_size),
  .BITSIZE_Mout_data_ram_size(BITSIZE_Mout_data_ram_size),
  .PORTSIZE_Mout_data_ram_size(PORTSIZE_Mout_data_ram_size)) BMEMORY_CTRLN_D11_i0 (.out1(out1),
  .Mout_oe_ram(Mout_oe_ram),
  .Mout_we_ram(Mout_we_ram),
  .Mout_addr_ram(Mout_addr_ram),
  .Mout_Wdata_ram(Mout_Wdata_ram),
  .Mout_data_ram_size(Mout_data_ram_size),
  .clock(clock),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .Min_oe_ram(Min_oe_ram),
  .Min_we_ram(Min_we_ram),
  .Min_addr_ram(Min_addr_ram),
  .M_Rdata_ram(M_Rdata_ram),
  .Min_Wdata_ram(Min_Wdata_ram),
  .Min_data_ram_size(Min_data_ram_size),
  .M_DataRdy(M_DataRdy));" VHDL_PROVIDED="
begin
  BMEMORY_CTRLN_D11_i0 : BMEMORY_CTRLN_D11 generic map(BITSIZE_in1=>BITSIZE_in1, PORTSIZE_in1=>PORTSIZE_in1, BITSIZE_in2=>BITSIZE_in2, PORTSIZE_in2=>PORTSIZE_in2, BITSIZE_in3=>BITSIZE_in3, PORTSIZE_in3=>PORTSIZE_in3, BITSIZE_in4=>BITSIZE_in4, PORTSIZE_in4=>PORTSIZE_in4, BITSIZE_sel_LOAD=>BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=>PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=>BITSIZE_sel_STORE, PORTSIZE_sel_STORE=>PORTSIZE_sel_STORE, BITSIZE_out1=>BITSIZE_out1, PORTSIZE_out1=>PORTSIZE_out1, BITSIZE_Min_oe_ram=>BITSIZE_Min_oe_ram, PORTSIZE_Min_oe_ram=>PORTSIZE_Min_oe_ram, BITSIZE_Min_we_ram=>BITSIZE_Min_we_ram, PORTSIZE_Min_we_ram=>PORTSIZE_Min_we_ram, BITSIZE_Mout_oe_ram=>BITSIZE_Mout_oe_ram, PORTSIZE_Mout_oe_ram=>PORTSIZE_Mout_oe_ram, BITSIZE_Mout_we_ram=>BITSIZE_Mout_we_ram, PORTSIZE_Mout_we_ram=>PORTSIZE_Mout_we_ram, BITSIZE_M_DataRdy=>BITSIZE_M_DataRdy, PORTSIZE_M_DataRdy=>PORTSIZE_M_DataRdy, BITSIZE_Min_addr_ram=>BITSIZE_Min_addr_ram, PORTSIZE_Min_addr_ram=>PORTSIZE_Min_addr_ram, BITSIZE_Mout_addr_ram=>BITSIZE_Mout_addr_ram, PORTSIZE_Mout_addr_ram=>PORTSIZE_Mout_addr_ram, BITSIZE_M_Rdata_ram=>BITSIZE_M_Rdata_ram, PORTSIZE_M_Rdata_ram=>PORTSIZE_M_Rdata_ram, BITSIZE_Min_Wdata_ram=>BITSIZE_Min_Wdata_ram, PORTSIZE_Min_Wdata_ram=>PORTSIZE_Min_Wdata_ram, BITSIZE_Mout_Wdata_ram=>BITSIZE_Mout_Wdata_ram, PORTSIZE_Mout_Wdata_ram=>PORTSIZE_Mout_Wdata_ram, BITSIZE_Min_data_ram_size=>BITSIZE_Min_data_ram_size, PORTSIZE_Min_data_ram_size=>PORTSIZE_Min_data_ram_size, BITSIZE_Mout_data_ram_size=>BITSIZE_Mout_data_ram_size, PORTSIZE_Mout_data_ram_size=>PORTSIZE_Mout_data_ram_size) port map (out1 => out1, Mout_oe_ram => Mout_oe_ram, Mout_we_ram => Mout_we_ram, Mout_addr_ram => Mout_addr_ram, Mout_Wdata_ram => Mout_Wdata_ram, Mout_data_ram_size => Mout_data_ram_size, clock => clock, in1 => in1, in2 => in2, in3 => in3, in4 => in4, sel_LOAD => sel_LOAD, sel_STORE => sel_STORE, Min_oe_ram => Min_oe_ram, Min_we_ram => Min_we_ram, Min_addr_ram => Min_addr_ram, M_Rdata_ram => M_Rdata_ram, Min_Wdata_ram => Min_Wdata_ram, Min_data_ram_size => Min_data_ram_size, M_DataRdy => M_DataRdy);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRLN_D11_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="5"/>
      <operation operation_name="STORE" initiation_time="1" cycles="3"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <memory_ctrl_type>D11</memory_ctrl_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRLN_D11_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRLN_D11_4"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="BMEMORY_CTRLN_D11_4 in1 in2 in3 in4 sel_LOAD sel_STORE out1 Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" IP_COMPONENT="BMEMORY_CTRLN_D11" VERILOG_PROVIDED="BMEMORY_CTRLN_D11 #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_in4(BITSIZE_in4),
  .PORTSIZE_in4(PORTSIZE_in4),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_Min_oe_ram(BITSIZE_Min_oe_ram),
  .PORTSIZE_Min_oe_ram(PORTSIZE_Min_oe_ram),
  .BITSIZE_Min_we_ram(BITSIZE_Min_we_ram),
  .PORTSIZE_Min_we_ram(PORTSIZE_Min_we_ram),
  .BITSIZE_Mout_oe_ram(BITSIZE_Mout_oe_ram),
  .PORTSIZE_Mout_oe_ram(PORTSIZE_Mout_oe_ram),
  .BITSIZE_Mout_we_ram(BITSIZE_Mout_we_ram),
  .PORTSIZE_Mout_we_ram(PORTSIZE_Mout_we_ram),
  .BITSIZE_M_DataRdy(BITSIZE_M_DataRdy),
  .PORTSIZE_M_DataRdy(PORTSIZE_M_DataRdy),
  .BITSIZE_Min_addr_ram(BITSIZE_Min_addr_ram),
  .PORTSIZE_Min_addr_ram(PORTSIZE_Min_addr_ram),
  .BITSIZE_Mout_addr_ram(BITSIZE_Mout_addr_ram),
  .PORTSIZE_Mout_addr_ram(PORTSIZE_Mout_addr_ram),
  .BITSIZE_M_Rdata_ram(BITSIZE_M_Rdata_ram),
  .PORTSIZE_M_Rdata_ram(PORTSIZE_M_Rdata_ram),
  .BITSIZE_Min_Wdata_ram(BITSIZE_Min_Wdata_ram),
  .PORTSIZE_Min_Wdata_ram(PORTSIZE_Min_Wdata_ram),
  .BITSIZE_Mout_Wdata_ram(BITSIZE_Mout_Wdata_ram),
  .PORTSIZE_Mout_Wdata_ram(PORTSIZE_Mout_Wdata_ram),
  .BITSIZE_Min_data_ram_size(BITSIZE_Min_data_ram_size),
  .PORTSIZE_Min_data_ram_size(PORTSIZE_Min_data_ram_size),
  .BITSIZE_Mout_data_ram_size(BITSIZE_Mout_data_ram_size),
  .PORTSIZE_Mout_data_ram_size(PORTSIZE_Mout_data_ram_size)) BMEMORY_CTRLN_D11_i0 (.out1(out1),
  .Mout_oe_ram(Mout_oe_ram),
  .Mout_we_ram(Mout_we_ram),
  .Mout_addr_ram(Mout_addr_ram),
  .Mout_Wdata_ram(Mout_Wdata_ram),
  .Mout_data_ram_size(Mout_data_ram_size),
  .clock(clock),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .Min_oe_ram(Min_oe_ram),
  .Min_we_ram(Min_we_ram),
  .Min_addr_ram(Min_addr_ram),
  .M_Rdata_ram(M_Rdata_ram),
  .Min_Wdata_ram(Min_Wdata_ram),
  .Min_data_ram_size(Min_data_ram_size),
  .M_DataRdy(M_DataRdy));" VHDL_PROVIDED="
begin
  BMEMORY_CTRLN_D11_i0 : BMEMORY_CTRLN_D11 generic map(BITSIZE_in1=>BITSIZE_in1, PORTSIZE_in1=>PORTSIZE_in1, BITSIZE_in2=>BITSIZE_in2, PORTSIZE_in2=>PORTSIZE_in2, BITSIZE_in3=>BITSIZE_in3, PORTSIZE_in3=>PORTSIZE_in3, BITSIZE_in4=>BITSIZE_in4, PORTSIZE_in4=>PORTSIZE_in4, BITSIZE_sel_LOAD=>BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=>PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=>BITSIZE_sel_STORE, PORTSIZE_sel_STORE=>PORTSIZE_sel_STORE, BITSIZE_out1=>BITSIZE_out1, PORTSIZE_out1=>PORTSIZE_out1, BITSIZE_Min_oe_ram=>BITSIZE_Min_oe_ram, PORTSIZE_Min_oe_ram=>PORTSIZE_Min_oe_ram, BITSIZE_Min_we_ram=>BITSIZE_Min_we_ram, PORTSIZE_Min_we_ram=>PORTSIZE_Min_we_ram, BITSIZE_Mout_oe_ram=>BITSIZE_Mout_oe_ram, PORTSIZE_Mout_oe_ram=>PORTSIZE_Mout_oe_ram, BITSIZE_Mout_we_ram=>BITSIZE_Mout_we_ram, PORTSIZE_Mout_we_ram=>PORTSIZE_Mout_we_ram, BITSIZE_M_DataRdy=>BITSIZE_M_DataRdy, PORTSIZE_M_DataRdy=>PORTSIZE_M_DataRdy, BITSIZE_Min_addr_ram=>BITSIZE_Min_addr_ram, PORTSIZE_Min_addr_ram=>PORTSIZE_Min_addr_ram, BITSIZE_Mout_addr_ram=>BITSIZE_Mout_addr_ram, PORTSIZE_Mout_addr_ram=>PORTSIZE_Mout_addr_ram, BITSIZE_M_Rdata_ram=>BITSIZE_M_Rdata_ram, PORTSIZE_M_Rdata_ram=>PORTSIZE_M_Rdata_ram, BITSIZE_Min_Wdata_ram=>BITSIZE_Min_Wdata_ram, PORTSIZE_Min_Wdata_ram=>PORTSIZE_Min_Wdata_ram, BITSIZE_Mout_Wdata_ram=>BITSIZE_Mout_Wdata_ram, PORTSIZE_Mout_Wdata_ram=>PORTSIZE_Mout_Wdata_ram, BITSIZE_Min_data_ram_size=>BITSIZE_Min_data_ram_size, PORTSIZE_Min_data_ram_size=>PORTSIZE_Min_data_ram_size, BITSIZE_Mout_data_ram_size=>BITSIZE_Mout_data_ram_size, PORTSIZE_Mout_data_ram_size=>PORTSIZE_Mout_data_ram_size) port map (out1 => out1, Mout_oe_ram => Mout_oe_ram, Mout_we_ram => Mout_we_ram, Mout_addr_ram => Mout_addr_ram, Mout_Wdata_ram => Mout_Wdata_ram, Mout_data_ram_size => Mout_data_ram_size, clock => clock, in1 => in1, in2 => in2, in3 => in3, in4 => in4, sel_LOAD => sel_LOAD, sel_STORE => sel_STORE, Min_oe_ram => Min_oe_ram, Min_we_ram => Min_we_ram, Min_addr_ram => Min_addr_ram, M_Rdata_ram => M_Rdata_ram, Min_Wdata_ram => Min_Wdata_ram, Min_data_ram_size => Min_data_ram_size, M_DataRdy => M_DataRdy);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRLN_D21_3</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="5"/>
      <operation operation_name="STORE" initiation_time="1" cycles="2"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <memory_ctrl_type>D21</memory_ctrl_type>
      <bram_load_latency>3</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRLN_D21_3">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRLN_D21_3"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="BMEMORY_CTRLN_D21_3 in1 in2 in3 in4 sel_LOAD sel_STORE out1 Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" IP_COMPONENT="BMEMORY_CTRLN_D21" VERILOG_PROVIDED="BMEMORY_CTRLN_D21 #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_in4(BITSIZE_in4),
  .PORTSIZE_in4(PORTSIZE_in4),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_Min_oe_ram(BITSIZE_Min_oe_ram),
  .PORTSIZE_Min_oe_ram(PORTSIZE_Min_oe_ram),
  .BITSIZE_Min_we_ram(BITSIZE_Min_we_ram),
  .PORTSIZE_Min_we_ram(PORTSIZE_Min_we_ram),
  .BITSIZE_Mout_oe_ram(BITSIZE_Mout_oe_ram),
  .PORTSIZE_Mout_oe_ram(PORTSIZE_Mout_oe_ram),
  .BITSIZE_Mout_we_ram(BITSIZE_Mout_we_ram),
  .PORTSIZE_Mout_we_ram(PORTSIZE_Mout_we_ram),
  .BITSIZE_M_DataRdy(BITSIZE_M_DataRdy),
  .PORTSIZE_M_DataRdy(PORTSIZE_M_DataRdy),
  .BITSIZE_Min_addr_ram(BITSIZE_Min_addr_ram),
  .PORTSIZE_Min_addr_ram(PORTSIZE_Min_addr_ram),
  .BITSIZE_Mout_addr_ram(BITSIZE_Mout_addr_ram),
  .PORTSIZE_Mout_addr_ram(PORTSIZE_Mout_addr_ram),
  .BITSIZE_M_Rdata_ram(BITSIZE_M_Rdata_ram),
  .PORTSIZE_M_Rdata_ram(PORTSIZE_M_Rdata_ram),
  .BITSIZE_Min_Wdata_ram(BITSIZE_Min_Wdata_ram),
  .PORTSIZE_Min_Wdata_ram(PORTSIZE_Min_Wdata_ram),
  .BITSIZE_Mout_Wdata_ram(BITSIZE_Mout_Wdata_ram),
  .PORTSIZE_Mout_Wdata_ram(PORTSIZE_Mout_Wdata_ram),
  .BITSIZE_Min_data_ram_size(BITSIZE_Min_data_ram_size),
  .PORTSIZE_Min_data_ram_size(PORTSIZE_Min_data_ram_size),
  .BITSIZE_Mout_data_ram_size(BITSIZE_Mout_data_ram_size),
  .PORTSIZE_Mout_data_ram_size(PORTSIZE_Mout_data_ram_size)) BMEMORY_CTRLN_D21_i0 (.out1(out1),
  .Mout_oe_ram(Mout_oe_ram),
  .Mout_we_ram(Mout_we_ram),
  .Mout_addr_ram(Mout_addr_ram),
  .Mout_Wdata_ram(Mout_Wdata_ram),
  .Mout_data_ram_size(Mout_data_ram_size),
  .clock(clock),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .Min_oe_ram(Min_oe_ram),
  .Min_we_ram(Min_we_ram),
  .Min_addr_ram(Min_addr_ram),
  .M_Rdata_ram(M_Rdata_ram),
  .Min_Wdata_ram(Min_Wdata_ram),
  .Min_data_ram_size(Min_data_ram_size),
  .M_DataRdy(M_DataRdy));" VHDL_PROVIDED="
begin
  BMEMORY_CTRLN_D21_i0 : BMEMORY_CTRLN_D21 generic map(BITSIZE_in1=>BITSIZE_in1, PORTSIZE_in1=>PORTSIZE_in1, BITSIZE_in2=>BITSIZE_in2, PORTSIZE_in2=>PORTSIZE_in2, BITSIZE_in3=>BITSIZE_in3, PORTSIZE_in3=>PORTSIZE_in3, BITSIZE_in4=>BITSIZE_in4, PORTSIZE_in4=>PORTSIZE_in4, BITSIZE_sel_LOAD=>BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=>PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=>BITSIZE_sel_STORE, PORTSIZE_sel_STORE=>PORTSIZE_sel_STORE, BITSIZE_out1=>BITSIZE_out1, PORTSIZE_out1=>PORTSIZE_out1, BITSIZE_Min_oe_ram=>BITSIZE_Min_oe_ram, PORTSIZE_Min_oe_ram=>PORTSIZE_Min_oe_ram, BITSIZE_Min_we_ram=>BITSIZE_Min_we_ram, PORTSIZE_Min_we_ram=>PORTSIZE_Min_we_ram, BITSIZE_Mout_oe_ram=>BITSIZE_Mout_oe_ram, PORTSIZE_Mout_oe_ram=>PORTSIZE_Mout_oe_ram, BITSIZE_Mout_we_ram=>BITSIZE_Mout_we_ram, PORTSIZE_Mout_we_ram=>PORTSIZE_Mout_we_ram, BITSIZE_M_DataRdy=>BITSIZE_M_DataRdy, PORTSIZE_M_DataRdy=>PORTSIZE_M_DataRdy, BITSIZE_Min_addr_ram=>BITSIZE_Min_addr_ram, PORTSIZE_Min_addr_ram=>PORTSIZE_Min_addr_ram, BITSIZE_Mout_addr_ram=>BITSIZE_Mout_addr_ram, PORTSIZE_Mout_addr_ram=>PORTSIZE_Mout_addr_ram, BITSIZE_M_Rdata_ram=>BITSIZE_M_Rdata_ram, PORTSIZE_M_Rdata_ram=>PORTSIZE_M_Rdata_ram, BITSIZE_Min_Wdata_ram=>BITSIZE_Min_Wdata_ram, PORTSIZE_Min_Wdata_ram=>PORTSIZE_Min_Wdata_ram, BITSIZE_Mout_Wdata_ram=>BITSIZE_Mout_Wdata_ram, PORTSIZE_Mout_Wdata_ram=>PORTSIZE_Mout_Wdata_ram, BITSIZE_Min_data_ram_size=>BITSIZE_Min_data_ram_size, PORTSIZE_Min_data_ram_size=>PORTSIZE_Min_data_ram_size, BITSIZE_Mout_data_ram_size=>BITSIZE_Mout_data_ram_size, PORTSIZE_Mout_data_ram_size=>PORTSIZE_Mout_data_ram_size) port map (out1 => out1, Mout_oe_ram => Mout_oe_ram, Mout_we_ram => Mout_we_ram, Mout_addr_ram => Mout_addr_ram, Mout_Wdata_ram => Mout_Wdata_ram, Mout_data_ram_size => Mout_data_ram_size, clock => clock, in1 => in1, in2 => in2, in3 => in3, in4 => in4, sel_LOAD => sel_LOAD, sel_STORE => sel_STORE, Min_oe_ram => Min_oe_ram, Min_we_ram => Min_we_ram, Min_addr_ram => Min_addr_ram, M_Rdata_ram => M_Rdata_ram, Min_Wdata_ram => Min_Wdata_ram, Min_data_ram_size => Min_data_ram_size, M_DataRdy => M_DataRdy);"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>BMEMORY_CTRLN_D21_4</name>
      <operation operation_name="LOAD" initiation_time="1" cycles="6"/>
      <operation operation_name="STORE" initiation_time="1" cycles="3"/>
      <channels_type>MEM_ACC_NN</channels_type>
      <memory_ctrl_type>D21</memory_ctrl_type>
      <bram_load_latency>4</bram_load_latency>
      <circuit>
        <component_o id="BMEMORY_CTRLN_D21_4">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2023 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="BMEMORY_CTRLN_D21_4"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_vector_o>
          <port_vector_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_vector_o>
          <port_vector_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_vector_o>
          <port_vector_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_master="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="BMEMORY_CTRLN_D21_4 in1 in2 in3 in4 sel_LOAD sel_STORE out1 Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" IP_COMPONENT="BMEMORY_CTRLN_D21" VERILOG_PROVIDED="BMEMORY_CTRLN_D21 #(
  .BITSIZE_in1(BITSIZE_in1),
  .PORTSIZE_in1(PORTSIZE_in1),
  .BITSIZE_in2(BITSIZE_in2),
  .PORTSIZE_in2(PORTSIZE_in2),
  .BITSIZE_in3(BITSIZE_in3),
  .PORTSIZE_in3(PORTSIZE_in3),
  .BITSIZE_in4(BITSIZE_in4),
  .PORTSIZE_in4(PORTSIZE_in4),
  .BITSIZE_sel_LOAD(BITSIZE_sel_LOAD),
  .PORTSIZE_sel_LOAD(PORTSIZE_sel_LOAD),
  .BITSIZE_sel_STORE(BITSIZE_sel_STORE),
  .PORTSIZE_sel_STORE(PORTSIZE_sel_STORE),
  .BITSIZE_out1(BITSIZE_out1),
  .PORTSIZE_out1(PORTSIZE_out1),
  .BITSIZE_Min_oe_ram(BITSIZE_Min_oe_ram),
  .PORTSIZE_Min_oe_ram(PORTSIZE_Min_oe_ram),
  .BITSIZE_Min_we_ram(BITSIZE_Min_we_ram),
  .PORTSIZE_Min_we_ram(PORTSIZE_Min_we_ram),
  .BITSIZE_Mout_oe_ram(BITSIZE_Mout_oe_ram),
  .PORTSIZE_Mout_oe_ram(PORTSIZE_Mout_oe_ram),
  .BITSIZE_Mout_we_ram(BITSIZE_Mout_we_ram),
  .PORTSIZE_Mout_we_ram(PORTSIZE_Mout_we_ram),
  .BITSIZE_M_DataRdy(BITSIZE_M_DataRdy),
  .PORTSIZE_M_DataRdy(PORTSIZE_M_DataRdy),
  .BITSIZE_Min_addr_ram(BITSIZE_Min_addr_ram),
  .PORTSIZE_Min_addr_ram(PORTSIZE_Min_addr_ram),
  .BITSIZE_Mout_addr_ram(BITSIZE_Mout_addr_ram),
  .PORTSIZE_Mout_addr_ram(PORTSIZE_Mout_addr_ram),
  .BITSIZE_M_Rdata_ram(BITSIZE_M_Rdata_ram),
  .PORTSIZE_M_Rdata_ram(PORTSIZE_M_Rdata_ram),
  .BITSIZE_Min_Wdata_ram(BITSIZE_Min_Wdata_ram),
  .PORTSIZE_Min_Wdata_ram(PORTSIZE_Min_Wdata_ram),
  .BITSIZE_Mout_Wdata_ram(BITSIZE_Mout_Wdata_ram),
  .PORTSIZE_Mout_Wdata_ram(PORTSIZE_Mout_Wdata_ram),
  .BITSIZE_Min_data_ram_size(BITSIZE_Min_data_ram_size),
  .PORTSIZE_Min_data_ram_size(PORTSIZE_Min_data_ram_size),
  .BITSIZE_Mout_data_ram_size(BITSIZE_Mout_data_ram_size),
  .PORTSIZE_Mout_data_ram_size(PORTSIZE_Mout_data_ram_size)) BMEMORY_CTRLN_D21_i0 (.out1(out1),
  .Mout_oe_ram(Mout_oe_ram),
  .Mout_we_ram(Mout_we_ram),
  .Mout_addr_ram(Mout_addr_ram),
  .Mout_Wdata_ram(Mout_Wdata_ram),
  .Mout_data_ram_size(Mout_data_ram_size),
  .clock(clock),
  .in1(in1),
  .in2(in2),
  .in3(in3),
  .in4(in4),
  .sel_LOAD(sel_LOAD),
  .sel_STORE(sel_STORE),
  .Min_oe_ram(Min_oe_ram),
  .Min_we_ram(Min_we_ram),
  .Min_addr_ram(Min_addr_ram),
  .M_Rdata_ram(M_Rdata_ram),
  .Min_Wdata_ram(Min_Wdata_ram),
  .Min_data_ram_size(Min_data_ram_size),
  .M_DataRdy(M_DataRdy));" VHDL_PROVIDED="
begin
  BMEMORY_CTRLN_D21_i0 : BMEMORY_CTRLN_D21 generic map(BITSIZE_in1=>BITSIZE_in1, PORTSIZE_in1=>PORTSIZE_in1, BITSIZE_in2=>BITSIZE_in2, PORTSIZE_in2=>PORTSIZE_in2, BITSIZE_in3=>BITSIZE_in3, PORTSIZE_in3=>PORTSIZE_in3, BITSIZE_in4=>BITSIZE_in4, PORTSIZE_in4=>PORTSIZE_in4, BITSIZE_sel_LOAD=>BITSIZE_sel_LOAD, PORTSIZE_sel_LOAD=>PORTSIZE_sel_LOAD, BITSIZE_sel_STORE=>BITSIZE_sel_STORE, PORTSIZE_sel_STORE=>PORTSIZE_sel_STORE, BITSIZE_out1=>BITSIZE_out1, PORTSIZE_out1=>PORTSIZE_out1, BITSIZE_Min_oe_ram=>BITSIZE_Min_oe_ram, PORTSIZE_Min_oe_ram=>PORTSIZE_Min_oe_ram, BITSIZE_Min_we_ram=>BITSIZE_Min_we_ram, PORTSIZE_Min_we_ram=>PORTSIZE_Min_we_ram, BITSIZE_Mout_oe_ram=>BITSIZE_Mout_oe_ram, PORTSIZE_Mout_oe_ram=>PORTSIZE_Mout_oe_ram, BITSIZE_Mout_we_ram=>BITSIZE_Mout_we_ram, PORTSIZE_Mout_we_ram=>PORTSIZE_Mout_we_ram, BITSIZE_M_DataRdy=>BITSIZE_M_DataRdy, PORTSIZE_M_DataRdy=>PORTSIZE_M_DataRdy, BITSIZE_Min_addr_ram=>BITSIZE_Min_addr_ram, PORTSIZE_Min_addr_ram=>PORTSIZE_Min_addr_ram, BITSIZE_Mout_addr_ram=>BITSIZE_Mout_addr_ram, PORTSIZE_Mout_addr_ram=>PORTSIZE_Mout_addr_ram, BITSIZE_M_Rdata_ram=>BITSIZE_M_Rdata_ram, PORTSIZE_M_Rdata_ram=>PORTSIZE_M_Rdata_ram, BITSIZE_Min_Wdata_ram=>BITSIZE_Min_Wdata_ram, PORTSIZE_Min_Wdata_ram=>PORTSIZE_Min_Wdata_ram, BITSIZE_Mout_Wdata_ram=>BITSIZE_Mout_Wdata_ram, PORTSIZE_Mout_Wdata_ram=>PORTSIZE_Mout_Wdata_ram, BITSIZE_Min_data_ram_size=>BITSIZE_Min_data_ram_size, PORTSIZE_Min_data_ram_size=>PORTSIZE_Min_data_ram_size, BITSIZE_Mout_data_ram_size=>BITSIZE_Mout_data_ram_size, PORTSIZE_Mout_data_ram_size=>PORTSIZE_Mout_data_ram_size) port map (out1 => out1, Mout_oe_ram => Mout_oe_ram, Mout_we_ram => Mout_we_ram, Mout_addr_ram => Mout_addr_ram, Mout_Wdata_ram => Mout_Wdata_ram, Mout_data_ram_size => Mout_data_ram_size, clock => clock, in1 => in1, in2 => in2, in3 => in3, in4 => in4, sel_LOAD => sel_LOAD, sel_STORE => sel_STORE, Min_oe_ram => Min_oe_ram, Min_we_ram => Min_we_ram, Min_addr_ram => Min_addr_ram, M_Rdata_ram => M_Rdata_ram, Min_Wdata_ram => Min_Wdata_ram, Min_data_ram_size => Min_data_ram_size, M_DataRdy => M_DataRdy);"/>
        </component_o>
      </circuit>
    </cell>
  </library>
</technology>
