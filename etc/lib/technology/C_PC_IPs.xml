<?xml version="1.0"?>
<technology>
  <library>
    <name>STD_FU</name>
    <cell>
      <name>MEMORY_CTRL_P1N</name>
      <operation operation_name="LOAD" bounded="0"/>
      <operation operation_name="STORE" bounded="0"/>
      <channels_type>MEM_ACC_P1N</channels_type>
      <memory_ctrl_type>D00</memory_ctrl_type>
      <circuit>
        <component_o id="MEMORY_CTRL_P1N">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2015-2023 Politecnico di Milano</copyright>
          <authors>Vito Giovanni Castellana</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="MEMORY_CTRL_P1N"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data to be written </port_o>
          <port_o id="in2" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> address </port_o>
          <port_o id="in3" dir="IN" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/> data size </port_o>
          <port_o id="in4" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_LOAD" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="sel_STORE" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="access_allowed" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <port_vector_o id="access_request" dir="OUT" is_memory="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_vector_o>
          <NP_functionality LIBRARY="MEMORY_CTRL_P1N in1 in2 in3 in4 out1 Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size access_allowed access_request" IP_COMPONENT="MC_INDEX,EXPAND,MUX" VERILOG_PROVIDED="`ifndef _SIM_HAVE_CLOG2
  function integer log2;
     input integer value;
     integer temp_value;
    begin
      temp_value = value-1;
      for (log2=0; temp_value&gt;0; log2=log2+1)
        temp_value = temp_value&gt;&gt;1;
    end
  endfunction
`endif
 parameter NUM_ch = PORTSIZE_Min_oe_ram;
`ifdef _SIM_HAVE_CLOG2
  parameter BITSIZE_ch = $clog2(NUM_ch);
`else
  parameter BITSIZE_ch = log2(NUM_ch);
`endif
 parameter SEL_SIZE = BITSIZE_ch;
wire [(NUM_ch*BITSIZE_in2)-1:0] tmp_addr;
wire [NUM_ch-1:0] temp_done_port;
wire [NUM_ch-1:0] sel_LOAD_wire;
wire [NUM_ch-1:0] sel_STORE_wire;
wire [(NUM_ch*BITSIZE_in1)+(-1):0] selected_in1;
wire [(NUM_ch*BITSIZE_in2)+(-1):0] selected_in2;
wire [(NUM_ch*BITSIZE_in3)+(-1):0] selected_in3;
wire [NUM_ch-1:0] selected_sel_LOAD;
wire [NUM_ch-1:0] selected_sel_STORE;
wire [(NUM_ch*BITSIZE_out1)+(-1):0] temp_out1;
wire [SEL_SIZE-1:0] selector;
MC_INDEX #(.BITSIZE_in1(BITSIZE_in2), .BITSIZE_out1(SEL_SIZE)) mc_index (.in1(in2), .out1(selector));
EXPAND #(.BITSIZE_in1(BITSIZE_in1), .BITSIZE_selector(SEL_SIZE), .BITSIZE_out1(BITSIZE_in1), .PORTSIZE_out1(NUM_ch)) expand_in1 (selector, in1, selected_in1);
EXPAND #(.BITSIZE_in1(BITSIZE_in2), .BITSIZE_selector(SEL_SIZE), .BITSIZE_out1(BITSIZE_in2), .PORTSIZE_out1(NUM_ch)) expand_in2 (selector, in2, selected_in2);
EXPAND #(.BITSIZE_in1(BITSIZE_in3), .BITSIZE_selector(SEL_SIZE), .BITSIZE_out1(BITSIZE_in3), .PORTSIZE_out1(NUM_ch)) expand_in3 (selector, in3, selected_in3);
EXPAND #(.BITSIZE_in1(1), .BITSIZE_selector(SEL_SIZE), .BITSIZE_out1(1), .PORTSIZE_out1(NUM_ch)) expand_sel_load (selector, sel_LOAD &amp; in4, selected_sel_LOAD);
EXPAND #(.BITSIZE_in1(1), .BITSIZE_selector(SEL_SIZE), .BITSIZE_out1(1), .PORTSIZE_out1(NUM_ch)) expand_sel_store (selector, sel_STORE &amp; in4, selected_sel_STORE);
MUX #(.BITSIZE_in1(BITSIZE_out1), .PORTSIZE_in1(NUM_ch), .BITSIZE_selector(SEL_SIZE), .BITSIZE_out1(BITSIZE_out1), .NUM_ch(NUM_ch)) mux_out1 (.selector(selector), .in1(temp_out1), .out1(out1));
MUX #(.BITSIZE_in1(1), .PORTSIZE_in1(NUM_ch), .BITSIZE_selector(SEL_SIZE), .BITSIZE_out1(1), .NUM_ch(NUM_ch)) mux_done (.selector(selector), .in1(temp_done_port), .out1(done_port));
assign tmp_addr = selected_in2;
generate
  genvar j;
  for(j=0; j &lt; NUM_ch; j=j+1)
    begin : L00
    assign sel_LOAD_wire[j] = selected_sel_LOAD[j] &amp;&amp; access_allowed[j];
    assign sel_STORE_wire[j] = selected_sel_STORE[j] &amp;&amp; access_allowed[j];
    assign access_request[j] = selected_sel_LOAD[j] || selected_sel_STORE[j];
    end
  endgenerate
  generate
    genvar i;
    for (i=0; i&lt;NUM_ch; i=i+1)
    begin : L0
      assign Mout_addr_ram[(i+1)*BITSIZE_Mout_addr_ram-1:i*BITSIZE_Mout_addr_ram] = (sel_LOAD_wire[i] || sel_STORE_wire[i]) ? (tmp_addr[(i+1)*BITSIZE_in2-1:i*BITSIZE_in2]) : Min_addr_ram[(i+1)*BITSIZE_Min_addr_ram-1:i*BITSIZE_Min_addr_ram];
    end
  endgenerate
  assign Mout_oe_ram = sel_LOAD_wire | Min_oe_ram;
  assign Mout_we_ram = sel_STORE_wire | Min_we_ram;
  generate
    for (i=0; i &lt; NUM_ch; i=i+1)
    begin : L1
      assign temp_out1[(i+1)*BITSIZE_out1-1:i*BITSIZE_out1] = M_Rdata_ram[i*BITSIZE_M_Rdata_ram+BITSIZE_out1-1:i*BITSIZE_M_Rdata_ram];
  end
  endgenerate
  generate
    for (i=0; i &lt; NUM_ch; i=i+1)
    begin : L2
      assign Mout_Wdata_ram[(i+1)*BITSIZE_Mout_Wdata_ram-1:i*BITSIZE_Mout_Wdata_ram] = sel_STORE_wire[i] ? selected_in1[(i+1)*BITSIZE_in1-1:i*BITSIZE_in1] : Min_Wdata_ram[(i+1)*BITSIZE_Min_Wdata_ram-1:i*BITSIZE_Min_Wdata_ram];
  end
  endgenerate
  generate
    for (i=0; i &lt; NUM_ch; i=i+1)
    begin : L3
     assign Mout_data_ram_size[(i+1)*BITSIZE_Mout_data_ram_size-1:i*BITSIZE_Mout_data_ram_size] = (sel_LOAD_wire[i] || sel_STORE_wire[i]) ? (selected_in3[(i+1)*BITSIZE_in3-1:i*BITSIZE_in3]) : Min_data_ram_size[(i+1)*BITSIZE_Min_data_ram_size-1:i*BITSIZE_Min_data_ram_size];
    end
    endgenerate
  assign temp_done_port = M_DataRdy &amp; (sel_STORE_wire | sel_LOAD_wire);"/>
        </component_o>
      </circuit>
    </cell>
  </library>
</technology>