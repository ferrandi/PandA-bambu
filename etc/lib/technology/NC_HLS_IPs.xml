<?xml version="1.0"?>
<technology>
  <library>
    <name>STD_FU</name>
    <cell>
      <name>memory_mapped_register_FU</name>
      <circuit>
        <component_o id="memory_mapped_register_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2012-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;, Marco Minutoli &lt;mminutoli@gmail.com&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="memory_mapped_register_FU"/>
          <parameter name="ALLOCATED_ADDRESS">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="memory_mapped_register_FU out1 S_addr_ram S_Wdata_ram Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size ALLOCATED_ADDRESS" VERILOG_PROVIDED="wire internal;
reg [BITSIZE_out1-1:0] reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
assign internal = ALLOCATED_ADDRESS == S_addr_ram;
assign Sout_DataRdy = internal || Sin_DataRdy;
assign Sout_Rdata_ram = Sin_Rdata_ram; 

always @(posedge clock 1RESET_EDGE) begin
   if (1RESET_VALUE)
     reg_out1 &lt;= {BITSIZE_out1{1&apos;b0}};
   else if (S_we_ram &amp;&amp; internal)
     reg_out1 &lt;= S_Wdata_ram;
end

"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>memory_mapped_registerN_FU</name>
      <circuit>
        <component_o id="memory_mapped_registerN_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="memory_mapped_registerN_FU"/>
          <parameter name="ALLOCATED_ADDRESS">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <NP_functionality LIBRARY="memory_mapped_registerN_FU out1 S_oe_ram S_we_ram S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy ALLOCATED_ADDRESS" VERILOG_PROVIDED="
function [PORTSIZE_S_addr_ram-1:0] check_condition;
  input [PORTSIZE_S_addr_ram*BITSIZE_S_addr_ram-1:0] m;
  integer i1;
begin
  for(i1 = 0; i1 &lt; PORTSIZE_S_addr_ram; i1 = i1 + 1)
  begin
    check_condition[i1] = m[i1*BITSIZE_S_addr_ram +:BITSIZE_S_addr_ram] == ALLOCATED_ADDRESS;
  end
end
endfunction
function [BITSIZE_out1-1:0] extract_value;
  input [PORTSIZE_S_addr_ram-1:0] cond;
  input [PORTSIZE_S_Wdata_ram*BITSIZE_S_Wdata_ram-1:0] value;
  reg [BITSIZE_out1-1:0] res;
  integer i1;
begin
  res={BITSIZE_out1{1&apos;b0}};
  for(i1 = 0; i1 &lt; PORTSIZE_S_Wdata_ram; i1 = i1 + 1)
  begin
    res = res | ( cond[i1] ? value[i1*BITSIZE_S_Wdata_ram +:BITSIZE_S_Wdata_ram] : {BITSIZE_out1{1&apos;b0}});
  end
  extract_value = res;
end
endfunction
wire [PORTSIZE_S_addr_ram-1:0] internal;
reg [BITSIZE_out1-1:0] reg_out1 1INIT_ZERO_VALUE;
assign out1 = reg_out1;
assign internal = check_condition(S_addr_ram);
assign Sout_DataRdy = internal | Sin_DataRdy;
assign Sout_Rdata_ram = Sin_Rdata_ram; 

always @(posedge clock 1RESET_EDGE) begin
   if (1RESET_VALUE)
     reg_out1 &lt;= {BITSIZE_out1{1&apos;b0}};
   else if (|(S_we_ram &amp; internal))
     reg_out1 &lt;= extract_value(S_we_ram &amp; internal,S_Wdata_ram);
end"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>notify_caller_minimal_FU</name>
      <circuit>
        <component_o id="notify_caller_minimal_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2012-2022 Politecnico di Milano</copyright>
          <authors>Marco Minutoli &lt;mminutoli@gmail.com&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="notify_caller_minimal_FU"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="M_Rdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="M_DataRdy" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="notifyAddress" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="notified" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="notify_caller_minimal_FU notifyAddress Min_oe_ram Min_we_ram Mout_oe_ram Mout_we_ram M_DataRdy Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size" VERILOG_PROVIDED="
reg state 1INIT_ZERO_VALUE;
reg next_state;

assign Mout_oe_ram = Min_oe_ram;
assign Mout_we_ram = state ? 1&apos;b1 : Min_we_ram;
assign Mout_addr_ram = state ? notifyAddress : Min_addr_ram;
assign Mout_Wdata_ram = state ? {{BITSIZE_Mout_Wdata_ram - 1{1&apos;b0}}, 1&apos;b1} : Min_Wdata_ram;
assign Mout_data_ram_size = state ?  4&apos;d8 : Min_data_ram_size;

assign notified = state ? M_DataRdy : ~(&amp; notifyAddress);

always @ (posedge clock 1RESET_EDGE) begin
  if (1RESET_VALUE) begin
    state &lt;= 1&apos;b0;
  end
  else begin
    state &lt;= next_state;
  end
end

always @ (*) begin
  next_state = state;
  if (state == 1&apos;b0) begin
     if ((| notifyAddress) &amp; done_port) begin
        next_state = 1&apos;b1;
     end
  end
  else begin
     if (M_DataRdy == 1&apos;b1) begin
        next_state = 1&apos;b0;
     end
  end
end
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>notify_caller_minimalN_FU</name>
      <circuit>
        <component_o id="notify_caller_minimalN_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2022 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="notify_caller_minimalN_FU"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="Min_oe_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_oe_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Min_we_ram" dir="IN" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_we_ram" dir="OUT" is_memory="1" is_master="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Min_addr_ram" dir="IN" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_addr_ram" dir="OUT" is_memory="1" is_master="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="M_Rdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Min_Wdata_ram" dir="IN" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_Wdata_ram" dir="OUT" is_memory="1" is_master="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Min_data_ram_size" dir="IN" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Mout_data_ram_size" dir="OUT" is_memory="1" is_master="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="M_DataRdy" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="notifyAddress" dir="IN" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="notified" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="notify_caller_minimalN_FU notifyAddress Min_oe_ram Mout_oe_ram Min_we_ram Mout_we_ram Min_addr_ram Mout_addr_ram M_Rdata_ram Min_Wdata_ram Mout_Wdata_ram Min_data_ram_size Mout_data_ram_size M_DataRdy" VERILOG_PROVIDED="
reg state 1INIT_ZERO_VALUE;
reg next_state;

assign Mout_oe_ram = Min_oe_ram;
assign Mout_we_ram = state ? {Min_we_ram[PORTSIZE_Min_we_ram-1:1],1&apos;b1} : Min_we_ram;
assign Mout_addr_ram = state ? {Min_addr_ram[PORTSIZE_Min_addr_ram*BITSIZE_Min_addr_ram-1:BITSIZE_Min_addr_ram],notifyAddress} : Min_addr_ram;
assign Mout_Wdata_ram = state ? {{PORTSIZE_Mout_Wdata_ram*BITSIZE_Mout_Wdata_ram - 1{1&apos;b0}}, 1&apos;b1} : Min_Wdata_ram;
assign Mout_data_ram_size = state ?  {Min_data_ram_size[PORTSIZE_Min_data_ram_size*BITSIZE_Min_data_ram_size-1:BITSIZE_Min_data_ram_size], {BITSIZE_Min_data_ram_size-4{1&apos;b0}},4&apos;d8} : Min_data_ram_size;

assign notified = state ? M_DataRdy[0] : ~(&amp; notifyAddress);

always @ (posedge clock 1RESET_EDGE) begin
  if (1RESET_VALUE) begin
    state &lt;= 1&apos;b0;
  end
  else begin
    state &lt;= next_state;
  end
end

always @ (*) begin
  next_state = state;
  if (state == 1&apos;b0) begin
     if ((| notifyAddress) &amp; done_port) begin
        next_state = 1&apos;b1;
     end
  end
  else begin
     if (M_DataRdy[0] == 1&apos;b1) begin
        next_state = 1&apos;b0;
     end
  end
end
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>return_value_mm_register_FU</name>
      <circuit>
        <component_o id="return_value_mm_register_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2012-2022 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;, Marco Minutoli &lt;mminutoli@gmail.com&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="return_value_mm_register_FU"/>
          <parameter name="ALLOCATED_ADDRESS">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="return_value_mm_register_FU in1 out1 S_addr_ram S_Wdata_ram Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size ALLOCATED_ADDRESS" VERILOG_PROVIDED="
wire internal;
reg [BITSIZE_in1-1:0] register 1INIT_ZERO_VALUE;
reg oe_ack 1INIT_ZERO_VALUE;
wire oe_ack_next;

assign out1 = in1;
assign internal = ALLOCATED_ADDRESS == S_addr_ram;
assign Sout_DataRdy = oe_ack || Sin_DataRdy;
assign Sout_Rdata_ram = internal ? register : Sin_Rdata_ram; 

assign oe_ack_next = internal &amp; ~oe_ack;
always @(posedge clock 1RESET_EDGE) begin
   if (1RESET_VALUE) begin
     register &lt;= {BITSIZE_in1{1&apos;b0}};
     oe_ack &lt;= 1&apos;b0;
   end
   else begin
      if (done_port)
        register &lt;= in1;
      oe_ack &lt;= oe_ack_next;
   end
end
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>return_value_mm_registerN_FU</name>
      <circuit>
        <component_o id="return_value_mm_registerN_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2022 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="return_value_mm_registerN_FU"/>
          <parameter name="ALLOCATED_ADDRESS">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="return_value_mm_registerN_FU in1 out1 S_oe_ram S_we_ram S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy ALLOCATED_ADDRESS" VERILOG_PROVIDED="function [PORTSIZE_S_addr_ram-1:0] check_condition;
  input [PORTSIZE_S_addr_ram*BITSIZE_S_addr_ram-1:0] m;
  integer i1;
begin
  for(i1 = 0; i1 &lt; PORTSIZE_S_addr_ram; i1 = i1 + 1)
  begin
    check_condition[i1] = m[i1*BITSIZE_S_addr_ram +:BITSIZE_S_addr_ram] == ALLOCATED_ADDRESS;
  end
end
endfunction
function [PORTSIZE_Sout_Rdata_ram*BITSIZE_Sout_Rdata_ram-1:0] inject_value;
  input [PORTSIZE_S_addr_ram-1:0] cond;
  input [BITSIZE_in1-1:0] value;
  input [PORTSIZE_Sin_Rdata_ram*BITSIZE_Sin_Rdata_ram-1:0] m;
  integer i1;
begin
  for(i1 = 0; i1 &lt; PORTSIZE_Sout_Rdata_ram; i1 = i1 + 1)
  begin
    inject_value[i1*BITSIZE_Sout_Rdata_ram +:BITSIZE_Sout_Rdata_ram] = cond[i1] ? value : m[i1*BITSIZE_Sin_Rdata_ram +:BITSIZE_Sin_Rdata_ram];
  end
end
endfunction
wire [PORTSIZE_S_addr_ram-1:0] internal;
reg [BITSIZE_in1-1:0] register 1INIT_ZERO_VALUE;
reg [PORTSIZE_S_addr_ram-1:0] oe_ack 1INIT_ZERO_VALUE;
wire [PORTSIZE_S_addr_ram-1:0] oe_ack_next;

assign out1 = in1;
assign internal = check_condition(S_addr_ram);
assign Sout_DataRdy = oe_ack | Sin_DataRdy;
assign Sout_Rdata_ram = inject_value(internal, register, Sin_Rdata_ram);

assign oe_ack_next = internal &amp; ~oe_ack;
always @(posedge clock 1RESET_EDGE)
begin
  if (1RESET_VALUE)
  begin
    register &lt;= {BITSIZE_in1{1&apos;b0}};
    oe_ack &lt;= {PORTSIZE_S_addr_ram{1&apos;b0}};
  end
  else
  begin
    if (done_port)
      register &lt;= in1;
    oe_ack &lt;= oe_ack_next;
  end
end"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>status_register_FU</name>
      <circuit>
        <component_o id="status_register_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2012-2022 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;, Marco Minutoli &lt;mminutoli@gmail.com&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="status_register_FU"/>
          <parameter name="ALLOCATED_ADDRESS">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="notifyAddress" dir="OUT" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="start_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="control" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="notified" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="status_register_FU notifyAddress S_addr_ram S_Wdata_ram Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size ALLOCATED_ADDRESS" VERILOG_PROVIDED="wire [BITSIZE_S_addr_ram - 1:0] statusRegister;
reg [BITSIZE_S_addr_ram - 1:0]  ackAddress 1INIT_ZERO_VALUE;
reg [BITSIZE_S_addr_ram - 1:0]  ackAddress_next;
reg [1:0]   state 1INIT_ZERO_VALUE;
reg [1:0]   state_next;

reg [BITSIZE_Sout_Rdata_ram-1:0] Sout_Rdata_ram;
reg                              Sout_DataRdy;
reg                              start_port 1INIT_ZERO_VALUE;
reg                              next_start_port;
 
wire       internal;

assign control = statusRegister[0];
assign internal = S_addr_ram == ALLOCATED_ADDRESS;
assign statusRegister = {ackAddress[BITSIZE_S_addr_ram - 1:2], state};
assign notifyAddress = {ackAddress[BITSIZE_S_addr_ram-1:2], 2&apos;d0};

always @ (*) begin
   Sout_Rdata_ram = Sin_Rdata_ram;
   Sout_DataRdy = Sin_DataRdy;
   ackAddress_next = ackAddress;
   if (internal) begin
      Sout_DataRdy = 1&apos;b1;
      if (S_oe_ram)
        Sout_Rdata_ram = statusRegister;
      if (S_we_ram)
        ackAddress_next = {S_Wdata_ram[BITSIZE_S_Wdata_ram - 1:2], 2&apos;b0};
   end
end // always @ (*)

always @ (posedge clock 1RESET_EDGE) begin
   if (1RESET_VALUE) begin
      state &lt;= 2&apos;d0;
      ackAddress &lt;= 32&apos;d0;
      start_port &lt;= 1&apos;b0;
   end else begin
      state &lt;= state_next;
      ackAddress &lt;= ackAddress_next;
      start_port &lt;= next_start_port;
   end
end   

always @ (*) begin
   state_next = state;
   next_start_port = 1&apos;b0;

   if (state == 2&apos;d0) begin
      if (internal &amp; S_we_ram) begin
         state_next = 2&apos;d1;
         next_start_port = 1&apos;b1;
      end
   end else if (state == 2&apos;d1) begin
      if (done_port) begin
         state_next = 2&apos;d2;
      end
   end else if (state == 2&apos;d2) begin
      if (notified) begin
         state_next = 2&apos;d0;
      end
   end else begin
   end
end
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>status_registerN_FU</name>
      <circuit>
        <component_o id="status_registerN_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2022 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="status_registerN_FU"/>
          <parameter name="ALLOCATED_ADDRESS">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_o id="notifyAddress" dir="OUT" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
          </port_o>
          <port_o id="start_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="control" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="notified" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="status_registerN_FU notifyAddress S_oe_ram S_we_ram S_addr_ram S_Wdata_ram  Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size Sin_DataRdy Sout_DataRdy ALLOCATED_ADDRESS" VERILOG_PROVIDED="wire [BITSIZE_S_addr_ram - 1:0] statusRegister;
reg [BITSIZE_S_addr_ram - 1:0] ackAddress 1INIT_ZERO_VALUE;
reg [BITSIZE_S_addr_ram - 1:0] ackAddress_next;
reg [1:0] state 1INIT_ZERO_VALUE;
reg [1:0] state_next;

reg start_port 1INIT_ZERO_VALUE;
reg next_start_port;
wire [PORTSIZE_S_addr_ram-1:0] internal;

function [PORTSIZE_S_addr_ram-1:0] check_condition;
  input [PORTSIZE_S_addr_ram*BITSIZE_S_addr_ram-1:0] m;
  integer i1;
begin
  for(i1 = 0; i1 &lt; PORTSIZE_S_addr_ram; i1 = i1 + 1)
  begin
    check_condition[i1] = m[i1*BITSIZE_S_addr_ram +:BITSIZE_S_addr_ram] == ALLOCATED_ADDRESS;
  end
end
endfunction
function [BITSIZE_S_addr_ram-1:0] extract_value;
  input [PORTSIZE_S_addr_ram-1:0] cond;
  input [PORTSIZE_S_Wdata_ram*BITSIZE_S_Wdata_ram-1:0] value;
  reg [BITSIZE_S_addr_ram-1:0] res;
  integer i1;
begin
  res={BITSIZE_S_addr_ram{1&apos;b0}};
  for(i1 = 0; i1 &lt; PORTSIZE_S_Wdata_ram; i1 = i1 + 1)
  begin
    res = res | ( cond[i1] ? value[i1*BITSIZE_S_Wdata_ram +:BITSIZE_S_Wdata_ram] : {BITSIZE_S_addr_ram{1&apos;b0}});
  end
  extract_value = res;
end
endfunction
function [PORTSIZE_Sout_Rdata_ram*BITSIZE_Sout_Rdata_ram-1:0] inject_value;
  input [PORTSIZE_S_addr_ram-1:0] cond;
  input [BITSIZE_S_addr_ram-1:0] value;
  input [PORTSIZE_Sin_Rdata_ram*BITSIZE_Sin_Rdata_ram-1:0] m;
  integer i1;
begin
  for(i1 = 0; i1 &lt; PORTSIZE_Sout_Rdata_ram; i1 = i1 + 1)
  begin
    inject_value[i1*BITSIZE_Sout_Rdata_ram +:BITSIZE_Sout_Rdata_ram] = cond[i1] ? value : m[i1*BITSIZE_Sin_Rdata_ram +:BITSIZE_Sin_Rdata_ram];
  end
end
endfunction

assign control = statusRegister[0];
assign internal = check_condition(S_addr_ram);
assign statusRegister = {ackAddress[BITSIZE_S_addr_ram - 1:2], state};
assign notifyAddress = {ackAddress[BITSIZE_S_addr_ram-1:2], 2&apos;d0};
assign Sout_DataRdy = internal | Sin_DataRdy; 
assign Sout_Rdata_ram = inject_value(internal &amp; S_oe_ram, statusRegister, Sin_Rdata_ram);

always @ (*)
begin
  ackAddress_next = ackAddress;
  if (|(internal &amp; S_we_ram))
    ackAddress_next = extract_value(internal &amp; S_we_ram,S_Wdata_ram);
end // always @ (*)

always @ (posedge clock 1RESET_EDGE) begin
   if (1RESET_VALUE) begin
      state &lt;= 2&apos;d0;
      ackAddress &lt;= {BITSIZE_S_addr_ram{1&apos;b0}};
      start_port &lt;= 1&apos;b0;
   end else begin
      state &lt;= state_next;
      ackAddress &lt;= ackAddress_next;
      start_port &lt;= next_start_port;
   end
end   

always @ (*) begin
   state_next = state;
   next_start_port = 1&apos;b0;

   if (state == 2&apos;d0) begin
      if (internal &amp; S_we_ram) begin
         state_next = 2&apos;d1;
         next_start_port = 1&apos;b1;
      end
   end else if (state == 2&apos;d1) begin
      if (done_port) begin
         state_next = 2&apos;d2;
      end
   end else if (state == 2&apos;d2) begin
      if (notified) begin
         state_next = 2&apos;d0;
      end
   end else begin
   end
end"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>status_register_no_notified_FU</name>
      <circuit>
        <component_o id="status_register_no_notified_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2012-2022 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;, Marco Minutoli &lt;mminutoli@gmail.com&gt;, Pietro Fezzardi &lt;pietrofezzardi@gmail.com&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="status_register_no_notified_FU"/>
          <parameter name="ALLOCATED_ADDRESS">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="S_oe_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_we_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_addr_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_Wdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="S_data_ram_size" dir="IN" is_memory="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <port_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="start_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <NP_functionality LIBRARY="status_register_no_notified_FU S_addr_ram S_Wdata_ram Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size ALLOCATED_ADDRESS" VERILOG_PROVIDED="
wire statusRegister;
reg state 1INIT_ZERO_VALUE;
wire state_next;
reg [BITSIZE_Sout_Rdata_ram-1:0] Sout_Rdata_ram;
reg Sout_DataRdy;
wire next_start_port;
reg start_port 1INIT_ZERO_VALUE;
wire internal;
assign internal = S_addr_ram == ALLOCATED_ADDRESS;
assign statusRegister = state;

assign state_next = (!state &amp;&amp; internal &amp;&amp; S_we_ram) || (state &amp;&amp; !done_port);
assign next_start_port = !state &amp;&amp; internal &amp;&amp; S_we_ram;
always @ (*) begin
   Sout_Rdata_ram = Sin_Rdata_ram;
   Sout_DataRdy = Sin_DataRdy;

   if (internal) begin
      Sout_DataRdy = 1&apos;b1;
      if (S_oe_ram)
         Sout_Rdata_ram = statusRegister;

   end
end // always @ (*)

always @ (posedge clock 1RESET_EDGE) begin
   if (1RESET_VALUE) begin
      state &lt;= 1&apos;b0;
      start_port &lt;= 1&apos;b0;
   end else begin
      state &lt;= state_next;
      start_port &lt;= next_start_port;
   end
end   

"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>status_register_no_notifiedN_FU</name>
      <circuit>
        <component_o id="status_register_no_notifiedN_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2022 Politecnico di Milano</copyright>
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors>
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="status_register_no_notifiedN_FU"/>
          <parameter name="ALLOCATED_ADDRESS">0</parameter>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="reset" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_vector_o id="S_oe_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_we_ram" dir="IN" is_memory="1" is_global="1" is_extern="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_addr_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_addr_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_Wdata_ram" dir="IN" is_memory="1" is_global="1" is_extern="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sin_Rdata_ram" dir="IN" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sout_Rdata_ram" dir="OUT" is_memory="1" is_slave="1" is_data_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="S_data_ram_size" dir="IN" is_memory="1" is_global="1" is_extern="1" is_size_bus="1">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sin_DataRdy" dir="IN" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_vector_o id="Sout_DataRdy" dir="OUT" is_memory="1" is_slave="1">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_vector_o>
          <port_o id="start_port" dir="OUT">
            <structural_type_descriptor type="BOOL"/>
          </port_o>
          <port_o id="done_port" dir="IN">
            <structural_type_descriptor type="BOOL"/>
          </port_o>
          <NP_functionality LIBRARY="status_register_no_notifiedN_FU S_addr_ram S_Wdata_ram Sin_Rdata_ram Sout_Rdata_ram S_data_ram_size ALLOCATED_ADDRESS" VERILOG_PROVIDED="function [PORTSIZE_S_addr_ram-1:0] check_condition;
  input [PORTSIZE_S_addr_ram*BITSIZE_S_addr_ram-1:0] m;
  integer i1;
begin
  for(i1 = 0; i1 &lt; PORTSIZE_S_addr_ram; i1 = i1 + 1)
  begin
    check_condition[i1] = m[i1*BITSIZE_S_addr_ram +:BITSIZE_S_addr_ram] == ALLOCATED_ADDRESS;
  end
end
endfunction
function [PORTSIZE_Sout_Rdata_ram*BITSIZE_Sout_Rdata_ram-1:0] inject_value;
  input [PORTSIZE_S_addr_ram-1:0] cond;
  input [BITSIZE_S_addr_ram-1:0] value;
  input [PORTSIZE_Sin_Rdata_ram*BITSIZE_Sin_Rdata_ram-1:0] m;
  integer i1;
begin
  for(i1 = 0; i1 &lt; PORTSIZE_Sout_Rdata_ram; i1 = i1 + 1)
  begin
    inject_value[i1*BITSIZE_Sout_Rdata_ram +:BITSIZE_Sout_Rdata_ram] = cond[i1] ? value : m[i1*BITSIZE_Sin_Rdata_ram +:BITSIZE_Sin_Rdata_ram];
  end
end
endfunction

wire [PORTSIZE_S_addr_ram-1:0] internal;
wire [BITSIZE_S_addr_ram - 1:0] statusRegister;
wire state_next;
wire next_start_port;
reg start_port 1INIT_ZERO_VALUE;
reg state 1INIT_ZERO_VALUE;

assign internal = check_condition(S_addr_ram);
assign statusRegister = {{BITSIZE_S_addr_ram-1{1&apos;b0}}, state};
assign Sout_DataRdy = internal | Sin_DataRdy; 

assign state_next = (!state &amp;&amp; (|(internal &amp; S_we_ram))) || (state &amp;&amp; !done_port);
assign next_start_port = !state &amp;&amp; (|(internal &amp; S_we_ram));
assign Sout_Rdata_ram = inject_value(internal &amp; S_oe_ram, statusRegister, Sin_Rdata_ram);

always @ (posedge clock 1RESET_EDGE) begin
   if (1RESET_VALUE) begin
      state &lt;= 1&apos;b0;
      start_port &lt;= 1&apos;b0;
   end else begin
      state &lt;= state_next;
      start_port &lt;= next_start_port;
   end
end"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>bit_ior_concat_expr_FU</name>
      <operation operation_name="bit_ior_concat_expr" supported_types="INT:*"/>
      <circuit>
        <component_o id="bit_ior_concat_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="bit_ior_concat_expr_FU"/>
          <parameter name="OFFSET_PARAMETER">1</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="INT" size="1"/>
            <connected_objects/>
         </port_o>
         <NP_functionality LIBRARY="bit_ior_concat_expr_FU in1 in2 in3 out1 OFFSET_PARAMETER" VERILOG_PROVIDED="
parameter nbit_out = BITSIZE_out1 &gt; OFFSET_PARAMETER ? BITSIZE_out1 : 1+OFFSET_PARAMETER;
wire signed [nbit_out-1:0] tmp_in1;
wire signed [OFFSET_PARAMETER-1:0] tmp_in2;
generate
  if(BITSIZE_in1 &gt;= nbit_out)
    assign tmp_in1=in1[nbit_out-1:0];
  else
    assign tmp_in1={{(nbit_out-BITSIZE_in1){in1[BITSIZE_in1-1]}},in1};
endgenerate
generate
  if(BITSIZE_in2 &gt;= OFFSET_PARAMETER)
    assign tmp_in2=in2[OFFSET_PARAMETER-1:0];
  else
    assign tmp_in2={{(OFFSET_PARAMETER-BITSIZE_in2){in2[BITSIZE_in2-1]}},in2};
endgenerate
assign out1 = {tmp_in1[nbit_out-1:OFFSET_PARAMETER] , tmp_in2};"
VHDL_PROVIDED=
"function integer_ternary_operator(cond : boolean; op1 : integer; op2 : integer) return integer is
  begin
    if cond then
      return op1;
    else
      return op2;
    end if;
end integer_ternary_operator;
  constant nbit_out : integer := integer_ternary_operator(BITSIZE_out1 &gt; OFFSET_PARAMETER, BITSIZE_out1, 1+OFFSET_PARAMETER);
  signal tmp_in1 : signed(nbit_out-1 downto 0);
  signal tmp_in2 : signed(nbit_out-1 downto 0);
  begin
    tmp_in1 &lt;= resize_signed(in1, nbit_out);
    tmp_in2 &lt;= resize_signed(in2, nbit_out);
    out1 &lt;= resize(tmp_in1(nbit_out-1 downto OFFSET_PARAMETER) &amp; tmp_in2(OFFSET_PARAMETER-1 downto 0), BITSIZE_out1);
    "/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>ui_bit_ior_concat_expr_FU</name>
      <operation operation_name="bit_ior_concat_expr" supported_types="UINT:*|VECTOR_BOOL:*"/>
      <circuit>
        <component_o id="ui_bit_ior_concat_expr_FU">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="ui_bit_ior_concat_expr_FU"/>
          <parameter name="OFFSET_PARAMETER">1</parameter>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in2" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="in3" dir="IN">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="ui_bit_ior_concat_expr_FU in1 in2 in3 out1 OFFSET_PARAMETER"
VERILOG_PROVIDED=
"parameter nbit_out = BITSIZE_out1 &gt; OFFSET_PARAMETER ? BITSIZE_out1 : 1+OFFSET_PARAMETER;
wire [nbit_out-1:0] tmp_in1;
wire [OFFSET_PARAMETER-1:0] tmp_in2;
generate
  if(BITSIZE_in1 &gt;= nbit_out)
    assign tmp_in1=in1[nbit_out-1:0];
  else
    assign tmp_in1={{(nbit_out-BITSIZE_in1){1&apos;b0}},in1};
endgenerate
generate
  if(BITSIZE_in2 &gt;= OFFSET_PARAMETER)
    assign tmp_in2=in2[OFFSET_PARAMETER-1:0];
  else
    assign tmp_in2={{(OFFSET_PARAMETER-BITSIZE_in2){1&apos;b0}},in2};
endgenerate
assign out1 = {tmp_in1[nbit_out-1:OFFSET_PARAMETER] , tmp_in2};"
VHDL_PROVIDED=
"function integer_ternary_operator(cond : boolean; op1 : integer; op2 : integer) return integer is
  begin
    if cond then
      return op1;
    else
      return op2;
    end if;
end integer_ternary_operator;
  constant nbit_out : integer := integer_ternary_operator(BITSIZE_out1 &gt; OFFSET_PARAMETER, BITSIZE_out1, 1+OFFSET_PARAMETER);
  signal tmp_in1 : unsigned(nbit_out-1 downto 0);
  signal tmp_in2 : unsigned(nbit_out-1 downto 0);
  begin
    tmp_in1 &lt;= resize(in1, nbit_out);
    tmp_in2 &lt;= resize(in2, nbit_out);
    out1 &lt;= resize(tmp_in1(nbit_out-1 downto OFFSET_PARAMETER) &amp; tmp_in2(OFFSET_PARAMETER-1 downto 0), BITSIZE_out1);
    "/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>__builtin_trap</name>
      <operation operation_name="trap" bounded="0"/>
      <operation operation_name="__builtin_trap" bounded="0"/>
      <circuit>
        <component_o id="__builtin_trap">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2014-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="__builtin_trap"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_trap" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel___builtin_trap" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="__builtin_trap" VERILOG_PROVIDED="
reg done_port 1INIT_ZERO_VALUE;
// synthesis translate_off
integer res_file;
always @(negedge clock)
  if(start_port == 1&apos;b1)
  begin
    res_file = $fopen(&quot;results.txt&quot;,&quot;w&quot;);
    $display(&quot;__builtin_trap called&quot;);
    $fwrite(res_file, &quot;0\\t&quot;);
    $fwrite(res_file, &quot;%d\\t&quot;, $time);
    $fwrite(res_file, &quot;ns\\n&quot;);
    $fclose(res_file);
    $finish;
  end
// synthesis translate_on
always @(posedge clock) done_port &lt;= start_port;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>__builtin_unreachable</name>
      <operation operation_name="__unreachable" bounded="0" cycles="1"/>
      <operation operation_name="__builtin_unreachable" bounded="0" cycles="1"/>
      <circuit>
        <component_o id="__builtin_unreachable">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2015-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="__builtin_unreachable"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel___unreachable" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel___builtin_unreachable" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="__builtin_unreachable" VERILOG_PROVIDED="
reg done_port 1INIT_ZERO_VALUE;
// synthesis translate_off
integer res_file;
always @(negedge clock)
  if(start_port == 1&apos;b1)
  begin
    res_file = $fopen(&quot;results.txt&quot;,&quot;w&quot;);
    $display(&quot;__builtin_unreachable called&quot;);
    $fwrite(res_file, &quot;0\\t&quot;);
    $fwrite(res_file, &quot;%d\\t&quot;, $time);
    $fwrite(res_file, &quot;ns\\n&quot;);
    $fclose(res_file);
    $finish;
  end
// synthesis translate_on
always @(posedge clock) done_port &lt;= start_port;" VHDL_PROVIDED="begin
-- synthesis translate_off
process(clock)
  file res_file : text;
begin
    if (clock&apos;event and clock = &apos;0&apos;) then
      if(start_port = &apos;1&apos;) then
        file_open(res_file, &quot;results.txt&quot;, WRITE_MODE);
        report(&quot;__builtin_unreachable called&quot;);
        write(res_file, &quot;0&quot; &amp; HT &amp; time&apos;image(now) &amp; LF);
        file_close(res_file);
        finish(1);
      end if;
    end if;
  end process;
-- synthesis translate_on
process(clock)
begin
  if(clock&apos;event and clock = &apos;1&apos;) then
    done_port &lt;= start_port;
  end if;
end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>__builtin_exit</name>
      <operation operation_name="exit" bounded="0" cycles="1"/>
      <operation operation_name="__builtin_exit" bounded="0" cycles="1"/>
      <circuit>
        <component_o id="__builtin_exit">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="__builtin_exit"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="status" dir="IN">
            <structural_type_descriptor type="INT" size="32" />
            <connected_objects/>
          </port_o>
          <port_o id="sel_exit" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel___builtin_exit" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="__builtin_exit" VERILOG_PROVIDED="
reg done_port 1INIT_ZERO_VALUE;
// synthesis translate_off
integer res_file;
always @(negedge clock)
  if(start_port == 1&apos;b1)
  begin
    res_file = $fopen(&quot;results.txt&quot;,&quot;w&quot;);
    $display(&quot;Exit called&quot;);
    $fwrite(res_file, &quot;%d\\t&quot;, (status!=0 ? 0 : 1));
    $fwrite(res_file, &quot;%d\\t&quot;, $time);
    $fwrite(res_file, &quot;ns\\n&quot;);
    $fclose(res_file);
    $finish;
  end
// synthesis translate_on
always @(posedge clock) done_port &lt;= start_port;" VHDL_PROVIDED="begin
-- synthesis translate_off
process(clock)
  file res_file : text;
begin
    if (clock&apos;event and clock = &apos;0&apos;) then
      if(start_port = &apos;1&apos;) then
        file_open(res_file, &quot;results.txt&quot;, WRITE_MODE);
        report(&quot;Exit called&quot;);
        if (status /= 0) then
        write(res_file, &quot;0&quot; &amp; HT &amp; time&apos;image(now) &amp; LF);
      else
         write(res_file, &quot;1&quot; &amp; HT &amp; time&apos;image(now) &amp; LF);
      end if;
        file_close(res_file);
        finish(1);
      end if;
    end if;
  end process;
-- synthesis translate_on
process(clock)
begin
  if(clock&apos;event and clock = &apos;1&apos;) then
    done_port &lt;= start_port;
  end if;
end process;
"/>
        </component_o>
      </circuit>
   </cell>
   <cell>
      <name>__builtin_abort</name>
      <operation operation_name="abort" bounded="0" cycles="1"/>
      <operation operation_name="__builtin_abort" bounded="0" cycles="1"/>
      <circuit>
        <component_o id="__builtin_abort">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2004-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="__builtin_abort"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_abort" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel___builtin_abort" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="__builtin_abort" VERILOG_PROVIDED="
reg done_port 1INIT_ZERO_VALUE;
// synthesis translate_off
integer res_file;
always @(negedge clock)
  if(start_port == 1&apos;b1)
  begin
    res_file = $fopen(&quot;results.txt&quot;,&quot;w&quot;);
    $display(&quot;Abort called&quot;);
    $fwrite(res_file, &quot;0\\t&quot;);
    $fwrite(res_file, &quot;%d\\t&quot;, $time);
    $fwrite(res_file, &quot;ns\\n&quot;);
    $fclose(res_file);
    $finish;
  end
// synthesis translate_on
always @(posedge clock) done_port &lt;= start_port;" VHDL_PROVIDED="begin
-- synthesis translate_off
process(clock)
  file res_file : text;
begin
    if (clock&apos;event and clock = &apos;0&apos;) then
      if(start_port = &apos;1&apos;) then
        file_open(res_file, &quot;results.txt&quot;, WRITE_MODE);
        report(&quot;Abort called&quot;);
        write(res_file, &quot;0&quot; &amp; HT &amp; time&apos;image(now) &amp; LF);
        file_close(res_file);
        finish(1);
      end if;
    end if;
  end process;
-- synthesis translate_on
process(clock)
begin
  if(clock&apos;event and clock = &apos;1&apos;) then
    done_port &lt;= start_port;
  end if;
end process;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>__builtin_dwarf_cfa</name>
      <operation operation_name="dwarf_cfa" bounded="0"/>
      <operation operation_name="__builtin_dwarf_cfa" bounded="0"/>
      <circuit>
        <component_o id="__builtin_dwarf_cfa">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2016-2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="__builtin_dwarf_cfa"/>
          <port_o id="clock" dir="IN" is_clock="1">
            <structural_type_descriptor type="BOOL" size="1"/>
          </port_o>
          <port_o id="start_port" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel_dwarf_cfa" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="sel___builtin_dwarf_cfa" dir="IN">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="UINT" size="1"/>
            <connected_objects/>
          </port_o>
          <port_o id="done_port" dir="OUT">
            <structural_type_descriptor type="BOOL" size="1"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="__builtin_dwarf_cfa out1" VERILOG_PROVIDED="
reg done_port 1INIT_ZERO_VALUE;
// synthesis translate_off
always @(negedge clock)
  if(start_port == 1&apos;b1)
  begin
    $display(&quot;__builtin_dwarf_cfa called&quot;);
  end
// synthesis translate_on
always @(posedge clock) done_port &lt;= start_port; assign out1 = 0;"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>__llvm_bitreverse_i8</name>
      <operation operation_name="__llvm_bitreverse_i8"  execution_time="0.0000001"/>
      <circuit>
        <component_o id="__llvm_bitreverse_i8">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="__llvm_bitreverse_i8"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="8"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="__llvm_bitreverse_i8 out1" VERILOG_PROVIDED="
reg [7:0] x;
integer i;
always @(*)
begin
  for (i=0; i &lt; 8; i=i+1)
  begin
     x[i] = in1[7-i];
  end
end
assign out1 = x;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>__llvm_bitreverse_i16</name>
      <operation operation_name="__llvm_bitreverse_i16"  execution_time="0.0000001"/>
      <circuit>
        <component_o id="__llvm_bitreverse_i16">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="__llvm_bitreverse_i16"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="16"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="16"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="__llvm_bitreverse_i16 out1" VERILOG_PROVIDED="
reg [15:0] x;
integer i;
always @(*)
begin
  for (i=0; i &lt; 16; i=i+1)
  begin
     x[i] = in1[15-i];
  end
end
assign out1 = x;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>__llvm_bitreverse_i32</name>
      <operation operation_name="__llvm_bitreverse_i32"  execution_time="0.0000001"/>
      <circuit>
        <component_o id="__llvm_bitreverse_i32">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="__llvm_bitreverse_i32"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="32"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="32"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="__llvm_bitreverse_i32 out1" VERILOG_PROVIDED="
reg [31:0] x;
integer i;
always @(*)
begin
  for (i=0; i &lt; 32; i=i+1)
  begin
     x[i] = in1[31-i];
  end
end
assign out1 = x;
"/>
        </component_o>
      </circuit>
    </cell>
    <cell>
      <name>__llvm_bitreverse_i64</name>
      <operation operation_name="__llvm_bitreverse_i64"  execution_time="0.0000001"/>
      <circuit>
        <component_o id="__llvm_bitreverse_i64">
          <description>This component is part of the BAMBU/PANDA IP LIBRARY</description>
          <copyright>Copyright (C) 2022 Politecnico di Milano</copyright>  
          <authors>Fabrizio Ferrandi &lt;fabrizio.ferrandi@polimi.it&gt;</authors> 
          <license>PANDA_LGPLv3</license>
          <structural_type_descriptor id_type="__llvm_bitreverse_i64"/>
          <port_o id="in1" dir="IN">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="64"/>
          </port_o>
          <port_o id="out1" dir="OUT">
            <structural_type_descriptor type="VECTOR_BOOL" size="1" vector_size="64"/>
            <connected_objects/>
          </port_o>
          <NP_functionality LIBRARY="__llvm_bitreverse_i64 out1" VERILOG_PROVIDED="
reg [63:0] x;
integer i;
always @(*)
begin
  for (i=0; i &lt; 64; i=i+1)
  begin
     x[i] = in1[63-i];
  end
end
assign out1 = x;
"/>
        </component_o>
      </circuit>
    </cell>
  </library>
</technology>

