###### clang 12.0

CLANG12_LIBS=-Wl,--start-group $(CLANG_LIBS) -lclangCrossTU -lclangToolingInclusions -Wl,--end-group
CLANG12_LIBSD=$(CLANG_LIBS) -lclangCrossTU -lclangToolingInclusions
compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.'

if BUILD_I386_CLANG12_EMPTY_PLUGIN
all: $(I386_CLANG12_EMPTY_PLUGIN)
endif

if BUILD_I386_CLANG12_SSA_PLUGIN
all: $(I386_CLANG12_SSA_PLUGIN)
endif

if BUILD_I386_CLANG12_SSA_PLUGINCPP
all: $(I386_CLANG12_SSA_PLUGINCPP)
endif

if BUILD_I386_CLANG12_EXPANDMEMOPS_PLUGIN
all: $(I386_CLANG12_EXPANDMEMOPS_PLUGIN)
endif

if BUILD_I386_CLANG12_GEPICANON_PLUGIN
all: $(I386_CLANG12_GEPICANON_PLUGIN)
endif

if BUILD_I386_CLANG12_CSROA_PLUGIN
all: $(I386_CLANG12_CSROA_PLUGIN)
endif

if BUILD_I386_CLANG12_TOPFNAME_PLUGIN
all: $(I386_CLANG12_TOPFNAME_PLUGIN)
endif

if BUILD_I386_CLANG12_ASTANALYZER_PLUGIN
all: $(I386_CLANG12_ASTANALYZER_PLUGIN)
endif

$(I386_CLANG12_SSA_PLUGIN) : clang12_plugin_dumpGimpleSSA.so clang12_plugin_dumpGimpleSSA_opt.so
clang12_plugin_dumpGimpleSSA_opt.so : clang12_plugin_dumpGimpleSSA.so
if BUILD_PTAA
clang12_plugin_dumpGimpleSSA.so : clang12_plugin_dumpGimpleSSA.o clang12_dumpGimple.o clang12_HardekopfLin_AA.o clang12_RangeAnalysis.o clang12_eSSA.o clang12_my_OrderedInstructions.o clang12_my_OrderedBasicBlock.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANG12_LIBS) -lversion `$(I386_LLVM_CONFIG12_EXE) --ldflags --libs --system-libs` -lbdd';\
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti -lbdd';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete -lbdd';;\
	esac;\
	obj_list='clang12_dumpGimple.o clang12_HardekopfLin_AA.o clang12_RangeAnalysis.o clang12_eSSA.o clang12_my_OrderedInstructions.o clang12_my_OrderedBasicBlock.o';\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) opt_clang12_plugin_dumpGimpleSSA.o $$obj_list $$compile_options -o clang12_plugin_dumpGimpleSSA_opt.so;\
	  $(I386_CLANG12_PLUGIN_COMPILER) clang12_plugin_dumpGimpleSSA.o $$obj_list $$compile_options -o clang12_plugin_dumpGimpleSSA.so ; \
	fi;
else
clang12_plugin_dumpGimpleSSA.so : clang12_plugin_dumpGimpleSSA.o clang12_dumpGimple.o clang12_RangeAnalysis.o clang12_eSSA.o clang12_my_OrderedInstructions.o clang12_my_OrderedBasicBlock.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANG12_LIBS) -lversion `$(I386_LLVM_CONFIG12_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	obj_list='clang12_dumpGimple.o clang12_RangeAnalysis.o clang12_eSSA.o clang12_my_OrderedInstructions.o clang12_my_OrderedBasicBlock.o';\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) opt_clang12_plugin_dumpGimpleSSA.o $$obj_list $$compile_options -o clang12_plugin_dumpGimpleSSA_opt.so;\
	  $(I386_CLANG12_PLUGIN_COMPILER) clang12_plugin_dumpGimpleSSA.o $$obj_list $$compile_options -o clang12_plugin_dumpGimpleSSA.so ; \
	fi;	
endif

$(I386_CLANG12_SSA_PLUGINCPP) : clang12_plugin_dumpGimpleSSACpp.so clang12_plugin_dumpGimpleSSACpp_opt.so
clang12_plugin_dumpGimpleSSACpp_opt.so : clang12_plugin_dumpGimpleSSACpp.so
if BUILD_PTAA
clang12_plugin_dumpGimpleSSACpp.so : clang12_plugin_dumpGimpleSSACpp.o clang12_dumpGimple.o clang12_HardekopfLin_AA.o clang12_RangeAnalysis.o clang12_eSSA.o clang12_my_OrderedInstructions.o clang12_my_OrderedBasicBlock.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANG12_LIBS) -lversion `$(I386_LLVM_CONFIG12_EXE) --ldflags --libs --system-libs` -lbdd'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti -lbdd';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete -lbdd';;\
	esac;\
	obj_list='clang12_dumpGimple.o clang12_HardekopfLin_AA.o clang12_RangeAnalysis.o clang12_eSSA.o clang12_my_OrderedInstructions.o clang12_my_OrderedBasicBlock.o';\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) opt_clang12_plugin_dumpGimpleSSACpp.o $$obj_list $$compile_options -o clang12_plugin_dumpGimpleSSACpp_opt.so;\
	  $(I386_CLANG12_PLUGIN_COMPILER) clang12_plugin_dumpGimpleSSACpp.o $$obj_list $$compile_options -o clang12_plugin_dumpGimpleSSACpp.so;\
	fi;
else
clang12_plugin_dumpGimpleSSACpp.so : clang12_plugin_dumpGimpleSSACpp.o clang12_dumpGimple.o clang12_RangeAnalysis.o clang12_eSSA.o clang12_my_OrderedInstructions.o clang12_my_OrderedBasicBlock.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANG12_LIBS) -lversion `$(I386_LLVM_CONFIG12_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	obj_list='clang12_dumpGimple.o clang12_RangeAnalysis.o clang12_eSSA.o clang12_my_OrderedInstructions.o clang12_my_OrderedBasicBlock.o';\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) opt_clang12_plugin_dumpGimpleSSACpp.o $$obj_list $$compile_options -o clang12_plugin_dumpGimpleSSACpp_opt.so;\
	  $(I386_CLANG12_PLUGIN_COMPILER) clang12_plugin_dumpGimpleSSACpp.o $$obj_list $$compile_options -o clang12_plugin_dumpGimpleSSACpp.so;\
	fi;
endif

$(I386_CLANG12_EMPTY_PLUGIN) : clang12_plugin_dumpGimpleEmpty.so clang12_plugin_dumpGimpleEmpty_opt.so
clang12_plugin_dumpGimpleEmpty_opt.so : clang12_plugin_dumpGimpleEmpty.so
if BUILD_PTAA
clang12_plugin_dumpGimpleEmpty.so : clang12_plugin_dumpGimpleEmpty.o clang12_dumpGimple.o clang12_HardekopfLin_AA.o clang12_RangeAnalysis.o clang12_eSSA.o clang12_my_OrderedInstructions.o clang12_my_OrderedBasicBlock.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANG12_LIBS) -lversion `$(I386_LLVM_CONFIG12_EXE) --ldflags --libs --system-libs` -lbdd'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti -lbdd';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete -lbdd';;\
	esac;\
	obj_list='clang12_dumpGimple.o clang12_HardekopfLin_AA.o clang12_RangeAnalysis.o clang12_eSSA.o clang12_my_OrderedInstructions.o clang12_my_OrderedBasicBlock.o';\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) opt_clang12_plugin_dumpGimpleEmpty.o $$obj_list $$compile_options -o clang12_plugin_dumpGimpleEmpty_opt.so; \
	  $(I386_CLANG12_PLUGIN_COMPILER) clang12_plugin_dumpGimpleEmpty.o $$obj_list $$compile_options -o clang12_plugin_dumpGimpleEmpty.so; \
	fi;
else
clang12_plugin_dumpGimpleEmpty.so : clang12_plugin_dumpGimpleEmpty.o clang12_dumpGimple.o clang12_RangeAnalysis.o clang12_eSSA.o clang12_my_OrderedInstructions.o clang12_my_OrderedBasicBlock.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANG12_LIBS) -lversion `$(I386_LLVM_CONFIG12_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	obj_list='clang12_dumpGimple.o clang12_RangeAnalysis.o clang12_eSSA.o clang12_my_OrderedInstructions.o clang12_my_OrderedBasicBlock.o';\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) opt_clang12_plugin_dumpGimpleEmpty.o $$obj_list $$compile_options -o clang12_plugin_dumpGimpleEmpty_opt.so; \
	  $(I386_CLANG12_PLUGIN_COMPILER) clang12_plugin_dumpGimpleEmpty.o $$obj_list $$compile_options -o clang12_plugin_dumpGimpleEmpty.so; \
	fi;
endif

$(I386_CLANG12_EXPANDMEMOPS_PLUGIN) : clang12_plugin_expandMemOps.so clang12_plugin_expandMemOps_opt.so
clang12_plugin_expandMemOps_opt.so : clang12_plugin_expandMemOps.so
clang12_plugin_expandMemOps.so : clang12_plugin_expandMemOps.o 
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANG12_LIBS) -lversion `$(I386_LLVM_CONFIG12_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) opt_clang12_plugin_expandMemOps.o $$compile_options -o clang12_plugin_expandMemOps_opt.so; \
	  $(I386_CLANG12_PLUGIN_COMPILER) clang12_plugin_expandMemOps.o $$compile_options -o clang12_plugin_expandMemOps.so; \
	fi;

$(I386_CLANG12_GEPICANON_PLUGIN) : clang12_plugin_GepiCanon.so clang12_plugin_GepiCanon_opt.so
clang12_plugin_GepiCanon_opt.so : clang12_plugin_GepiCanon.so
clang12_plugin_GepiCanon.so : clang12_plugin_GepiCanon.o clang12_GepiCanon.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANG12_LIBS) -lversion `$(I386_LLVM_CONFIG12_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) opt_clang12_plugin_GepiCanon.o clang12_GepiCanon.o $$compile_options -o clang12_plugin_GepiCanon_opt.so; \
	  $(I386_CLANG12_PLUGIN_COMPILER) clang12_plugin_GepiCanon.o clang12_GepiCanon.o $$compile_options -o clang12_plugin_GepiCanon.so; \
	fi;

$(I386_CLANG12_CSROA_PLUGIN) : clang12_plugin_CSROA.so clang12_plugin_CSROA_opt.so
clang12_plugin_CSROA_opt.so : clang12_plugin_CSROA.so
clang12_plugin_CSROA.so : clang12_plugin_CSROA.o clang12_CSROA.o clang12_GepiCanon.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANG12_LIBS) -lversion `$(I386_LLVM_CONFIG12_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) opt_clang12_plugin_CSROA.o clang12_GepiCanon.o clang12_CSROA.o $$compile_options -o clang12_plugin_CSROA_opt.so; \
	  $(I386_CLANG12_PLUGIN_COMPILER) clang12_plugin_CSROA.o clang12_GepiCanon.o clang12_CSROA.o $$compile_options -o clang12_plugin_CSROA.so; \
	fi;

$(I386_CLANG12_TOPFNAME_PLUGIN) : clang12_plugin_topfname.so clang12_plugin_topfname_opt.so
clang12_plugin_topfname_opt.so : clang12_plugin_topfname.so
clang12_plugin_topfname.so : clang12_plugin_topfname.o 
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANG12_LIBS) -lversion `$(I386_LLVM_CONFIG12_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) opt_clang12_plugin_topfname.o $$compile_options -o clang12_plugin_topfname_opt.so; \
	  $(I386_CLANG12_PLUGIN_COMPILER) clang12_plugin_topfname.o $$compile_options -o clang12_plugin_topfname.so; \
	fi;

$(I386_CLANG12_ASTANALYZER_PLUGIN) : clang12_plugin_ASTAnalyzer.so
clang12_plugin_ASTAnalyzer.so : clang12_plugin_ASTAnalyzer.o 
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANG12_LIBS) -lversion `$(I386_LLVM_CONFIG12_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) clang12_plugin_ASTAnalyzer.o $$compile_options -o clang12_plugin_ASTAnalyzer.so; \
	fi;

clang12_plugin_dumpGimpleEmpty.o : $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleEmpty.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	    $(I386_CLANG12_PLUGIN_COMPILER) -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleEmpty.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clang12_plugin_dumpGimpleEmpty.o; \
	    $(I386_CLANG12_PLUGIN_COMPILER) -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleEmpty.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_plugin_dumpGimpleEmpty.o; \
	fi;

clang12_plugin_dumpGimpleSSA.o : $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleSSA.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) $(BOOST_CPPFLAGS) -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleSSA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clang12_plugin_dumpGimpleSSA.o;\
	  $(I386_CLANG12_PLUGIN_COMPILER) $(BOOST_CPPFLAGS) -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleSSA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_plugin_dumpGimpleSSA.o;\
	fi;

clang12_plugin_dumpGimpleSSACpp.o : $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleSSA.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I. -DCPP_LANGUAGE'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I. -DCPP_LANGUAGE';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) $(BOOST_CPPFLAGS) -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleSSA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clang12_plugin_dumpGimpleSSACpp.o;\
	  $(I386_CLANG12_PLUGIN_COMPILER) $(BOOST_CPPFLAGS) -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleSSA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_plugin_dumpGimpleSSACpp.o;\
	fi;

clang12_plugin_expandMemOps.o : $(top_srcdir)/etc/clang_plugin/plugin_expandMemOps.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_expandMemOps.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clang12_plugin_expandMemOps.o; \
	  $(I386_CLANG12_PLUGIN_COMPILER) -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_expandMemOps.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_plugin_expandMemOps.o; \
	fi;

clang12_plugin_GepiCanon.o : $(top_srcdir)/etc/clang_plugin/plugin_GepiCanon.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_GepiCanon.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clang12_plugin_GepiCanon.o; \
	  $(I386_CLANG12_PLUGIN_COMPILER) -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_GepiCanon.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_plugin_GepiCanon.o; \
	fi;

clang12_plugin_CSROA.o : $(top_srcdir)/etc/clang_plugin/plugin_CSROA.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp $(top_srcdir)/etc/clang_plugin/PtrIteratorSimplifyPass.hpp  $(top_srcdir)/etc/clang_plugin/ExpandMemOpsPass.hpp $(top_srcdir)/etc/clang_plugin/GepiCanonicalizationPass.hpp $(top_srcdir)/etc/clang_plugin/CustomScalarReplacementOfAggregatesPass.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_CSROA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clang12_plugin_CSROA.o; \
	  $(I386_CLANG12_PLUGIN_COMPILER) -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_CSROA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_plugin_CSROA.o; \
	fi;

clang12_plugin_topfname.o : $(top_srcdir)/etc/clang_plugin/plugin_topfname.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_topfname.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clang12_plugin_topfname.o; \
	  $(I386_CLANG12_PLUGIN_COMPILER) -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_topfname.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_plugin_topfname.o; \
	fi;

clang12_plugin_ASTAnalyzer.o : $(top_srcdir)/etc/clang_plugin/plugin_ASTAnalyzer.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_ASTAnalyzer.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_plugin_ASTAnalyzer.o;\
	fi;

clang12_my_OrderedInstructions.o : $(top_srcdir)/etc/clang_plugin/llvm/my_OrderedInstructions.cpp $(top_srcdir)/etc/clang_plugin/llvm/my_OrderedInstructions.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) $$compile_options -c $(top_srcdir)/etc/clang_plugin/llvm/my_OrderedInstructions.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_my_OrderedInstructions.o;\
	fi;

clang12_my_OrderedBasicBlock.o : $(top_srcdir)/etc/clang_plugin/llvm/my_OrderedBasicBlock.cpp $(top_srcdir)/etc/clang_plugin/llvm/my_OrderedBasicBlock.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) $$compile_options -c $(top_srcdir)/etc/clang_plugin/llvm/my_OrderedBasicBlock.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_my_OrderedBasicBlock.o;\
	fi;


clang12_dumpGimple.o : $(top_srcdir)/etc/clang_plugin/dumpGimple.cpp $(top_srcdir)/etc/clang_plugin/TreeHeightReduction.hpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp $(top_srcdir)/etc/clang_plugin/HardekopfLin_AA.hpp $(top_srcdir)/etc/clang_plugin/llvm/RangeAnalysis.hpp  $(top_srcdir)/etc/clang_plugin/llvm/eSSA.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) $$compile_options -c $(top_srcdir)/etc/clang_plugin/dumpGimple.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_dumpGimple.o;\
	fi;

if BUILD_PTAA
clang12_HardekopfLin_AA.o : $(top_srcdir)/etc/clang_plugin/HardekopfLin_AA.cpp $(top_srcdir)/etc/clang_plugin/HardekopfLin_AA.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANG12_PLUGIN_COMPILER) $$compile_options -c $(top_srcdir)/etc/clang_plugin/HardekopfLin_AA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_HardekopfLin_AA.o ; \
	fi;
endif

clang12_RangeAnalysis.o : $(top_srcdir)/etc/clang_plugin/llvm/RangeAnalysis.cpp $(top_srcdir)/etc/clang_plugin/llvm/RangeAnalysis.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	    $(I386_CLANG12_PLUGIN_COMPILER) $$compile_options -c $(top_srcdir)/etc/clang_plugin/llvm/RangeAnalysis.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_RangeAnalysis.o; \
	fi;

clang12_eSSA.o : $(top_srcdir)/etc/clang_plugin/llvm/eSSA.cpp $(top_srcdir)/etc/clang_plugin/llvm/eSSA.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	    $(I386_CLANG12_PLUGIN_COMPILER) $$compile_options -c $(top_srcdir)/etc/clang_plugin/llvm/eSSA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_eSSA.o; \
	fi;

clang12_GepiCanon.o : $(top_srcdir)/etc/clang_plugin/GepiCanonicalizationPass.cpp $(top_srcdir)/etc/clang_plugin/GepiCanonicalizationPass.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	    $(I386_CLANG12_PLUGIN_COMPILER) $$compile_options -c $(top_srcdir)/etc/clang_plugin/GepiCanonicalizationPass.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_GepiCanon.o; \
	fi;


clang12_CSROA.o : $(top_srcdir)/etc/clang_plugin/CustomScalarReplacementOfAggregatesPass.cpp $(top_srcdir)/etc/clang_plugin/CustomScalarReplacementOfAggregatesPass.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options=' -fPIC $(I386_LLVM12_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.'; \
	esac;\
	if test -n "$$compile_options"; then \
	    $(I386_CLANG12_PLUGIN_COMPILER) $$compile_options -c $(top_srcdir)/etc/clang_plugin/CustomScalarReplacementOfAggregatesPass.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clang12_CSROA.o; \
	fi;

bambuS2S-12: $(top_srcdir)/etc/clang_plugin/bambuS2S.cpp
	case $(host_os) in \
	  darwin*) \
	    $(I386_CLANG12_PLUGIN_COMPILER) $(BOOST_CPPFLAGS) -fno-rtti -O2 -std=c++14 `$(I386_LLVM_CONFIG12_EXE) --cppflags --ldflags --libs --system-libs` $^ $(CLANG12_LIBSD)  -o $@;;\
	  *) \
	    $(I386_CLANG12_PLUGIN_COMPILER) $(BOOST_CPPFLAGS) -fno-rtti -O2 -std=c++14 `$(I386_LLVM_CONFIG12_EXE) --cppflags --ldflags --libs --system-libs` $^ $(CLANG12_LIBS)  -o $@;;\
	esac;

######
