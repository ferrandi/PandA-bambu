###### clang VVD

CLANGVVD_LIBS=-Wl,--start-group $(CLANG_LIBS) -lclangCrossTU -lclangToolingInclusions -Wl,--end-group
CLANGVVD_LIBSD=$(CLANG_LIBS) -lclangCrossTU -lclangToolingInclusions
CLANGVVD_SYSTEM_H=$(shell $(I386_CLANG_CPPVVD_EXE) -v  < /dev/null 2>&1 | grep -E -v "(\#|Configured with|Using built-in|Target|Thread model|gcc version|End of search list|ignoring nonexistent directory|cc1 -E -quiet|cc1.exe -E -quiet|COMPILER_PATH|LIBRARY_PATH|COLLECT_GCC|ignoring duplicate directory|ignoring nonexistent directory|InstalledDir|clang version|Found candidate|Selected GCC installation|Candidate multilib|Selected multilib|-cc1)" | tr '\n' ' ' | tr '\r' ' '  | sed 's/\\/\//g')

if BUILD_I386_CLANGVVD_EMPTY_PLUGIN
all: $(I386_CLANGVVD_EMPTY_PLUGIN)
endif

if BUILD_I386_CLANGVVD_SSA_PLUGIN
all: $(I386_CLANGVVD_SSA_PLUGIN)
endif

if BUILD_I386_CLANGVVD_SSA_PLUGINCPP
all: $(I386_CLANGVVD_SSA_PLUGINCPP)
endif

if BUILD_I386_CLANGVVD_EXPANDMEMOPS_PLUGIN
all: $(I386_CLANGVVD_EXPANDMEMOPS_PLUGIN)
endif

if BUILD_I386_CLANGVVD_GEPICANON_PLUGIN
all: $(I386_CLANGVVD_GEPICANON_PLUGIN)
endif

if BUILD_I386_CLANGVVD_CSROA_PLUGIN
all: $(I386_CLANGVVD_CSROA_PLUGIN)
endif

if BUILD_I386_CLANGVVD_TOPFNAME_PLUGIN
all: $(I386_CLANGVVD_TOPFNAME_PLUGIN)
endif

if BUILD_I386_CLANGVVD_ASTANALYZER_PLUGIN
all: $(I386_CLANGVVD_ASTANALYZER_PLUGIN)
endif

$(I386_CLANGVVD_SSA_PLUGIN) : clangvvd_plugin_dumpGimpleSSA.so clangvvd_plugin_dumpGimpleSSA_opt.so
clangvvd_plugin_dumpGimpleSSA_opt.so : clangvvd_plugin_dumpGimpleSSA.so
if BUILD_PTAA
clangvvd_plugin_dumpGimpleSSA.so : clangvvd_plugin_dumpGimpleSSA.o clangvvd_dumpGimple.o clangvvd_HardekopfLin_AA.o clangvvd_RangeAnalysis.o clangvvd_eSSA.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANGVVD_LIBS) -lversion `$(I386_LLVM_CONFIGVVD_EXE) --ldflags --libs --system-libs` -lbdd';\
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti -lbdd';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete -lbdd';;\
	esac;\
	obj_list='clangvvd_dumpGimple.o clangvvd_HardekopfLin_AA.o clangvvd_RangeAnalysis.o clangvvd_eSSA.o';\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD opt_clangvvd_plugin_dumpGimpleSSA.o $$obj_list $$compile_options -o clangvvd_plugin_dumpGimpleSSA_opt.so;\
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD clangvvd_plugin_dumpGimpleSSA.o $$obj_list $$compile_options -o clangvvd_plugin_dumpGimpleSSA.so ; \
	fi;
else
clangvvd_plugin_dumpGimpleSSA.so : clangvvd_plugin_dumpGimpleSSA.o clangvvd_dumpGimple.o clangvvd_RangeAnalysis.o clangvvd_eSSA.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANGVVD_LIBS) -lversion `$(I386_LLVM_CONFIGVVD_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	obj_list='clangvvd_dumpGimple.o clangvvd_RangeAnalysis.o clangvvd_eSSA.o';\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD opt_clangvvd_plugin_dumpGimpleSSA.o $$obj_list $$compile_options -o clangvvd_plugin_dumpGimpleSSA_opt.so;\
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD clangvvd_plugin_dumpGimpleSSA.o $$obj_list $$compile_options -o clangvvd_plugin_dumpGimpleSSA.so ; \
	fi;
endif

$(I386_CLANGVVD_SSA_PLUGINCPP) : clangvvd_plugin_dumpGimpleSSACpp.so clangvvd_plugin_dumpGimpleSSACpp_opt.so
clangvvd_plugin_dumpGimpleSSACpp_opt.so : clangvvd_plugin_dumpGimpleSSACpp.so
if BUILD_PTAA
clangvvd_plugin_dumpGimpleSSACpp.so : clangvvd_plugin_dumpGimpleSSACpp.o clangvvd_dumpGimple.o clangvvd_HardekopfLin_AA.o clangvvd_RangeAnalysis.o clangvvd_eSSA.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANGVVD_LIBS) -lversion `$(I386_LLVM_CONFIGVVD_EXE) --ldflags --libs --system-libs` -lbdd'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti -lbdd';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete -lbdd';;\
	esac;\
	obj_list='clangvvd_dumpGimple.o clangvvd_HardekopfLin_AA.o clangvvd_RangeAnalysis.o clangvvd_eSSA.o';\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD opt_clangvvd_plugin_dumpGimpleSSACpp.o $$obj_list $$compile_options -o clangvvd_plugin_dumpGimpleSSACpp_opt.so;\
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD clangvvd_plugin_dumpGimpleSSACpp.o $$obj_list $$compile_options -o clangvvd_plugin_dumpGimpleSSACpp.so;\
	fi;
else
clangvvd_plugin_dumpGimpleSSACpp.so : clangvvd_plugin_dumpGimpleSSACpp.o clangvvd_dumpGimple.o clangvvd_RangeAnalysis.o clangvvd_eSSA.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANGVVD_LIBS) -lversion `$(I386_LLVM_CONFIGVVD_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	obj_list='clangvvd_dumpGimple.o clangvvd_RangeAnalysis.o clangvvd_eSSA.o';\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD opt_clangvvd_plugin_dumpGimpleSSACpp.o $$obj_list $$compile_options -o clangvvd_plugin_dumpGimpleSSACpp_opt.so;\
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD clangvvd_plugin_dumpGimpleSSACpp.o $$obj_list $$compile_options -o clangvvd_plugin_dumpGimpleSSACpp.so;\
	fi;
endif

$(I386_CLANGVVD_EMPTY_PLUGIN) : clangvvd_plugin_dumpGimpleEmpty.so clangvvd_plugin_dumpGimpleEmpty_opt.so
clangvvd_plugin_dumpGimpleEmpty_opt.so : clangvvd_plugin_dumpGimpleEmpty.so
if BUILD_PTAA
clangvvd_plugin_dumpGimpleEmpty.so : clangvvd_plugin_dumpGimpleEmpty.o clangvvd_dumpGimple.o clangvvd_HardekopfLin_AA.o clangvvd_RangeAnalysis.o clangvvd_eSSA.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANGVVD_LIBS) -lversion `$(I386_LLVM_CONFIGVVD_EXE) --ldflags --libs --system-libs` -lbdd'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti -lbdd';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete -lbdd';;\
	esac;\
	obj_list='clangvvd_dumpGimple.o clangvvd_HardekopfLin_AA.o clangvvd_RangeAnalysis.o clangvvd_eSSA.o';\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD opt_clangvvd_plugin_dumpGimpleEmpty.o $$obj_list $$compile_options -o clangvvd_plugin_dumpGimpleEmpty_opt.so; \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD clangvvd_plugin_dumpGimpleEmpty.o $$obj_list $$compile_options -o clangvvd_plugin_dumpGimpleEmpty.so; \
	fi;
else
clangvvd_plugin_dumpGimpleEmpty.so : clangvvd_plugin_dumpGimpleEmpty.o clangvvd_dumpGimple.o clangvvd_RangeAnalysis.o clangvvd_eSSA.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANGVVD_LIBS) -lversion `$(I386_LLVM_CONFIGVVD_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	obj_list='clangvvd_dumpGimple.o clangvvd_RangeAnalysis.o clangvvd_eSSA.o';\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD opt_clangvvd_plugin_dumpGimpleEmpty.o $$obj_list $$compile_options -o clangvvd_plugin_dumpGimpleEmpty_opt.so; \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD clangvvd_plugin_dumpGimpleEmpty.o $$obj_list $$compile_options -o clangvvd_plugin_dumpGimpleEmpty.so; \
	fi;
endif

$(I386_CLANGVVD_EXPANDMEMOPS_PLUGIN) : clangvvd_plugin_expandMemOps.so clangvvd_plugin_expandMemOps_opt.so
clangvvd_plugin_expandMemOps_opt.so : clangvvd_plugin_expandMemOps.so
clangvvd_plugin_expandMemOps.so : clangvvd_plugin_expandMemOps.o 
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANGVVD_LIBS) -lversion `$(I386_LLVM_CONFIGVVD_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD opt_clangvvd_plugin_expandMemOps.o $$compile_options -o clangvvd_plugin_expandMemOps_opt.so; \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD clangvvd_plugin_expandMemOps.o $$compile_options -o clangvvd_plugin_expandMemOps.so; \
	fi;

$(I386_CLANGVVD_GEPICANON_PLUGIN) : clangvvd_plugin_GepiCanon.so clangvvd_plugin_GepiCanon_opt.so
clangvvd_plugin_GepiCanon_opt.so : clangvvd_plugin_GepiCanon.so
clangvvd_plugin_GepiCanon.so : clangvvd_plugin_GepiCanon.o clangvvd_GepiCanon.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANGVVD_LIBS) -lversion `$(I386_LLVM_CONFIGVVD_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD opt_clangvvd_plugin_GepiCanon.o clangvvd_GepiCanon.o $$compile_options -o clangvvd_plugin_GepiCanon_opt.so; \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD clangvvd_plugin_GepiCanon.o clangvvd_GepiCanon.o $$compile_options -o clangvvd_plugin_GepiCanon.so; \
	fi;

$(I386_CLANGVVD_CSROA_PLUGIN) : clangvvd_plugin_CSROA.so clangvvd_plugin_CSROA_opt.so
clangvvd_plugin_CSROA_opt.so : clangvvd_plugin_CSROA.so
clangvvd_plugin_CSROA.so : clangvvd_plugin_CSROA.o clangvvd_CSROA.o clangvvd_GepiCanon.o
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANGVVD_LIBS) -lversion `$(I386_LLVM_CONFIGVVD_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD opt_clangvvd_plugin_CSROA.o clangvvd_GepiCanon.o clangvvd_CSROA.o $$compile_options -o clangvvd_plugin_CSROA_opt.so; \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD clangvvd_plugin_CSROA.o clangvvd_GepiCanon.o clangvvd_CSROA.o $$compile_options -o clangvvd_plugin_CSROA.so; \
	fi;

$(I386_CLANGVVD_TOPFNAME_PLUGIN) : clangvvd_plugin_topfname.so clangvvd_plugin_topfname_opt.so
clangvvd_plugin_topfname_opt.so : clangvvd_plugin_topfname.so
clangvvd_plugin_topfname.so : clangvvd_plugin_topfname.o 
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANGVVD_LIBS) -lversion `$(I386_LLVM_CONFIGVVD_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD opt_clangvvd_plugin_topfname.o $$compile_options -o clangvvd_plugin_topfname_opt.so; \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD clangvvd_plugin_topfname.o $$compile_options -o clangvvd_plugin_topfname.so; \
	fi;

$(I386_CLANGVVD_ASTANALYZER_PLUGIN) : clangvvd_plugin_ASTAnalyzer.so
clangvvd_plugin_ASTAnalyzer.so : clangvvd_plugin_ASTAnalyzer.o 
	case $(host_os) in \
	  mingw*) \
	    compile_options='$(CLANGVVD_LIBS) -lversion `$(I386_LLVM_CONFIGVVD_EXE) --ldflags --libs --system-libs`'; \
	    compile_options='';; \
	  darwin*) \
	    compile_options='-fPIC -shared -undefined dynamic_lookup -fno-rtti';; \
	  *) \
	    compile_options='-fPIC -shared -fno-rtti -Wl,-znodelete';;\
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD clangvvd_plugin_ASTAnalyzer.o $$compile_options -o clangvvd_plugin_ASTAnalyzer.so; \
	fi;

clangvvd_plugin_dumpGimpleEmpty.o : $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleEmpty.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	    $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleEmpty.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clangvvd_plugin_dumpGimpleEmpty.o; \
	    $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleEmpty.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_plugin_dumpGimpleEmpty.o; \
	fi;

clangvvd_plugin_dumpGimpleSSA.o : $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleSSA.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD $(BOOST_CPPFLAGS) -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleSSA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clangvvd_plugin_dumpGimpleSSA.o;\
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD $(BOOST_CPPFLAGS) -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleSSA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_plugin_dumpGimpleSSA.o;\
	fi;

clangvvd_plugin_dumpGimpleSSACpp.o : $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleSSA.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I. -DCPP_LANGUAGE'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I. -DCPP_LANGUAGE';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD $(BOOST_CPPFLAGS) -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleSSA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clangvvd_plugin_dumpGimpleSSACpp.o;\
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD $(BOOST_CPPFLAGS) -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_dumpGimpleSSA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_plugin_dumpGimpleSSACpp.o;\
	fi;

clangvvd_plugin_expandMemOps.o : $(top_srcdir)/etc/clang_plugin/plugin_expandMemOps.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_expandMemOps.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clangvvd_plugin_expandMemOps.o; \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_expandMemOps.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_plugin_expandMemOps.o; \
	fi;

clangvvd_plugin_GepiCanon.o : $(top_srcdir)/etc/clang_plugin/plugin_GepiCanon.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_GepiCanon.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clangvvd_plugin_GepiCanon.o; \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_GepiCanon.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_plugin_GepiCanon.o; \
	fi;

clangvvd_plugin_CSROA.o : $(top_srcdir)/etc/clang_plugin/plugin_CSROA.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp $(top_srcdir)/etc/clang_plugin/PtrIteratorSimplifyPass.hpp  $(top_srcdir)/etc/clang_plugin/ExpandMemOpsPass.hpp $(top_srcdir)/etc/clang_plugin/GepiCanonicalizationPass.hpp $(top_srcdir)/etc/clang_plugin/CustomScalarReplacementOfAggregatesPass.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_CSROA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clangvvd_plugin_CSROA.o; \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_CSROA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_plugin_CSROA.o; \
	fi;

clangvvd_plugin_topfname.o : $(top_srcdir)/etc/clang_plugin/plugin_topfname.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD -DADD_RSP=0 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_topfname.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o opt_clangvvd_plugin_topfname.o; \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD -DADD_RSP=1 $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_topfname.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_plugin_topfname.o; \
	fi;

clangvvd_plugin_ASTAnalyzer.o : $(top_srcdir)/etc/clang_plugin/plugin_ASTAnalyzer.cpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp 
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD $$compile_options -c $(top_srcdir)/etc/clang_plugin/plugin_ASTAnalyzer.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_plugin_ASTAnalyzer.o;\
	fi;

clangvvd_dumpGimple.o : $(top_srcdir)/etc/clang_plugin/dumpGimple.cpp $(top_srcdir)/etc/clang_plugin/TreeHeightReduction.hpp $(top_srcdir)/etc/clang_plugin/plugin_includes.hpp $(top_srcdir)/etc/clang_plugin/HardekopfLin_AA.hpp $(top_srcdir)/etc/clang_plugin/llvm/RangeAnalysis.hpp  $(top_srcdir)/etc/clang_plugin/llvm/eSSA.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD $$compile_options -c $(top_srcdir)/etc/clang_plugin/dumpGimple.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_dumpGimple.o;\
	fi;

if BUILD_PTAA
clangvvd_HardekopfLin_AA.o : $(top_srcdir)/etc/clang_plugin/HardekopfLin_AA.cpp $(top_srcdir)/etc/clang_plugin/HardekopfLin_AA.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	  $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD $$compile_options -c $(top_srcdir)/etc/clang_plugin/HardekopfLin_AA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_HardekopfLin_AA.o ; \
	fi;
endif

clangvvd_RangeAnalysis.o : $(top_srcdir)/etc/clang_plugin/llvm/RangeAnalysis.cpp $(top_srcdir)/etc/clang_plugin/llvm/RangeAnalysis.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	    $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD $$compile_options -c $(top_srcdir)/etc/clang_plugin/llvm/RangeAnalysis.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_RangeAnalysis.o; \
	fi;

clangvvd_eSSA.o : $(top_srcdir)/etc/clang_plugin/llvm/eSSA.cpp $(top_srcdir)/etc/clang_plugin/llvm/eSSA.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	    $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD $$compile_options -c $(top_srcdir)/etc/clang_plugin/llvm/eSSA.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_eSSA.o; \
	fi;

clangvvd_GepiCanon.o : $(top_srcdir)/etc/clang_plugin/GepiCanonicalizationPass.cpp $(top_srcdir)/etc/clang_plugin/GepiCanonicalizationPass.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	    $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD $$compile_options -c $(top_srcdir)/etc/clang_plugin/GepiCanonicalizationPass.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_GepiCanon.o; \
	fi;


clangvvd_CSROA.o : $(top_srcdir)/etc/clang_plugin/CustomScalarReplacementOfAggregatesPass.cpp $(top_srcdir)/etc/clang_plugin/CustomScalarReplacementOfAggregatesPass.hpp
	case $(host_os) in \
	  mingw*) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.'; \
	    compile_options='';; \
	  *) \
	    compile_options='  -fPIC $(I386_LLVMVVD_CXXFLAGS) -DPANDA_PLUGIN_VERSION="$(PANDA_PLUGIN_VERSION)" $(WFLAGS) -I.';; \
	esac;\
	if test -n "$$compile_options"; then \
	    $(I386_CLANGVVD_PLUGIN_COMPILER) -DVVD $$compile_options -c $(top_srcdir)/etc/clang_plugin/CustomScalarReplacementOfAggregatesPass.cpp $(CLANG_PLUGIN_ADDITIONAL_OPTIONS) -o clangvvd_CSROA.o; \
	fi;

######
