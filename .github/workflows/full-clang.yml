name: Full Regressions Clang

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - "documentation/**"

  workflow_dispatch:

concurrency:
  group: full-clang-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  build:
    uses: ./.github/workflows/build-appimage.yml
    with:
      package-name: bambu-clang-full
      compilers: gcc-7,clang-4,clang-5,clang-6,clang-7,clang-8,clang-9,clang-10,clang-11,clang-12
      build-compiler: gcc-8
      configure: --enable-glpk --enable-flopoco --enable-opt --with-opt-level=2 --enable-release CC=gcc-8 CXX=g++-8
    secrets:
      CI_STORAGE_URL: ${{secrets.CI_STORAGE_URL}}
      CI_STORAGE_USER: ${{secrets.CI_STORAGE_USER}}
      CI_STORAGE_TOKEN: ${{secrets.CI_STORAGE_TOKEN}}

  simulate-all:
    needs: [build]
    runs-on: [self-hosted, long, mentor]
    env:
      report-dir: test-reports
      args: -c=--simulator=MODELSIM
    strategy:
      fail-fast: false
      matrix:
        include:
          - outname: all_clang_softfloat-tests
            script: all_clang_softfloat-tests.sh
          - outname: all_clang_CHStone-frontend
            script: all_clang_CHStone-frontend.sh
          - outname: all_clang_softfloat-tests-vhdl
            script: all_clang_softfloat-tests.sh -c=-wH
          - outname: all_clang_CHStone-frontend-vhdl
            script: all_clang_CHStone-frontend.sh -c=-wH
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{needs.build.outputs.package-name}}
          storage-url: "${{secrets.CI_STORAGE_URL}}"
          username: "${{secrets.CI_STORAGE_USER}}"
          password: "${{secrets.CI_STORAGE_TOKEN}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{matrix.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  grs:
    needs: [build, simulate-all]
    uses: ./.github/workflows/reusable-grs.yml
    with:
      package-name: ${{needs.build.outputs.package-name}}
      test-compilers: I386_CLANG4,I386_CLANG5,I386_CLANG6,I386_CLANG7,I386_CLANG8,I386_CLANG9,I386_CLANG10,I386_CLANG11,I386_CLANG12
      additional-args: \"\",\"-c=--speculative-sdc-scheduling --skip_list 20040705-1,20040705-2,20040629-1\"
    secrets:
      CI_STORAGE_URL: ${{secrets.CI_STORAGE_URL}}
      CI_STORAGE_USER: ${{secrets.CI_STORAGE_USER}}
      CI_STORAGE_TOKEN: ${{secrets.CI_STORAGE_TOKEN}}

  grs-vhdl:
    needs: [build, simulate-all]
    uses: ./.github/workflows/reusable-grs-vhdl.yml
    with:
      package-name: ${{needs.build.outputs.package-name}}
      test-compilers: I386_CLANG4,I386_CLANG5,I386_CLANG6,I386_CLANG7,I386_CLANG8,I386_CLANG9,I386_CLANG10,I386_CLANG11,I386_CLANG12
    secrets:
      CI_STORAGE_URL: ${{secrets.CI_STORAGE_URL}}
      CI_STORAGE_USER: ${{secrets.CI_STORAGE_USER}}
      CI_STORAGE_TOKEN: ${{secrets.CI_STORAGE_TOKEN}}

  examples:
    needs: [build, simulate-all]
    uses: ./.github/workflows/reusable-examples.yml
    with:
      package-name: ${{needs.build.outputs.package-name}}
      test-compiler: I386_CLANG12
    secrets:
      CI_STORAGE_URL: ${{secrets.CI_STORAGE_URL}}
      CI_STORAGE_USER: ${{secrets.CI_STORAGE_USER}}
      CI_STORAGE_TOKEN: ${{secrets.CI_STORAGE_TOKEN}}
